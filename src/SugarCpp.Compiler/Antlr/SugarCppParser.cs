//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-11 13:56:20

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Chain", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_List", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_For", "Stmt_ForEach", "Stmt_For_Down_To", "Stmt_For_To", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Unless", "Stmt_Until", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'from'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unless'", "'unsigned'", "'until'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int T__154=154;
	public const int T__155=155;
	public const int T__156=156;
	public const int T__157=157;
	public const int T__158=158;
	public const int T__159=159;
	public const int T__160=160;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Chain=20;
	public const int Expr_Cond=21;
	public const int Expr_Cond_Not_Null=22;
	public const int Expr_Dict=23;
	public const int Expr_Infix=24;
	public const int Expr_Lambda=25;
	public const int Expr_List=26;
	public const int Expr_New_Array=27;
	public const int Expr_New_Type=28;
	public const int Expr_Not_Null=29;
	public const int Expr_Prefix=30;
	public const int Expr_Suffix=31;
	public const int Expr_Tuple=32;
	public const int Func_Args=33;
	public const int Func_Def=34;
	public const int Generic_Patameters=35;
	public const int Global_Block=36;
	public const int IDENT=37;
	public const int INDENT=38;
	public const int Ident_List=39;
	public const int Import=40;
	public const int Left_Bracket=41;
	public const int LineComment=42;
	public const int Linq_From=43;
	public const int Linq_Let=44;
	public const int Linq_Prefix=45;
	public const int Linq_Where=46;
	public const int Match_Tuple=47;
	public const int NEWLINE=48;
	public const int NUMBER=49;
	public const int Namespace=50;
	public const int Right_Bracket=51;
	public const int Root=52;
	public const int SP=53;
	public const int STRING=54;
	public const int Stmt_Block=55;
	public const int Stmt_Defer=56;
	public const int Stmt_Finally=57;
	public const int Stmt_For=58;
	public const int Stmt_ForEach=59;
	public const int Stmt_For_Down_To=60;
	public const int Stmt_For_To=61;
	public const int Stmt_If=62;
	public const int Stmt_Linq=63;
	public const int Stmt_Loop=64;
	public const int Stmt_Return=65;
	public const int Stmt_Try=66;
	public const int Stmt_Typedef=67;
	public const int Stmt_Unless=68;
	public const int Stmt_Until=69;
	public const int Stmt_Using=70;
	public const int Stmt_While=71;
	public const int Type_IDENT=72;
	public const int Type_Ref=73;
	public const int Type_Tuple=74;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:178:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(178, 1);
		try
		{
			// SugarCpp.g:179:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:179:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(179, 4);
			// SugarCpp.g:179:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:179:4: NEWLINE
					{
					DebugLocation(179, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root516);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(179, 13);
			PushFollow(Follow._global_block_in_root519);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(179, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root521);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 179:30: -> ^( Root global_block )
			{
				DebugLocation(179, 33);
				// SugarCpp.g:179:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(179, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(179, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(180, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:182:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(182, 1);
		try
		{
			// SugarCpp.g:183:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:183:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(183, 4);
			// SugarCpp.g:183:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==118||(LA3_0>=127 && LA3_0<=128)||LA3_0==132||LA3_0==137||LA3_0==143||LA3_0==150||LA3_0==152||LA3_0==154||LA3_0==160))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:183:5: node ( NEWLINE )+
					{
					DebugLocation(183, 5);
					PushFollow(Follow._node_in_global_block541);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(183, 10);
					// SugarCpp.g:183:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:183:10: NEWLINE
							{
							DebugLocation(183, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block543);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 183:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(183, 24);
				// SugarCpp.g:183:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(183, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(183, 39);
				// SugarCpp.g:183:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(183, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(184, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:186:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(186, 1);
		try
		{
			// SugarCpp.g:187:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:187:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				PushFollow(Follow._func_def_in_node566);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:188:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(188, 4);
				PushFollow(Follow._class_def_in_node571);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:189:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(189, 4);
				PushFollow(Follow._enum_def_in_node576);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:190:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(190, 4);
				PushFollow(Follow._global_alloc_in_node581);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:191:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 4);
				PushFollow(Follow._global_using_in_node586);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:192:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 4);
				PushFollow(Follow._global_typedef_in_node591);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:193:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 4);
				PushFollow(Follow._import_def_in_node596);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:194:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(194, 4);
				PushFollow(Follow._namespace_def_in_node601);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:197:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(197, 1);
		try
		{
			// SugarCpp.g:198:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:198:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(198, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args613); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:199:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(199, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args618); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:200:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(200, 4);
				PushFollow(Follow._ident_in_attribute_args623);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(201, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:203:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(203, 1);
		try
		{
			// SugarCpp.g:204:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==128))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:204:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(204, 4);
				PushFollow(Follow._ident_in_attribute_item634);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(204, 10);
				// SugarCpp.g:204:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==82))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:204:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(204, 11);
					char_literal18=(IToken)Match(input,82,Follow._82_in_attribute_item637);  
					stream_82.Add(char_literal18);

					DebugLocation(204, 15);
					PushFollow(Follow._attribute_args_in_attribute_item639);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(204, 30);
					// SugarCpp.g:204:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==89))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:204:31: ',' attribute_args
							{
							DebugLocation(204, 31);
							char_literal20=(IToken)Match(input,89,Follow._89_in_attribute_item642);  
							stream_89.Add(char_literal20);

							DebugLocation(204, 35);
							PushFollow(Follow._attribute_args_in_attribute_item644);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(204, 52);
					char_literal22=(IToken)Match(input,83,Follow._83_in_attribute_item648);  
					stream_83.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: ident, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 204:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(204, 61);
					// SugarCpp.g:204:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(204, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(204, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(204, 79);
					// SugarCpp.g:204:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(204, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:205:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(205, 4);
				string_literal23=(IToken)Match(input,128,Follow._128_in_attribute_item666);  
				stream_128.Add(string_literal23);

				DebugLocation(205, 12);
				// SugarCpp.g:205:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==82))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:205:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(205, 13);
					char_literal24=(IToken)Match(input,82,Follow._82_in_attribute_item669);  
					stream_82.Add(char_literal24);

					DebugLocation(205, 17);
					PushFollow(Follow._attribute_args_in_attribute_item671);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(205, 32);
					// SugarCpp.g:205:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==89))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:205:33: ',' attribute_args
							{
							DebugLocation(205, 33);
							char_literal26=(IToken)Match(input,89,Follow._89_in_attribute_item674);  
							stream_89.Add(char_literal26);

							DebugLocation(205, 37);
							PushFollow(Follow._attribute_args_in_attribute_item676);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(205, 54);
					char_literal28=(IToken)Match(input,83,Follow._83_in_attribute_item680);  
					stream_83.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: attribute_args, 128
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 205:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(205, 63);
					// SugarCpp.g:205:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(205, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(205, 75);
					adaptor.AddChild(root_1, stream_128.NextNode());
					DebugLocation(205, 83);
					// SugarCpp.g:205:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(205, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(206, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:208:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(208, 1);
		try
		{
			// SugarCpp.g:209:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:209:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(209, 4);
			// SugarCpp.g:209:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==118))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:209:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(209, 5);
					char_literal29=(IToken)Match(input,118,Follow._118_in_attribute705);  
					stream_118.Add(char_literal29);

					DebugLocation(209, 9);
					PushFollow(Follow._attribute_item_in_attribute707);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(209, 24);
					// SugarCpp.g:209:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==89))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:209:25: ',' attribute_item
							{
							DebugLocation(209, 25);
							char_literal31=(IToken)Match(input,89,Follow._89_in_attribute710);  
							stream_89.Add(char_literal31);

							DebugLocation(209, 29);
							PushFollow(Follow._attribute_item_in_attribute712);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(209, 46);
					char_literal33=(IToken)Match(input,119,Follow._119_in_attribute716);  
					stream_119.Add(char_literal33);

					DebugLocation(209, 50);
					// SugarCpp.g:209:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:209:50: NEWLINE
							{
							DebugLocation(209, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute718);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 209:61: -> ( attribute_item )+
			{
				DebugLocation(209, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(209, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(210, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:212:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(212, 1);
		try
		{
			// SugarCpp.g:213:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:213:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			{
			DebugLocation(213, 4);
			// SugarCpp.g:213:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==118))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:213:4: attribute
				{
				DebugLocation(213, 4);
				PushFollow(Follow._attribute_in_global_alloc737);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(213, 15);
			PushFollow(Follow._ident_list_in_global_alloc740);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(213, 26);
			// SugarCpp.g:213:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ( attribute )? ident_list ( expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==99))
			{
				alt19 = 1;
			}
			else if ((LA19_0==101))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:213:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(213, 28);
				char_literal37=(IToken)Match(input,99,Follow._99_in_global_alloc744);  
				stream_99.Add(char_literal37);

				DebugLocation(213, 32);
				PushFollow(Follow._type_name_in_global_alloc746);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(213, 42);
				// SugarCpp.g:213:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 101:
				case 108:
					{
					alt17 = 1;
					}
					break;
				case 82:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:213:44: ( '=' | ':=' ) expr
					{
					DebugLocation(213, 44);
					// SugarCpp.g:213:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==108))
					{
						alt15 = 1;
					}
					else if ((LA15_0==101))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:213:45: '='
						{
						DebugLocation(213, 45);
						char_literal39=(IToken)Match(input,108,Follow._108_in_global_alloc751);  
						stream_108.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:213:51: ':='
						{
						DebugLocation(213, 51);
						string_literal40=(IToken)Match(input,101,Follow._101_in_global_alloc755);  
						stream_101.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(213, 57);
					PushFollow(Follow._expr_in_global_alloc758);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, attribute, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 213:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(213, 65);
						// SugarCpp.g:213:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(213, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(213, 84);
						// SugarCpp.g:213:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(213, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(213, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(213, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(213, 116);
						// SugarCpp.g:213:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(213, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:214:43: '(' ( expr_list )? ')'
					{
					DebugLocation(214, 43);
					char_literal42=(IToken)Match(input,82,Follow._82_in_global_alloc818);  
					stream_82.Add(char_literal42);

					DebugLocation(214, 47);
					// SugarCpp.g:214:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==75||LA16_0==80||LA16_0==82||LA16_0==84||(LA16_0>=86 && LA16_0<=87)||(LA16_0>=90 && LA16_0<=91)||(LA16_0>=117 && LA16_0<=118)||LA16_0==144||LA16_0==160))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:214:47: expr_list
						{
						DebugLocation(214, 47);
						PushFollow(Follow._expr_list_in_global_alloc820);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(214, 58);
					char_literal44=(IToken)Match(input,83,Follow._83_in_global_alloc823);  
					stream_83.Add(char_literal44);



					{
					// AST REWRITE
					// elements: type_name, attribute, expr_list, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 214:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(214, 65);
						// SugarCpp.g:214:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(214, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(214, 86);
						// SugarCpp.g:214:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(214, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(214, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(214, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(214, 118);
						// SugarCpp.g:214:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(214, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:215:17: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 215:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(215, 20);
						// SugarCpp.g:215:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(215, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(215, 39);
						// SugarCpp.g:215:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(215, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(215, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(215, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:217:10: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(217, 10);
				string_literal45=(IToken)Match(input,101,Follow._101_in_global_alloc896);  
				stream_101.Add(string_literal45);

				DebugLocation(217, 15);
				// SugarCpp.g:217:15: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:217:16: expr ( ',' expr )*
				{
				DebugLocation(217, 16);
				PushFollow(Follow._expr_in_global_alloc899);
				expr46=expr();
				PopFollow();

				stream_expr.Add(expr46.Tree);
				DebugLocation(217, 21);
				// SugarCpp.g:217:21: ( ',' expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==89))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:217:22: ',' expr
						{
						DebugLocation(217, 22);
						char_literal47=(IToken)Match(input,89,Follow._89_in_global_alloc902);  
						stream_89.Add(char_literal47);

						DebugLocation(217, 26);
						PushFollow(Follow._expr_in_global_alloc904);
						expr48=expr();
						PopFollow();

						stream_expr.Add(expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: attribute, 101, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 217:34: -> ^( ':=' ( attribute )? ident_list ( expr )+ )
				{
					DebugLocation(217, 37);
					// SugarCpp.g:217:37: ^( ':=' ( attribute )? ident_list ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(217, 39);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_101.NextNode(), root_1);

					DebugLocation(217, 44);
					// SugarCpp.g:217:44: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(217, 44);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(217, 55);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(217, 66);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(217, 66);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(219, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:221:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(221, 1);
		try
		{
			// SugarCpp.g:222:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:222:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(222, 4);
			PushFollow(Follow._stmt_using_in_global_using941);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(223, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:225:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(225, 1);
		try
		{
			// SugarCpp.g:226:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:226:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(226, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef952);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(227, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:229:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(229, 1);
		try
		{
			// SugarCpp.g:230:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:230:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(230, 4);
			string_literal51=(IToken)Match(input,137,Follow._137_in_import_def963);  
			stream_137.Add(string_literal51);

			DebugLocation(230, 13);
			// SugarCpp.g:230:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:13: STRING
				{
				DebugLocation(230, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def965);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(230, 21);
			// SugarCpp.g:230:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:230:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(230, 22);
				// SugarCpp.g:230:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:230:22: NEWLINE
						{
						DebugLocation(230, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def969);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(230, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def972);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(230, 38);
				// SugarCpp.g:230:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:230:38: NEWLINE
						{
						DebugLocation(230, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def974);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(230, 48);
				// SugarCpp.g:230:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:230:49: STRING ( NEWLINE )+
						{
						DebugLocation(230, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def979);  
						stream_STRING.Add(STRING56);

						DebugLocation(230, 56);
						// SugarCpp.g:230:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:230:56: NEWLINE
								{
								DebugLocation(230, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def981);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(230, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def986);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 230:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(230, 79);
				// SugarCpp.g:230:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(230, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(230, 88);
				// SugarCpp.g:230:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(230, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(231, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:233:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(233, 1);
		try
		{
			// SugarCpp.g:234:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:234:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(234, 4);
			// SugarCpp.g:234:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==118))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:234:4: attribute
				{
				DebugLocation(234, 4);
				PushFollow(Follow._attribute_in_enum_def1008);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(234, 15);
			string_literal60=(IToken)Match(input,132,Follow._132_in_enum_def1011);  
			stream_132.Add(string_literal60);

			DebugLocation(234, 22);
			PushFollow(Follow._ident_in_enum_def1013);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(234, 28);
			char_literal62=(IToken)Match(input,108,Follow._108_in_enum_def1015);  
			stream_108.Add(char_literal62);

			DebugLocation(234, 32);
			// SugarCpp.g:234:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:234:33: ident ( '|' ident )*
				{
				DebugLocation(234, 33);
				PushFollow(Follow._ident_in_enum_def1018);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(234, 39);
				// SugarCpp.g:234:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==157))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:234:40: '|' ident
						{
						DebugLocation(234, 40);
						char_literal64=(IToken)Match(input,157,Follow._157_in_enum_def1021);  
						stream_157.Add(char_literal64);

						DebugLocation(234, 44);
						PushFollow(Follow._ident_in_enum_def1023);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: attribute, ident, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 234:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(234, 57);
				// SugarCpp.g:234:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(234, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(234, 64);
				// SugarCpp.g:234:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(234, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(234, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(234, 81);
				// SugarCpp.g:234:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(234, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(234, 94);
				// SugarCpp.g:234:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(234, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(235, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:237:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(237, 1);
		try
		{
			// SugarCpp.g:238:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:238:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(238, 4);
			string_literal66=(IToken)Match(input,143,Follow._143_in_namespace_def1056);  
			stream_143.Add(string_literal66);

			DebugLocation(238, 16);
			PushFollow(Follow._ident_in_namespace_def1058);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(238, 22);
			// SugarCpp.g:238:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:22: NEWLINE
					{
					DebugLocation(238, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1060);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(238, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1063);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(238, 38);
			// SugarCpp.g:238:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:238:38: NEWLINE
					{
					DebugLocation(238, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1065);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(238, 47);
			PushFollow(Follow._global_block_in_namespace_def1068);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(238, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1070);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 238:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(238, 70);
				// SugarCpp.g:238:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(238, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(238, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(238, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(239, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:241:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(241, 1);
		try
		{
			// SugarCpp.g:242:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:242:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(242, 5);
			// SugarCpp.g:242:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==118))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:242:5: attribute
				{
				DebugLocation(242, 5);
				PushFollow(Follow._attribute_in_class_def1092);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(242, 16);
			string_literal74=(IToken)Match(input,127,Follow._127_in_class_def1095);  
			stream_127.Add(string_literal74);

			DebugLocation(242, 24);
			PushFollow(Follow._ident_in_class_def1097);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(242, 30);
			// SugarCpp.g:242:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==103))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:242:31: generic_parameter
				{
				DebugLocation(242, 31);
				PushFollow(Follow._generic_parameter_in_class_def1100);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(242, 51);
			// SugarCpp.g:242:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==82))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:242:52: '(' func_args ')'
				{
				DebugLocation(242, 52);
				char_literal77=(IToken)Match(input,82,Follow._82_in_class_def1105);  
				stream_82.Add(char_literal77);

				DebugLocation(242, 56);
				PushFollow(Follow._func_args_in_class_def1107);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(242, 66);
				char_literal79=(IToken)Match(input,83,Follow._83_in_class_def1109);  
				stream_83.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(242, 72);
			// SugarCpp.g:242:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==99))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:242:73: ':' ident ( ',' ident )*
				{
				DebugLocation(242, 73);
				char_literal80=(IToken)Match(input,99,Follow._99_in_class_def1114);  
				stream_99.Add(char_literal80);

				DebugLocation(242, 77);
				PushFollow(Follow._ident_in_class_def1116);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(242, 83);
				// SugarCpp.g:242:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==89))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:84: ',' ident
						{
						DebugLocation(242, 84);
						char_literal82=(IToken)Match(input,89,Follow._89_in_class_def1119);  
						stream_89.Add(char_literal82);

						DebugLocation(242, 88);
						PushFollow(Follow._ident_in_class_def1121);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(242, 98);
			// SugarCpp.g:242:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:242:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(242, 99);
				// SugarCpp.g:242:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:99: NEWLINE
						{
						DebugLocation(242, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1128);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(242, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1131);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(242, 115);
				// SugarCpp.g:242:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:242:115: NEWLINE
						{
						DebugLocation(242, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1133);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(242, 124);
				PushFollow(Follow._global_block_in_class_def1136);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(242, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1138);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: generic_parameter, ident, func_args, attribute, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 242:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(242, 149);
				// SugarCpp.g:242:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(242, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(242, 157);
				// SugarCpp.g:242:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(242, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(242, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(242, 174);
				// SugarCpp.g:242:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(242, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(242, 193);
				// SugarCpp.g:242:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(242, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(242, 204);
				// SugarCpp.g:242:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(242, 205);
					// SugarCpp.g:242:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(242, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(242, 218);
					// SugarCpp.g:242:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(242, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(242, 228);
				// SugarCpp.g:242:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(242, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(243, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:245:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(245, 34);
		try
		{
			// SugarCpp.g:245:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 84:
				{
				alt39 = 1;
				}
				break;
			case 118:
				{
				alt39 = 2;
				}
				break;
			case 80:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:245:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(245, 15);
				char_literal89=(IToken)Match(input,84,Follow._84_in_type_name_op1179); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:245:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(245, 21);
				char_literal90=(IToken)Match(input,118,Follow._118_in_type_name_op1183); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(245, 25);
				char_literal91=(IToken)Match(input,119,Follow._119_in_type_name_op1185); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:245:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(245, 31);
				char_literal92=(IToken)Match(input,80,Follow._80_in_type_name_op1189); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(245, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:246:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(246, 1);
		try
		{
			// SugarCpp.g:247:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:247:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(247, 4);
			// SugarCpp.g:247:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==128))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:4: 'const'
				{
				DebugLocation(247, 4);
				string_literal93=(IToken)Match(input,128,Follow._128_in_type_name1198);  
				stream_128.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(247, 13);
			// SugarCpp.g:247:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==152))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:13: 'unsigned'
				{
				DebugLocation(247, 13);
				string_literal94=(IToken)Match(input,152,Follow._152_in_type_name1201);  
				stream_152.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(247, 25);
			PushFollow(Follow._ident_in_type_name1204);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(247, 31);
			// SugarCpp.g:247:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==103))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:247:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(247, 32);
				char_literal96=(IToken)Match(input,103,Follow._103_in_type_name1207);  
				stream_103.Add(char_literal96);

				DebugLocation(247, 36);
				// SugarCpp.g:247:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==128||LA43_0==152))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:247:37: type_name ( ',' type_name )*
					{
					DebugLocation(247, 37);
					PushFollow(Follow._type_name_in_type_name1210);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(247, 47);
					// SugarCpp.g:247:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==89))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:247:48: ',' type_name
							{
							DebugLocation(247, 48);
							char_literal98=(IToken)Match(input,89,Follow._89_in_type_name1213);  
							stream_89.Add(char_literal98);

							DebugLocation(247, 52);
							PushFollow(Follow._type_name_in_type_name1215);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(247, 66);
				char_literal100=(IToken)Match(input,111,Follow._111_in_type_name1221);  
				stream_111.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(247, 72);
			// SugarCpp.g:247:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==118))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==119))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==80||LA45_0==84))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:247:72: type_name_op
					{
					DebugLocation(247, 72);
					PushFollow(Follow._type_name_op_in_type_name1225);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: 128, type_name, type_name_op, 152, ident, 111, 103
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 247:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(247, 89);
				// SugarCpp.g:247:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(247, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(247, 102);
				// SugarCpp.g:247:102: ( 'const' )?
				if (stream_128.HasNext)
				{
					DebugLocation(247, 102);
					adaptor.AddChild(root_1, stream_128.NextNode());

				}
				stream_128.Reset();
				DebugLocation(247, 111);
				// SugarCpp.g:247:111: ( 'unsigned' )?
				if (stream_152.HasNext)
				{
					DebugLocation(247, 111);
					adaptor.AddChild(root_1, stream_152.NextNode());

				}
				stream_152.Reset();
				DebugLocation(247, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(247, 129);
				// SugarCpp.g:247:129: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_111.HasNext||stream_103.HasNext)
				{
					DebugLocation(247, 130);
					adaptor.AddChild(root_1, stream_103.NextNode());
					DebugLocation(247, 134);
					// SugarCpp.g:247:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(247, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(247, 145);
					adaptor.AddChild(root_1, stream_111.NextNode());

				}
				stream_type_name.Reset();
				stream_111.Reset();
				stream_103.Reset();
				DebugLocation(247, 152);
				// SugarCpp.g:247:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(247, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(248, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:250:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(250, 1);
		try
		{
			// SugarCpp.g:251:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:251:4: ident ( ',' ident )*
			{
			DebugLocation(251, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1265);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(251, 10);
			// SugarCpp.g:251:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==89))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:251:11: ',' ident
					{
					DebugLocation(251, 11);
					char_literal103=(IToken)Match(input,89,Follow._89_in_generic_parameter_inside1268);  
					stream_89.Add(char_literal103);

					DebugLocation(251, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1270);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 251:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(251, 26);
				// SugarCpp.g:251:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(251, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(251, 47);
				// SugarCpp.g:251:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(251, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(252, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:254:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(254, 1);
		try
		{
			// SugarCpp.g:255:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:255:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(255, 4);
			char_literal105=(IToken)Match(input,103,Follow._103_in_generic_parameter1292);  
			stream_103.Add(char_literal105);

			DebugLocation(255, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1294);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(255, 33);
			char_literal107=(IToken)Match(input,111,Follow._111_in_generic_parameter1296);  
			stream_111.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 255:37: -> generic_parameter_inside
			{
				DebugLocation(255, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(256, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:258:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(258, 1);
		try
		{
			// SugarCpp.g:259:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:259:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(259, 4);
			PushFollow(Follow._func_args_item_in_func_args1311);
			func_args_item108=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item108.Tree);
			DebugLocation(259, 19);
			// SugarCpp.g:259:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==89))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:259:20: ',' func_args_item
					{
					DebugLocation(259, 20);
					char_literal109=(IToken)Match(input,89,Follow._89_in_func_args1314);  
					stream_89.Add(char_literal109);

					DebugLocation(259, 24);
					PushFollow(Follow._func_args_item_in_func_args1316);
					func_args_item110=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 259:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(259, 44);
				// SugarCpp.g:259:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(259, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(259, 56);
				// SugarCpp.g:259:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(259, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(260, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:262:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(262, 1);
		try
		{
			// SugarCpp.g:263:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==IDENT))
			{
				alt51 = 1;
			}
			else if ((LA51_0==101))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:263:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(263, 4);
				PushFollow(Follow._ident_list_in_func_args_item1338);
				ident_list111=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list111.Tree);
				DebugLocation(263, 15);
				char_literal112=(IToken)Match(input,99,Follow._99_in_func_args_item1340);  
				stream_99.Add(char_literal112);

				DebugLocation(263, 19);
				PushFollow(Follow._type_name_in_func_args_item1342);
				type_name113=type_name();
				PopFollow();

				stream_type_name.Add(type_name113.Tree);
				DebugLocation(263, 29);
				// SugarCpp.g:263:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt50=3;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 101:
				case 108:
					{
					alt50 = 1;
					}
					break;
				case 82:
					{
					alt50 = 2;
					}
					break;
				case 83:
				case 89:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:263:31: ( '=' | ':=' ) expr
					{
					DebugLocation(263, 31);
					// SugarCpp.g:263:31: ( '=' | ':=' )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==108))
					{
						alt48 = 1;
					}
					else if ((LA48_0==101))
					{
						alt48 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:263:32: '='
						{
						DebugLocation(263, 32);
						char_literal114=(IToken)Match(input,108,Follow._108_in_func_args_item1347);  
						stream_108.Add(char_literal114);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:263:38: ':='
						{
						DebugLocation(263, 38);
						string_literal115=(IToken)Match(input,101,Follow._101_in_func_args_item1351);  
						stream_101.Add(string_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(263, 44);
					PushFollow(Follow._expr_in_func_args_item1354);
					expr116=expr();
					PopFollow();

					stream_expr.Add(expr116.Tree);


					{
					// AST REWRITE
					// elements: type_name, expr, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 263:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(263, 53);
						// SugarCpp.g:263:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(263, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(263, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(263, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(263, 93);
						// SugarCpp.g:263:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(263, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:264:33: '(' ( expr_list )? ')'
					{
					DebugLocation(264, 33);
					char_literal117=(IToken)Match(input,82,Follow._82_in_func_args_item1402);  
					stream_82.Add(char_literal117);

					DebugLocation(264, 37);
					// SugarCpp.g:264:37: ( expr_list )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==75||LA49_0==80||LA49_0==82||LA49_0==84||(LA49_0>=86 && LA49_0<=87)||(LA49_0>=90 && LA49_0<=91)||(LA49_0>=117 && LA49_0<=118)||LA49_0==144||LA49_0==160))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:37: expr_list
						{
						DebugLocation(264, 37);
						PushFollow(Follow._expr_list_in_func_args_item1404);
						expr_list118=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list118.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(264, 48);
					char_literal119=(IToken)Match(input,83,Follow._83_in_func_args_item1407);  
					stream_83.Add(char_literal119);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 264:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(264, 56);
						// SugarCpp.g:264:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(264, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(264, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(264, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(264, 98);
						// SugarCpp.g:264:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(264, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:265:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 265:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(265, 18);
						// SugarCpp.g:265:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(265, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(265, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(265, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:267:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(267, 8);
				string_literal120=(IToken)Match(input,101,Follow._101_in_func_args_item1464); 
				string_literal120_tree = (CommonTree)adaptor.Create(string_literal120);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal120_tree, root_0);
				DebugLocation(267, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1468);
				modify_expr121=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr121.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(268, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:270:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken NEWLINE130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_160=new RewriteRuleITokenStream(adaptor,"token 160");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(270, 4);
		try
		{
			// SugarCpp.g:271:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:271:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(271, 4);
			// SugarCpp.g:271:4: ( attribute )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==118))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:4: attribute
				{
				DebugLocation(271, 4);
				PushFollow(Follow._attribute_in_func_def1479);
				attribute122=attribute();
				PopFollow();

				stream_attribute.Add(attribute122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(271, 15);
			// SugarCpp.g:271:15: ( type_name )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:15: type_name
				{
				DebugLocation(271, 15);
				PushFollow(Follow._type_name_in_func_def1482);
				type_name123=type_name();
				PopFollow();

				stream_type_name.Add(type_name123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(271, 26);
			// SugarCpp.g:271:26: ( '~' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==160))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:26: '~'
				{
				DebugLocation(271, 26);
				char_literal124=(IToken)Match(input,160,Follow._160_in_func_def1485);  
				stream_160.Add(char_literal124);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(271, 31);
			PushFollow(Follow._ident_in_func_def1488);
			ident125=ident();
			PopFollow();

			stream_ident.Add(ident125.Tree);
			DebugLocation(271, 37);
			// SugarCpp.g:271:37: ( generic_parameter )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==103))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:37: generic_parameter
				{
				DebugLocation(271, 37);
				PushFollow(Follow._generic_parameter_in_func_def1490);
				generic_parameter126=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(271, 56);
			char_literal127=(IToken)Match(input,82,Follow._82_in_func_def1493);  
			stream_82.Add(char_literal127);

			DebugLocation(271, 60);
			// SugarCpp.g:271:60: ( func_args )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==101))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:60: func_args
				{
				DebugLocation(271, 60);
				PushFollow(Follow._func_args_in_func_def1495);
				func_args128=func_args();
				PopFollow();

				stream_func_args.Add(func_args128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(271, 71);
			char_literal129=(IToken)Match(input,83,Follow._83_in_func_def1498);  
			stream_83.Add(char_literal129);

			DebugLocation(271, 75);
			// SugarCpp.g:271:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NEWLINE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==108))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:271:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(271, 76);
				// SugarCpp.g:271:76: ( NEWLINE )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==NEWLINE))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:271:76: NEWLINE
						{
						DebugLocation(271, 76);
						NEWLINE130=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1501);  
						stream_NEWLINE.Add(NEWLINE130);


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(271, 85);
				PushFollow(Follow._stmt_block_in_func_def1504);
				stmt_block131=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block131.Tree);


				{
				// AST REWRITE
				// elements: func_args, stmt_block, generic_parameter, 160, attribute, type_name, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 271:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(271, 99);
					// SugarCpp.g:271:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(271, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(271, 110);
					// SugarCpp.g:271:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(271, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(271, 121);
					// SugarCpp.g:271:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(271, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(271, 132);
					// SugarCpp.g:271:132: ( '~' )?
					if (stream_160.HasNext)
					{
						DebugLocation(271, 132);
						adaptor.AddChild(root_1, stream_160.NextNode());

					}
					stream_160.Reset();
					DebugLocation(271, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(271, 143);
					// SugarCpp.g:271:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(271, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(271, 162);
					// SugarCpp.g:271:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(271, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(271, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:272:23: '=' expr
				{
				DebugLocation(272, 23);
				char_literal132=(IToken)Match(input,108,Follow._108_in_func_def1553);  
				stream_108.Add(char_literal132);

				DebugLocation(272, 27);
				PushFollow(Follow._expr_in_func_def1555);
				expr133=expr();
				PopFollow();

				stream_expr.Add(expr133.Tree);


				{
				// AST REWRITE
				// elements: 160, ident, func_args, generic_parameter, attribute, expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 272:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(272, 36);
					// SugarCpp.g:272:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(272, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(272, 47);
					// SugarCpp.g:272:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(272, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(272, 58);
					// SugarCpp.g:272:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(272, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(272, 69);
					// SugarCpp.g:272:69: ( '~' )?
					if (stream_160.HasNext)
					{
						DebugLocation(272, 69);
						adaptor.AddChild(root_1, stream_160.NextNode());

					}
					stream_160.Reset();
					DebugLocation(272, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(272, 80);
					// SugarCpp.g:272:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(272, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(272, 99);
					// SugarCpp.g:272:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(272, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(272, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(273, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:275:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT134 = default(IToken);
		IToken NEWLINE135 = default(IToken);
		IToken NEWLINE137 = default(IToken);
		IToken DEDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT134_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		CommonTree DEDENT138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(275, 1);
		try
		{
			// SugarCpp.g:276:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:276:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(276, 4);
			INDENT134=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1596);  
			stream_INDENT.Add(INDENT134);

			DebugLocation(276, 11);
			// SugarCpp.g:276:11: ( NEWLINE )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==NEWLINE))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:11: NEWLINE
					{
					DebugLocation(276, 11);
					NEWLINE135=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1598);  
					stream_NEWLINE.Add(NEWLINE135);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(276, 21);
			// SugarCpp.g:276:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==82||LA61_0==117||LA61_0==129||(LA61_0>=133 && LA61_0<=136)||(LA61_0>=141 && LA61_0<=142)||LA61_0==146||(LA61_0>=149 && LA61_0<=151)||(LA61_0>=153 && LA61_0<=156)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:276:22: stmt ( NEWLINE )+
					{
					DebugLocation(276, 22);
					PushFollow(Follow._stmt_in_stmt_block1603);
					stmt136=stmt();
					PopFollow();

					stream_stmt.Add(stmt136.Tree);
					DebugLocation(276, 27);
					// SugarCpp.g:276:27: ( NEWLINE )+
					int cnt60=0;
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==NEWLINE))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:276:27: NEWLINE
							{
							DebugLocation(276, 27);
							NEWLINE137=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1605);  
							stream_NEWLINE.Add(NEWLINE137);


							}
							break;

						default:
							if (cnt60 >= 1)
								goto loop60;

							EarlyExitException eee60 = new EarlyExitException( 60, input );
							DebugRecognitionException(eee60);
							throw eee60;
						}
						cnt60++;
					}
					loop60:
						;

					} finally { DebugExitSubRule(60); }


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(276, 38);
			DEDENT138=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1610);  
			stream_DEDENT.Add(DEDENT138);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 276:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(276, 48);
				// SugarCpp.g:276:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(276, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(276, 61);
				// SugarCpp.g:276:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(276, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(277, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:279:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(279, 1);
		try
		{
			// SugarCpp.g:280:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt62=7;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 82:
			case 117:
			case 146:
			case 150:
			case 154:
				{
				alt62 = 1;
				}
				break;
			case 136:
			case 151:
				{
				alt62 = 2;
				}
				break;
			case 134:
				{
				alt62 = 3;
				}
				break;
			case 142:
			case 153:
			case 156:
				{
				alt62 = 4;
				}
				break;
			case 149:
				{
				alt62 = 5;
				}
				break;
			case 135:
			case 141:
			case 155:
				{
				alt62 = 6;
				}
				break;
			case 129:
			case 133:
				{
				alt62 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:280:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(280, 4);
				PushFollow(Follow._stmt_expr_in_stmt1630);
				stmt_expr139=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:281:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(281, 4);
				PushFollow(Follow._stmt_if_in_stmt1635);
				stmt_if140=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if140.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:282:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(282, 4);
				PushFollow(Follow._stmt_for_in_stmt1640);
				stmt_for141=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for141.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:283:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(283, 4);
				PushFollow(Follow._stmt_while_in_stmt1645);
				stmt_while142=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while142.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:284:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(284, 4);
				PushFollow(Follow._stmt_try_in_stmt1650);
				stmt_try143=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try143.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:285:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(285, 4);
				PushFollow(Follow._stmt_linq_in_stmt1655);
				stmt_linq144=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq144.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:286:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(286, 4);
				PushFollow(Follow._stmt_defer_in_stmt1660);
				stmt_defer145=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer145.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(287, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:289:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) ) ) )* ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal146 = default(IToken);
		IToken string_literal148 = default(IToken);
		IToken string_literal150 = default(IToken);
		IToken string_literal152 = default(IToken);
		IToken string_literal154 = default(IToken);
		IToken char_literal155 = default(IToken);
		IToken string_literal157 = default(IToken);
		IToken string_literal159 = default(IToken);
		IToken string_literal161 = default(IToken);
		IToken string_literal163 = default(IToken);
		IToken string_literal165 = default(IToken);
		IToken char_literal167 = default(IToken);
		IToken char_literal169 = default(IToken);
		IToken char_literal171 = default(IToken);
		IToken char_literal173 = default(IToken);
		IToken NEWLINE174 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr158 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr166 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block175 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree string_literal154_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		CommonTree string_literal157_tree = default(CommonTree);
		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree string_literal161_tree = default(CommonTree);
		CommonTree string_literal163_tree = default(CommonTree);
		CommonTree string_literal165_tree = default(CommonTree);
		CommonTree char_literal167_tree = default(CommonTree);
		CommonTree char_literal169_tree = default(CommonTree);
		CommonTree char_literal171_tree = default(CommonTree);
		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree NEWLINE174_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(289, 1);
		try
		{
			// SugarCpp.g:290:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) ) ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:290:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) ) ) )*
			{
			DebugLocation(290, 4);
			// SugarCpp.g:290:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:290:5: a= stmt_expr_item
			{
			DebugLocation(290, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1674);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 290:22: -> $a
			{
				DebugLocation(290, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(290, 29);
			// SugarCpp.g:290:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'unless' expr -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) | 'until' expr -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) ) | 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) ) ) )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=6;
				try { DebugEnterDecision(69, false);
				switch (input.LA(1))
				{
				case 136:
					{
					alt69 = 1;
					}
					break;
				case 151:
					{
					alt69 = 2;
					}
					break;
				case 156:
					{
					alt69 = 3;
					}
					break;
				case 153:
					{
					alt69 = 4;
					}
					break;
				case 134:
					{
					alt69 = 5;
					}
					break;
				}

				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:290:31: 'if' expr
					{
					DebugLocation(290, 31);
					string_literal146=(IToken)Match(input,136,Follow._136_in_stmt_expr1684);  
					stream_136.Add(string_literal146);

					DebugLocation(290, 36);
					PushFollow(Follow._expr_in_stmt_expr1686);
					expr147=expr();
					PopFollow();

					stream_expr.Add(expr147.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 290:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(290, 44);
						// SugarCpp.g:290:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(290, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(290, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(290, 59);
						// SugarCpp.g:290:59: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(290, 61);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(290, 73);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:291:13: 'unless' expr
					{
					DebugLocation(291, 13);
					string_literal148=(IToken)Match(input,151,Follow._151_in_stmt_expr1715);  
					stream_151.Add(string_literal148);

					DebugLocation(291, 22);
					PushFollow(Follow._expr_in_stmt_expr1717);
					expr149=expr();
					PopFollow();

					stream_expr.Add(expr149.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 291:27: -> ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(291, 30);
						// SugarCpp.g:291:30: ^( Stmt_Unless expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(291, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(291, 44);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(291, 49);
						// SugarCpp.g:291:49: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(291, 51);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(291, 63);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:292:13: 'while' expr
					{
					DebugLocation(292, 13);
					string_literal150=(IToken)Match(input,156,Follow._156_in_stmt_expr1746);  
					stream_156.Add(string_literal150);

					DebugLocation(292, 21);
					PushFollow(Follow._expr_in_stmt_expr1748);
					expr151=expr();
					PopFollow();

					stream_expr.Add(expr151.Tree);


					{
					// AST REWRITE
					// elements: stmt_expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 292:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(292, 29);
						// SugarCpp.g:292:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(292, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(292, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(292, 47);
						// SugarCpp.g:292:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(292, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(292, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:293:13: 'until' expr
					{
					DebugLocation(293, 13);
					string_literal152=(IToken)Match(input,153,Follow._153_in_stmt_expr1777);  
					stream_153.Add(string_literal152);

					DebugLocation(293, 21);
					PushFollow(Follow._expr_in_stmt_expr1779);
					expr153=expr();
					PopFollow();

					stream_expr.Add(expr153.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 293:26: -> ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
					{
						DebugLocation(293, 29);
						// SugarCpp.g:293:29: ^( Stmt_Until expr ^( Stmt_Block $stmt_expr) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(293, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(293, 42);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(293, 47);
						// SugarCpp.g:293:47: ^( Stmt_Block $stmt_expr)
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(293, 49);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(293, 61);
						adaptor.AddChild(root_2, stream_retval.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:294:13: 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) ) )
					{
					DebugLocation(294, 13);
					string_literal154=(IToken)Match(input,134,Follow._134_in_stmt_expr1808);  
					stream_134.Add(string_literal154);

					DebugLocation(294, 19);
					// SugarCpp.g:294:19: ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) ) )
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==IDENT||LA68_0==80))
					{
						alt68 = 1;
					}
					else if ((LA68_0==82))
					{
						alt68 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 68, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:294:21: ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) )
						{
						DebugLocation(294, 21);
						// SugarCpp.g:294:21: ( '&' )?
						int alt63=2;
						try { DebugEnterSubRule(63);
						try { DebugEnterDecision(63, false);
						int LA63_0 = input.LA(1);

						if ((LA63_0==80))
						{
							alt63 = 1;
						}
						} finally { DebugExitDecision(63); }
						switch (alt63)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:294:21: '&'
							{
							DebugLocation(294, 21);
							char_literal155=(IToken)Match(input,80,Follow._80_in_stmt_expr1812);  
							stream_80.Add(char_literal155);


							}
							break;

						}
						} finally { DebugExitSubRule(63); }

						DebugLocation(294, 26);
						PushFollow(Follow._ident_in_stmt_expr1815);
						ident156=ident();
						PopFollow();

						stream_ident.Add(ident156.Tree);
						DebugLocation(294, 32);
						string_literal157=(IToken)Match(input,104,Follow._104_in_stmt_expr1817);  
						stream_104.Add(string_literal157);

						DebugLocation(294, 37);
						PushFollow(Follow._expr_in_stmt_expr1819);
						expr158=expr();
						PopFollow();

						stream_expr.Add(expr158.Tree);
						DebugLocation(294, 42);
						// SugarCpp.g:294:42: ( 'to' expr ( 'by' expr )? -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) | 'downto' expr ( 'by' expr )? -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) ) )
						int alt66=2;
						try { DebugEnterSubRule(66);
						try { DebugEnterDecision(66, false);
						int LA66_0 = input.LA(1);

						if ((LA66_0==148))
						{
							alt66 = 1;
						}
						else if ((LA66_0==130))
						{
							alt66 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						} finally { DebugExitDecision(66); }
						switch (alt66)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:294:44: 'to' expr ( 'by' expr )?
							{
							DebugLocation(294, 44);
							string_literal159=(IToken)Match(input,148,Follow._148_in_stmt_expr1823);  
							stream_148.Add(string_literal159);

							DebugLocation(294, 49);
							PushFollow(Follow._expr_in_stmt_expr1825);
							expr160=expr();
							PopFollow();

							stream_expr.Add(expr160.Tree);
							DebugLocation(294, 54);
							// SugarCpp.g:294:54: ( 'by' expr )?
							int alt64=2;
							try { DebugEnterSubRule(64);
							try { DebugEnterDecision(64, false);
							int LA64_0 = input.LA(1);

							if ((LA64_0==125))
							{
								alt64 = 1;
							}
							} finally { DebugExitDecision(64); }
							switch (alt64)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:294:55: 'by' expr
								{
								DebugLocation(294, 55);
								string_literal161=(IToken)Match(input,125,Follow._125_in_stmt_expr1828);  
								stream_125.Add(string_literal161);

								DebugLocation(294, 60);
								PushFollow(Follow._expr_in_stmt_expr1830);
								expr162=expr();
								PopFollow();

								stream_expr.Add(expr162.Tree);

								}
								break;

							}
							} finally { DebugExitSubRule(64); }



							{
							// AST REWRITE
							// elements: expr, ident, stmt_expr, expr, expr
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 294:67: -> ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) )
							{
								DebugLocation(294, 70);
								// SugarCpp.g:294:70: ^( Stmt_For_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(294, 72);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_To, "Stmt_For_To"), root_1);

								DebugLocation(294, 84);
								adaptor.AddChild(root_1, stream_ident.NextTree());
								DebugLocation(294, 90);
								adaptor.AddChild(root_1, stream_expr.NextTree());
								DebugLocation(294, 95);
								adaptor.AddChild(root_1, stream_expr.NextTree());
								DebugLocation(294, 100);
								// SugarCpp.g:294:100: ( expr )?
								if (stream_expr.HasNext)
								{
									DebugLocation(294, 100);
									adaptor.AddChild(root_1, stream_expr.NextTree());

								}
								stream_expr.Reset();
								DebugLocation(294, 106);
								// SugarCpp.g:294:106: ^( Stmt_Block $stmt_expr)
								{
								CommonTree root_2 = (CommonTree)adaptor.Nil();
								DebugLocation(294, 108);
								root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

								DebugLocation(294, 120);
								adaptor.AddChild(root_2, stream_retval.NextTree());

								adaptor.AddChild(root_1, root_2);
								}

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:295:29: 'downto' expr ( 'by' expr )?
							{
							DebugLocation(295, 29);
							string_literal163=(IToken)Match(input,130,Follow._130_in_stmt_expr1884);  
							stream_130.Add(string_literal163);

							DebugLocation(295, 38);
							PushFollow(Follow._expr_in_stmt_expr1886);
							expr164=expr();
							PopFollow();

							stream_expr.Add(expr164.Tree);
							DebugLocation(295, 43);
							// SugarCpp.g:295:43: ( 'by' expr )?
							int alt65=2;
							try { DebugEnterSubRule(65);
							try { DebugEnterDecision(65, false);
							int LA65_0 = input.LA(1);

							if ((LA65_0==125))
							{
								alt65 = 1;
							}
							} finally { DebugExitDecision(65); }
							switch (alt65)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:295:44: 'by' expr
								{
								DebugLocation(295, 44);
								string_literal165=(IToken)Match(input,125,Follow._125_in_stmt_expr1889);  
								stream_125.Add(string_literal165);

								DebugLocation(295, 49);
								PushFollow(Follow._expr_in_stmt_expr1891);
								expr166=expr();
								PopFollow();

								stream_expr.Add(expr166.Tree);

								}
								break;

							}
							} finally { DebugExitSubRule(65); }



							{
							// AST REWRITE
							// elements: expr, expr, expr, stmt_expr, ident
							// token labels: 
							// rule labels: retval
							// token list labels: 
							// rule list labels: 
							// wildcard labels: 
							retval.Tree = root_0;
							RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

							root_0 = (CommonTree)adaptor.Nil();
							// 295:56: -> ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) )
							{
								DebugLocation(295, 59);
								// SugarCpp.g:295:59: ^( Stmt_For_Down_To ident expr expr ( expr )? ^( Stmt_Block $stmt_expr) )
								{
								CommonTree root_1 = (CommonTree)adaptor.Nil();
								DebugLocation(295, 61);
								root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_Down_To, "Stmt_For_Down_To"), root_1);

								DebugLocation(295, 78);
								adaptor.AddChild(root_1, stream_ident.NextTree());
								DebugLocation(295, 84);
								adaptor.AddChild(root_1, stream_expr.NextTree());
								DebugLocation(295, 89);
								adaptor.AddChild(root_1, stream_expr.NextTree());
								DebugLocation(295, 94);
								// SugarCpp.g:295:94: ( expr )?
								if (stream_expr.HasNext)
								{
									DebugLocation(295, 94);
									adaptor.AddChild(root_1, stream_expr.NextTree());

								}
								stream_expr.Reset();
								DebugLocation(295, 100);
								// SugarCpp.g:295:100: ^( Stmt_Block $stmt_expr)
								{
								CommonTree root_2 = (CommonTree)adaptor.Nil();
								DebugLocation(295, 102);
								root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

								DebugLocation(295, 114);
								adaptor.AddChild(root_2, stream_retval.NextTree());

								adaptor.AddChild(root_1, root_2);
								}

								adaptor.AddChild(root_0, root_1);
								}

							}

							retval.Tree = root_0;
							}

							}
							break;

						}
						} finally { DebugExitSubRule(66); }


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:297:15: '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block
						{
						DebugLocation(297, 15);
						char_literal167=(IToken)Match(input,82,Follow._82_in_stmt_expr1974);  
						stream_82.Add(char_literal167);

						DebugLocation(297, 19);
						PushFollow(Follow._expr_in_stmt_expr1976);
						expr168=expr();
						PopFollow();

						stream_expr.Add(expr168.Tree);
						DebugLocation(297, 24);
						char_literal169=(IToken)Match(input,102,Follow._102_in_stmt_expr1978);  
						stream_102.Add(char_literal169);

						DebugLocation(297, 28);
						PushFollow(Follow._expr_in_stmt_expr1980);
						expr170=expr();
						PopFollow();

						stream_expr.Add(expr170.Tree);
						DebugLocation(297, 33);
						char_literal171=(IToken)Match(input,102,Follow._102_in_stmt_expr1982);  
						stream_102.Add(char_literal171);

						DebugLocation(297, 37);
						PushFollow(Follow._expr_in_stmt_expr1984);
						expr172=expr();
						PopFollow();

						stream_expr.Add(expr172.Tree);
						DebugLocation(297, 42);
						char_literal173=(IToken)Match(input,83,Follow._83_in_stmt_expr1986);  
						stream_83.Add(char_literal173);

						DebugLocation(297, 46);
						// SugarCpp.g:297:46: ( NEWLINE )+
						int cnt67=0;
						try { DebugEnterSubRule(67);
						while (true)
						{
							int alt67=2;
							try { DebugEnterDecision(67, false);
							int LA67_0 = input.LA(1);

							if ((LA67_0==NEWLINE))
							{
								alt67 = 1;
							}


							} finally { DebugExitDecision(67); }
							switch (alt67)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:297:46: NEWLINE
								{
								DebugLocation(297, 46);
								NEWLINE174=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_expr1988);  
								stream_NEWLINE.Add(NEWLINE174);


								}
								break;

							default:
								if (cnt67 >= 1)
									goto loop67;

								EarlyExitException eee67 = new EarlyExitException( 67, input );
								DebugRecognitionException(eee67);
								throw eee67;
							}
							cnt67++;
						}
						loop67:
							;

						} finally { DebugExitSubRule(67); }

						DebugLocation(297, 55);
						PushFollow(Follow._stmt_block_in_stmt_expr1991);
						stmt_block175=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block175.Tree);


						{
						// AST REWRITE
						// elements: stmt_expr, expr, expr, expr
						// token labels: 
						// rule labels: retval
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 297:66: -> ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) )
						{
							DebugLocation(297, 69);
							// SugarCpp.g:297:69: ^( Stmt_For expr expr expr ^( Stmt_Block $stmt_expr) )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(297, 71);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

							DebugLocation(297, 80);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(297, 85);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(297, 90);
							adaptor.AddChild(root_1, stream_expr.NextTree());
							DebugLocation(297, 95);
							// SugarCpp.g:297:95: ^( Stmt_Block $stmt_expr)
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(297, 97);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

							DebugLocation(297, 109);
							adaptor.AddChild(root_2, stream_retval.NextTree());

							adaptor.AddChild(root_1, root_2);
							}

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(68); }


					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(300, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:302:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 24);
		TraceIn("stmt_expr_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc176 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify180 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(302, 1);
		try
		{
			// SugarCpp.g:303:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt70=5;
			try { DebugEnterDecision(70, false);
			try
			{
				alt70 = dfa70.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(70); }
			switch (alt70)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:303:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(303, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item2066);
				stmt_alloc176=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc176.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:304:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(304, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item2071);
				stmt_return177=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return177.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:305:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(305, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item2076);
				stmt_using178=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using178.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:306:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(306, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item2081);
				stmt_typedef179=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef179.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:307:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(307, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item2086);
				stmt_modify180=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify180.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 24);
			LeaveRule("stmt_expr_item", 24);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:310:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 25);
		TraceIn("stmt_defer", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal181 = default(IToken);
		IToken string_literal183 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt184 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal181_tree = default(CommonTree);
		CommonTree string_literal183_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt71=2;
			try { DebugEnterDecision(71, false);
			int LA71_0 = input.LA(1);

			if ((LA71_0==129))
			{
				alt71 = 1;
			}
			else if ((LA71_0==133))
			{
				alt71 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 71, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(71); }
			switch (alt71)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:4: 'defer' stmt
				{
				DebugLocation(311, 4);
				string_literal181=(IToken)Match(input,129,Follow._129_in_stmt_defer2097);  
				stream_129.Add(string_literal181);

				DebugLocation(311, 12);
				PushFollow(Follow._stmt_in_stmt_defer2099);
				stmt182=stmt();
				PopFollow();

				stream_stmt.Add(stmt182.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 311:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(311, 20);
					// SugarCpp.g:311:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(311, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(311, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:312:4: 'finally' stmt
				{
				DebugLocation(312, 4);
				string_literal183=(IToken)Match(input,133,Follow._133_in_stmt_defer2112);  
				stream_133.Add(string_literal183);

				DebugLocation(312, 14);
				PushFollow(Follow._stmt_in_stmt_defer2114);
				stmt184=stmt();
				PopFollow();

				stream_stmt.Add(stmt184.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 312:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(312, 22);
					// SugarCpp.g:312:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(312, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(312, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 25);
			LeaveRule("stmt_defer", 25);
			LeaveRule_stmt_defer();
		}
		DebugLocation(313, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:315:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 26);
		TraceIn("stmt_typedef", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal185 = default(IToken);
		IToken char_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident186 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name188 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal185_tree = default(CommonTree);
		CommonTree char_literal187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(315, 1);
		try
		{
			// SugarCpp.g:316:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:316:4: 'typedef' ident '=' type_name
			{
			DebugLocation(316, 4);
			string_literal185=(IToken)Match(input,150,Follow._150_in_stmt_typedef2133);  
			stream_150.Add(string_literal185);

			DebugLocation(316, 14);
			PushFollow(Follow._ident_in_stmt_typedef2135);
			ident186=ident();
			PopFollow();

			stream_ident.Add(ident186.Tree);
			DebugLocation(316, 20);
			char_literal187=(IToken)Match(input,108,Follow._108_in_stmt_typedef2137);  
			stream_108.Add(char_literal187);

			DebugLocation(316, 24);
			PushFollow(Follow._type_name_in_stmt_typedef2139);
			type_name188=type_name();
			PopFollow();

			stream_type_name.Add(type_name188.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 316:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(316, 37);
				// SugarCpp.g:316:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(316, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(316, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(316, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 26);
			LeaveRule("stmt_typedef", 26);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(317, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:319:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 27);
		TraceIn("stmt_using_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident189 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal190_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(319, 36);
		try
		{
			// SugarCpp.g:319:16: ( ident | 'namespace' )
			int alt72=2;
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==IDENT))
			{
				alt72 = 1;
			}
			else if ((LA72_0==143))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:319:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(319, 18);
				PushFollow(Follow._ident_in_stmt_using_item2158);
				ident189=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident189.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:319:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(319, 26);
				string_literal190=(IToken)Match(input,143,Follow._143_in_stmt_using_item2162); 
				string_literal190_tree = (CommonTree)adaptor.Create(string_literal190);
				adaptor.AddChild(root_0, string_literal190_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 27);
			LeaveRule("stmt_using_item", 27);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(319, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:320:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 28);
		TraceIn("stmt_using", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal191 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal191_tree = default(CommonTree);
		RewriteRuleITokenStream stream_154=new RewriteRuleITokenStream(adaptor,"token 154");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:321:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(321, 4);
			string_literal191=(IToken)Match(input,154,Follow._154_in_stmt_using2170);  
			stream_154.Add(string_literal191);

			DebugLocation(321, 12);
			// SugarCpp.g:321:12: ( stmt_using_item )*
			try { DebugEnterSubRule(73);
			while (true)
			{
				int alt73=2;
				try { DebugEnterDecision(73, false);
				int LA73_0 = input.LA(1);

				if ((LA73_0==IDENT||LA73_0==143))
				{
					alt73 = 1;
				}


				} finally { DebugExitDecision(73); }
				switch ( alt73 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:12: stmt_using_item
					{
					DebugLocation(321, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using2172);
					stmt_using_item192=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item192.Tree);

					}
					break;

				default:
					goto loop73;
				}
			}

			loop73:
				;

			} finally { DebugExitSubRule(73); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 321:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(321, 32);
				// SugarCpp.g:321:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(321, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(321, 45);
				// SugarCpp.g:321:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(321, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 28);
			LeaveRule("stmt_using", 28);
			LeaveRule_stmt_using();
		}
		DebugLocation(322, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:324:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal193 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal193_tree = default(CommonTree);
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(324, 1);
		try
		{
			// SugarCpp.g:325:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:325:4: 'return' ( expr )?
			{
			DebugLocation(325, 4);
			string_literal193=(IToken)Match(input,146,Follow._146_in_stmt_return2193);  
			stream_146.Add(string_literal193);

			DebugLocation(325, 13);
			// SugarCpp.g:325:13: ( expr )?
			int alt74=2;
			try { DebugEnterSubRule(74);
			try { DebugEnterDecision(74, false);
			int LA74_0 = input.LA(1);

			if ((LA74_0==IDENT||LA74_0==NUMBER||LA74_0==STRING||LA74_0==75||LA74_0==80||LA74_0==82||LA74_0==84||(LA74_0>=86 && LA74_0<=87)||(LA74_0>=90 && LA74_0<=91)||(LA74_0>=117 && LA74_0<=118)||LA74_0==144||LA74_0==160))
			{
				alt74 = 1;
			}
			} finally { DebugExitDecision(74); }
			switch (alt74)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:325:13: expr
				{
				DebugLocation(325, 13);
				PushFollow(Follow._expr_in_stmt_return2195);
				expr194=expr();
				PopFollow();

				stream_expr.Add(expr194.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(74); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 325:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(325, 22);
				// SugarCpp.g:325:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(325, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(325, 36);
				// SugarCpp.g:325:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(325, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(326, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:328:1: stmt_if : ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) );
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 30);
		TraceIn("stmt_if", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal195 = default(IToken);
		IToken NEWLINE197 = default(IToken);
		IToken NEWLINE199 = default(IToken);
		IToken string_literal200 = default(IToken);
		IToken string_literal202 = default(IToken);
		IToken string_literal204 = default(IToken);
		IToken NEWLINE206 = default(IToken);
		IToken NEWLINE208 = default(IToken);
		IToken string_literal209 = default(IToken);
		IToken string_literal211 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr205 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block210 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt212 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal195_tree = default(CommonTree);
		CommonTree NEWLINE197_tree = default(CommonTree);
		CommonTree NEWLINE199_tree = default(CommonTree);
		CommonTree string_literal200_tree = default(CommonTree);
		CommonTree string_literal202_tree = default(CommonTree);
		CommonTree string_literal204_tree = default(CommonTree);
		CommonTree NEWLINE206_tree = default(CommonTree);
		CommonTree NEWLINE208_tree = default(CommonTree);
		CommonTree string_literal209_tree = default(CommonTree);
		CommonTree string_literal211_tree = default(CommonTree);
		RewriteRuleITokenStream stream_151=new RewriteRuleITokenStream(adaptor,"token 151");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(328, 1);
		try
		{
			// SugarCpp.g:329:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) | 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) ) )
			int alt83=2;
			try { DebugEnterDecision(83, false);
			int LA83_0 = input.LA(1);

			if ((LA83_0==136))
			{
				alt83 = 1;
			}
			else if ((LA83_0==151))
			{
				alt83 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:329:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(329, 4);
				string_literal195=(IToken)Match(input,136,Follow._136_in_stmt_if2216);  
				stream_136.Add(string_literal195);

				DebugLocation(329, 9);
				PushFollow(Follow._expr_in_stmt_if2218);
				expr196=expr();
				PopFollow();

				stream_expr.Add(expr196.Tree);
				DebugLocation(329, 14);
				// SugarCpp.g:329:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==NEWLINE))
				{
					alt78 = 1;
				}
				else if ((LA78_0==147))
				{
					alt78 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 78, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
					{
					DebugLocation(329, 15);
					// SugarCpp.g:329:15: ( NEWLINE )+
					int cnt75=0;
					try { DebugEnterSubRule(75);
					while (true)
					{
						int alt75=2;
						try { DebugEnterDecision(75, false);
						int LA75_0 = input.LA(1);

						if ((LA75_0==NEWLINE))
						{
							alt75 = 1;
						}


						} finally { DebugExitDecision(75); }
						switch (alt75)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:329:15: NEWLINE
							{
							DebugLocation(329, 15);
							NEWLINE197=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2221);  
							stream_NEWLINE.Add(NEWLINE197);


							}
							break;

						default:
							if (cnt75 >= 1)
								goto loop75;

							EarlyExitException eee75 = new EarlyExitException( 75, input );
							DebugRecognitionException(eee75);
							throw eee75;
						}
						cnt75++;
					}
					loop75:
						;

					} finally { DebugExitSubRule(75); }

					DebugLocation(329, 24);
					PushFollow(Follow._stmt_block_in_stmt_if2224);
					stmt_block198=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block198.Tree);
					DebugLocation(329, 35);
					// SugarCpp.g:329:35: ( ( NEWLINE )* 'else' stmt_block )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, false);
					try
					{
						alt77 = dfa77.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:329:36: ( NEWLINE )* 'else' stmt_block
						{
						DebugLocation(329, 36);
						// SugarCpp.g:329:36: ( NEWLINE )*
						try { DebugEnterSubRule(76);
						while (true)
						{
							int alt76=2;
							try { DebugEnterDecision(76, false);
							int LA76_0 = input.LA(1);

							if ((LA76_0==NEWLINE))
							{
								alt76 = 1;
							}


							} finally { DebugExitDecision(76); }
							switch ( alt76 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:329:36: NEWLINE
								{
								DebugLocation(329, 36);
								NEWLINE199=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2227);  
								stream_NEWLINE.Add(NEWLINE199);


								}
								break;

							default:
								goto loop76;
							}
						}

						loop76:
							;

						} finally { DebugExitSubRule(76); }

						DebugLocation(329, 45);
						string_literal200=(IToken)Match(input,131,Follow._131_in_stmt_if2230);  
						stream_131.Add(string_literal200);

						DebugLocation(329, 52);
						PushFollow(Follow._stmt_block_in_stmt_if2232);
						stmt_block201=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block201.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(77); }



					{
					// AST REWRITE
					// elements: stmt_block, expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 329:65: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
						DebugLocation(329, 68);
						// SugarCpp.g:329:68: ^( Stmt_If expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(329, 70);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(329, 78);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(329, 83);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(329, 94);
						// SugarCpp.g:329:94: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(329, 94);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:330:16: 'then' stmt
					{
					DebugLocation(330, 16);
					string_literal202=(IToken)Match(input,147,Follow._147_in_stmt_if2264);  
					stream_147.Add(string_literal202);

					DebugLocation(330, 23);
					PushFollow(Follow._stmt_in_stmt_if2266);
					stmt203=stmt();
					PopFollow();

					stream_stmt.Add(stmt203.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 330:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(330, 31);
						// SugarCpp.g:330:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

						DebugLocation(330, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(330, 46);
						// SugarCpp.g:330:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(330, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(330, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(78); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:332:4: 'unless' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(332, 4);
				string_literal204=(IToken)Match(input,151,Follow._151_in_stmt_if2291);  
				stream_151.Add(string_literal204);

				DebugLocation(332, 13);
				PushFollow(Follow._expr_in_stmt_if2293);
				expr205=expr();
				PopFollow();

				stream_expr.Add(expr205.Tree);
				DebugLocation(332, 18);
				// SugarCpp.g:332:18: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_Unless expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) ) )
				int alt82=2;
				try { DebugEnterSubRule(82);
				try { DebugEnterDecision(82, false);
				int LA82_0 = input.LA(1);

				if ((LA82_0==NEWLINE))
				{
					alt82 = 1;
				}
				else if ((LA82_0==147))
				{
					alt82 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 82, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(82); }
				switch (alt82)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:332:19: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
					{
					DebugLocation(332, 19);
					// SugarCpp.g:332:19: ( NEWLINE )+
					int cnt79=0;
					try { DebugEnterSubRule(79);
					while (true)
					{
						int alt79=2;
						try { DebugEnterDecision(79, false);
						int LA79_0 = input.LA(1);

						if ((LA79_0==NEWLINE))
						{
							alt79 = 1;
						}


						} finally { DebugExitDecision(79); }
						switch (alt79)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:332:19: NEWLINE
							{
							DebugLocation(332, 19);
							NEWLINE206=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2296);  
							stream_NEWLINE.Add(NEWLINE206);


							}
							break;

						default:
							if (cnt79 >= 1)
								goto loop79;

							EarlyExitException eee79 = new EarlyExitException( 79, input );
							DebugRecognitionException(eee79);
							throw eee79;
						}
						cnt79++;
					}
					loop79:
						;

					} finally { DebugExitSubRule(79); }

					DebugLocation(332, 28);
					PushFollow(Follow._stmt_block_in_stmt_if2299);
					stmt_block207=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block207.Tree);
					DebugLocation(332, 39);
					// SugarCpp.g:332:39: ( ( NEWLINE )* 'else' stmt_block )?
					int alt81=2;
					try { DebugEnterSubRule(81);
					try { DebugEnterDecision(81, false);
					try
					{
						alt81 = dfa81.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:332:40: ( NEWLINE )* 'else' stmt_block
						{
						DebugLocation(332, 40);
						// SugarCpp.g:332:40: ( NEWLINE )*
						try { DebugEnterSubRule(80);
						while (true)
						{
							int alt80=2;
							try { DebugEnterDecision(80, false);
							int LA80_0 = input.LA(1);

							if ((LA80_0==NEWLINE))
							{
								alt80 = 1;
							}


							} finally { DebugExitDecision(80); }
							switch ( alt80 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:332:40: NEWLINE
								{
								DebugLocation(332, 40);
								NEWLINE208=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if2302);  
								stream_NEWLINE.Add(NEWLINE208);


								}
								break;

							default:
								goto loop80;
							}
						}

						loop80:
							;

						} finally { DebugExitSubRule(80); }

						DebugLocation(332, 49);
						string_literal209=(IToken)Match(input,131,Follow._131_in_stmt_if2305);  
						stream_131.Add(string_literal209);

						DebugLocation(332, 56);
						PushFollow(Follow._stmt_block_in_stmt_if2307);
						stmt_block210=stmt_block();
						PopFollow();

						stream_stmt_block.Add(stmt_block210.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(81); }



					{
					// AST REWRITE
					// elements: expr, stmt_block, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 332:69: -> ^( Stmt_Unless expr stmt_block ( stmt_block )? )
					{
						DebugLocation(332, 72);
						// SugarCpp.g:332:72: ^( Stmt_Unless expr stmt_block ( stmt_block )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 74);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(332, 86);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(332, 91);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());
						DebugLocation(332, 102);
						// SugarCpp.g:332:102: ( stmt_block )?
						if (stream_stmt_block.HasNext)
						{
							DebugLocation(332, 102);
							adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						}
						stream_stmt_block.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:333:20: 'then' stmt
					{
					DebugLocation(333, 20);
					string_literal211=(IToken)Match(input,147,Follow._147_in_stmt_if2343);  
					stream_147.Add(string_literal211);

					DebugLocation(333, 27);
					PushFollow(Follow._stmt_in_stmt_if2345);
					stmt212=stmt();
					PopFollow();

					stream_stmt.Add(stmt212.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:32: -> ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(333, 35);
						// SugarCpp.g:333:35: ^( Stmt_Unless expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Unless, "Stmt_Unless"), root_1);

						DebugLocation(333, 49);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(333, 54);
						// SugarCpp.g:333:54: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 56);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(333, 67);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(82); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 30);
			LeaveRule("stmt_if", 30);
			LeaveRule_stmt_if();
		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:337:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 31);
		TraceIn("stmt_while", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal213 = default(IToken);
		IToken NEWLINE215 = default(IToken);
		IToken string_literal217 = default(IToken);
		IToken string_literal219 = default(IToken);
		IToken NEWLINE221 = default(IToken);
		IToken string_literal223 = default(IToken);
		IToken string_literal225 = default(IToken);
		IToken NEWLINE226 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr220 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block227 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree NEWLINE215_tree = default(CommonTree);
		CommonTree string_literal217_tree = default(CommonTree);
		CommonTree string_literal219_tree = default(CommonTree);
		CommonTree NEWLINE221_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		CommonTree string_literal225_tree = default(CommonTree);
		CommonTree NEWLINE226_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_156=new RewriteRuleITokenStream(adaptor,"token 156");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(337, 1);
		try
		{
			// SugarCpp.g:338:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt89=3;
			try { DebugEnterDecision(89, false);
			switch (input.LA(1))
			{
			case 156:
				{
				alt89 = 1;
				}
				break;
			case 153:
				{
				alt89 = 2;
				}
				break;
			case 142:
				{
				alt89 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:338:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(338, 4);
				string_literal213=(IToken)Match(input,156,Follow._156_in_stmt_while2380);  
				stream_156.Add(string_literal213);

				DebugLocation(338, 12);
				PushFollow(Follow._expr_in_stmt_while2382);
				expr214=expr();
				PopFollow();

				stream_expr.Add(expr214.Tree);
				DebugLocation(338, 17);
				// SugarCpp.g:338:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'then' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt85=2;
				try { DebugEnterSubRule(85);
				try { DebugEnterDecision(85, false);
				int LA85_0 = input.LA(1);

				if ((LA85_0==NEWLINE))
				{
					alt85 = 1;
				}
				else if ((LA85_0==147))
				{
					alt85 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 85, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(85); }
				switch (alt85)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:338:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(338, 19);
					// SugarCpp.g:338:19: ( NEWLINE )+
					int cnt84=0;
					try { DebugEnterSubRule(84);
					while (true)
					{
						int alt84=2;
						try { DebugEnterDecision(84, false);
						int LA84_0 = input.LA(1);

						if ((LA84_0==NEWLINE))
						{
							alt84 = 1;
						}


						} finally { DebugExitDecision(84); }
						switch (alt84)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:338:19: NEWLINE
							{
							DebugLocation(338, 19);
							NEWLINE215=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2386);  
							stream_NEWLINE.Add(NEWLINE215);


							}
							break;

						default:
							if (cnt84 >= 1)
								goto loop84;

							EarlyExitException eee84 = new EarlyExitException( 84, input );
							DebugRecognitionException(eee84);
							throw eee84;
						}
						cnt84++;
					}
					loop84:
						;

					} finally { DebugExitSubRule(84); }

					DebugLocation(338, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2389);
					stmt_block216=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block216.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 338:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(338, 42);
						// SugarCpp.g:338:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(338, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(338, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(338, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:339:13: 'then' stmt
					{
					DebugLocation(339, 13);
					string_literal217=(IToken)Match(input,147,Follow._147_in_stmt_while2413);  
					stream_147.Add(string_literal217);

					DebugLocation(339, 20);
					PushFollow(Follow._stmt_in_stmt_while2415);
					stmt218=stmt();
					PopFollow();

					stream_stmt.Add(stmt218.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 339:25: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(339, 28);
						// SugarCpp.g:339:28: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(339, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(339, 46);
						// SugarCpp.g:339:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(339, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(85); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:341:4: 'until' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(341, 4);
				string_literal219=(IToken)Match(input,153,Follow._153_in_stmt_while2443);  
				stream_153.Add(string_literal219);

				DebugLocation(341, 12);
				PushFollow(Follow._expr_in_stmt_while2445);
				expr220=expr();
				PopFollow();

				stream_expr.Add(expr220.Tree);
				DebugLocation(341, 17);
				// SugarCpp.g:341:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_Until expr stmt_block ) | 'then' stmt -> ^( Stmt_Until expr ^( Stmt_Block stmt ) ) )
				int alt87=2;
				try { DebugEnterSubRule(87);
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==NEWLINE))
				{
					alt87 = 1;
				}
				else if ((LA87_0==147))
				{
					alt87 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 87, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:341:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(341, 19);
					// SugarCpp.g:341:19: ( NEWLINE )+
					int cnt86=0;
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==NEWLINE))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:341:19: NEWLINE
							{
							DebugLocation(341, 19);
							NEWLINE221=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2449);  
							stream_NEWLINE.Add(NEWLINE221);


							}
							break;

						default:
							if (cnt86 >= 1)
								goto loop86;

							EarlyExitException eee86 = new EarlyExitException( 86, input );
							DebugRecognitionException(eee86);
							throw eee86;
						}
						cnt86++;
					}
					loop86:
						;

					} finally { DebugExitSubRule(86); }

					DebugLocation(341, 28);
					PushFollow(Follow._stmt_block_in_stmt_while2452);
					stmt_block222=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block222.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 341:39: -> ^( Stmt_Until expr stmt_block )
					{
						DebugLocation(341, 42);
						// SugarCpp.g:341:42: ^( Stmt_Until expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(341, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(341, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(341, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:342:13: 'then' stmt
					{
					DebugLocation(342, 13);
					string_literal223=(IToken)Match(input,147,Follow._147_in_stmt_while2476);  
					stream_147.Add(string_literal223);

					DebugLocation(342, 20);
					PushFollow(Follow._stmt_in_stmt_while2478);
					stmt224=stmt();
					PopFollow();

					stream_stmt.Add(stmt224.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:25: -> ^( Stmt_Until expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(342, 28);
						// SugarCpp.g:342:28: ^( Stmt_Until expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Until, "Stmt_Until"), root_1);

						DebugLocation(342, 41);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(342, 46);
						// SugarCpp.g:342:46: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 48);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(342, 59);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(87); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:344:4: 'loop' ( NEWLINE )+ stmt_block
				{
				DebugLocation(344, 4);
				string_literal225=(IToken)Match(input,142,Follow._142_in_stmt_while2506);  
				stream_142.Add(string_literal225);

				DebugLocation(344, 11);
				// SugarCpp.g:344:11: ( NEWLINE )+
				int cnt88=0;
				try { DebugEnterSubRule(88);
				while (true)
				{
					int alt88=2;
					try { DebugEnterDecision(88, false);
					int LA88_0 = input.LA(1);

					if ((LA88_0==NEWLINE))
					{
						alt88 = 1;
					}


					} finally { DebugExitDecision(88); }
					switch (alt88)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:344:11: NEWLINE
						{
						DebugLocation(344, 11);
						NEWLINE226=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2508);  
						stream_NEWLINE.Add(NEWLINE226);


						}
						break;

					default:
						if (cnt88 >= 1)
							goto loop88;

						EarlyExitException eee88 = new EarlyExitException( 88, input );
						DebugRecognitionException(eee88);
						throw eee88;
					}
					cnt88++;
				}
				loop88:
					;

				} finally { DebugExitSubRule(88); }

				DebugLocation(344, 20);
				PushFollow(Follow._stmt_block_in_stmt_while2511);
				stmt_block227=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block227.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:31: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(344, 34);
					// SugarCpp.g:344:34: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(344, 46);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 31);
			LeaveRule("stmt_while", 31);
			LeaveRule_stmt_while();
		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:347:1: stmt_for : 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 32);
		TraceIn("stmt_for", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal228 = default(IToken);
		IToken char_literal229 = default(IToken);
		IToken string_literal231 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken string_literal235 = default(IToken);
		IToken NEWLINE237 = default(IToken);
		IToken string_literal239 = default(IToken);
		IToken string_literal241 = default(IToken);
		IToken NEWLINE243 = default(IToken);
		IToken NEWLINE245 = default(IToken);
		IToken char_literal247 = default(IToken);
		IToken char_literal249 = default(IToken);
		IToken char_literal251 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken NEWLINE254 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident230 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr232 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block238 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr240 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block246 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr248 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr250 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block255 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal228_tree = default(CommonTree);
		CommonTree char_literal229_tree = default(CommonTree);
		CommonTree string_literal231_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree string_literal235_tree = default(CommonTree);
		CommonTree NEWLINE237_tree = default(CommonTree);
		CommonTree string_literal239_tree = default(CommonTree);
		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree NEWLINE243_tree = default(CommonTree);
		CommonTree NEWLINE245_tree = default(CommonTree);
		CommonTree char_literal247_tree = default(CommonTree);
		CommonTree char_literal249_tree = default(CommonTree);
		CommonTree char_literal251_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		CommonTree NEWLINE254_tree = default(CommonTree);
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(347, 1);
		try
		{
			// SugarCpp.g:348:2: ( 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:348:4: 'for' ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) )
			{
			DebugLocation(348, 4);
			string_literal228=(IToken)Match(input,134,Follow._134_in_stmt_for2530);  
			stream_134.Add(string_literal228);

			DebugLocation(348, 10);
			// SugarCpp.g:348:10: ( ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) | '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block -> ^( Stmt_For expr expr expr stmt_block ) )
			int alt98=2;
			try { DebugEnterSubRule(98);
			try { DebugEnterDecision(98, false);
			int LA98_0 = input.LA(1);

			if ((LA98_0==IDENT||LA98_0==80))
			{
				alt98 = 1;
			}
			else if ((LA98_0==82))
			{
				alt98 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 98, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(98); }
			switch (alt98)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:348:12: ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
				{
				DebugLocation(348, 12);
				// SugarCpp.g:348:12: ( '&' )?
				int alt90=2;
				try { DebugEnterSubRule(90);
				try { DebugEnterDecision(90, false);
				int LA90_0 = input.LA(1);

				if ((LA90_0==80))
				{
					alt90 = 1;
				}
				} finally { DebugExitDecision(90); }
				switch (alt90)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:12: '&'
					{
					DebugLocation(348, 12);
					char_literal229=(IToken)Match(input,80,Follow._80_in_stmt_for2534);  
					stream_80.Add(char_literal229);


					}
					break;

				}
				} finally { DebugExitSubRule(90); }

				DebugLocation(348, 17);
				PushFollow(Follow._ident_in_stmt_for2537);
				ident230=ident();
				PopFollow();

				stream_ident.Add(ident230.Tree);
				DebugLocation(348, 23);
				string_literal231=(IToken)Match(input,104,Follow._104_in_stmt_for2539);  
				stream_104.Add(string_literal231);

				DebugLocation(348, 28);
				PushFollow(Follow._expr_in_stmt_for2541);
				expr232=expr();
				PopFollow();

				stream_expr.Add(expr232.Tree);
				DebugLocation(348, 33);
				// SugarCpp.g:348:33: ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
				int alt96=3;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				switch (input.LA(1))
				{
				case 148:
					{
					alt96 = 1;
					}
					break;
				case 130:
					{
					alt96 = 2;
					}
					break;
				case NEWLINE:
					{
					alt96 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:348:35: 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
					{
					DebugLocation(348, 35);
					string_literal233=(IToken)Match(input,148,Follow._148_in_stmt_for2545);  
					stream_148.Add(string_literal233);

					DebugLocation(348, 40);
					PushFollow(Follow._expr_in_stmt_for2547);
					expr234=expr();
					PopFollow();

					stream_expr.Add(expr234.Tree);
					DebugLocation(348, 45);
					// SugarCpp.g:348:45: ( 'by' expr )?
					int alt91=2;
					try { DebugEnterSubRule(91);
					try { DebugEnterDecision(91, false);
					int LA91_0 = input.LA(1);

					if ((LA91_0==125))
					{
						alt91 = 1;
					}
					} finally { DebugExitDecision(91); }
					switch (alt91)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:348:46: 'by' expr
						{
						DebugLocation(348, 46);
						string_literal235=(IToken)Match(input,125,Follow._125_in_stmt_for2550);  
						stream_125.Add(string_literal235);

						DebugLocation(348, 51);
						PushFollow(Follow._expr_in_stmt_for2552);
						expr236=expr();
						PopFollow();

						stream_expr.Add(expr236.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(91); }

					DebugLocation(348, 58);
					// SugarCpp.g:348:58: ( NEWLINE )+
					int cnt92=0;
					try { DebugEnterSubRule(92);
					while (true)
					{
						int alt92=2;
						try { DebugEnterDecision(92, false);
						int LA92_0 = input.LA(1);

						if ((LA92_0==NEWLINE))
						{
							alt92 = 1;
						}


						} finally { DebugExitDecision(92); }
						switch (alt92)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:348:58: NEWLINE
							{
							DebugLocation(348, 58);
							NEWLINE237=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2556);  
							stream_NEWLINE.Add(NEWLINE237);


							}
							break;

						default:
							if (cnt92 >= 1)
								goto loop92;

							EarlyExitException eee92 = new EarlyExitException( 92, input );
							DebugRecognitionException(eee92);
							throw eee92;
						}
						cnt92++;
					}
					loop92:
						;

					} finally { DebugExitSubRule(92); }

					DebugLocation(348, 67);
					PushFollow(Follow._stmt_block_in_stmt_for2559);
					stmt_block238=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block238.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block, expr, ident, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 348:78: -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
					{
						DebugLocation(348, 81);
						// SugarCpp.g:348:81: ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(348, 83);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_To, "Stmt_For_To"), root_1);

						DebugLocation(348, 95);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(348, 101);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(348, 106);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(348, 111);
						// SugarCpp.g:348:111: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(348, 111);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();
						DebugLocation(348, 117);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:349:35: 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
					{
					DebugLocation(349, 35);
					string_literal239=(IToken)Match(input,130,Follow._130_in_stmt_for2612);  
					stream_130.Add(string_literal239);

					DebugLocation(349, 44);
					PushFollow(Follow._expr_in_stmt_for2614);
					expr240=expr();
					PopFollow();

					stream_expr.Add(expr240.Tree);
					DebugLocation(349, 49);
					// SugarCpp.g:349:49: ( 'by' expr )?
					int alt93=2;
					try { DebugEnterSubRule(93);
					try { DebugEnterDecision(93, false);
					int LA93_0 = input.LA(1);

					if ((LA93_0==125))
					{
						alt93 = 1;
					}
					} finally { DebugExitDecision(93); }
					switch (alt93)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:349:50: 'by' expr
						{
						DebugLocation(349, 50);
						string_literal241=(IToken)Match(input,125,Follow._125_in_stmt_for2617);  
						stream_125.Add(string_literal241);

						DebugLocation(349, 55);
						PushFollow(Follow._expr_in_stmt_for2619);
						expr242=expr();
						PopFollow();

						stream_expr.Add(expr242.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(93); }

					DebugLocation(349, 62);
					// SugarCpp.g:349:62: ( NEWLINE )+
					int cnt94=0;
					try { DebugEnterSubRule(94);
					while (true)
					{
						int alt94=2;
						try { DebugEnterDecision(94, false);
						int LA94_0 = input.LA(1);

						if ((LA94_0==NEWLINE))
						{
							alt94 = 1;
						}


						} finally { DebugExitDecision(94); }
						switch (alt94)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:349:62: NEWLINE
							{
							DebugLocation(349, 62);
							NEWLINE243=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2623);  
							stream_NEWLINE.Add(NEWLINE243);


							}
							break;

						default:
							if (cnt94 >= 1)
								goto loop94;

							EarlyExitException eee94 = new EarlyExitException( 94, input );
							DebugRecognitionException(eee94);
							throw eee94;
						}
						cnt94++;
					}
					loop94:
						;

					} finally { DebugExitSubRule(94); }

					DebugLocation(349, 71);
					PushFollow(Follow._stmt_block_in_stmt_for2626);
					stmt_block244=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block244.Tree);


					{
					// AST REWRITE
					// elements: expr, ident, stmt_block, expr, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 349:82: -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
					{
						DebugLocation(349, 85);
						// SugarCpp.g:349:85: ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 87);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_Down_To, "Stmt_For_Down_To"), root_1);

						DebugLocation(349, 104);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(349, 110);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(349, 115);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(349, 120);
						// SugarCpp.g:349:120: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(349, 120);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();
						DebugLocation(349, 126);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:350:35: ( NEWLINE )+ stmt_block
					{
					DebugLocation(350, 35);
					// SugarCpp.g:350:35: ( NEWLINE )+
					int cnt95=0;
					try { DebugEnterSubRule(95);
					while (true)
					{
						int alt95=2;
						try { DebugEnterDecision(95, false);
						int LA95_0 = input.LA(1);

						if ((LA95_0==NEWLINE))
						{
							alt95 = 1;
						}


						} finally { DebugExitDecision(95); }
						switch (alt95)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:350:35: NEWLINE
							{
							DebugLocation(350, 35);
							NEWLINE245=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2679);  
							stream_NEWLINE.Add(NEWLINE245);


							}
							break;

						default:
							if (cnt95 >= 1)
								goto loop95;

							EarlyExitException eee95 = new EarlyExitException( 95, input );
							DebugRecognitionException(eee95);
							throw eee95;
						}
						cnt95++;
					}
					loop95:
						;

					} finally { DebugExitSubRule(95); }

					DebugLocation(350, 44);
					PushFollow(Follow._stmt_block_in_stmt_for2682);
					stmt_block246=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block246.Tree);


					{
					// AST REWRITE
					// elements: stmt_block, 80, expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 350:55: -> ^( Stmt_ForEach '&' ident expr stmt_block )
					{
						DebugLocation(350, 58);
						// SugarCpp.g:350:58: ^( Stmt_ForEach '&' ident expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(350, 60);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

						DebugLocation(350, 73);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(350, 77);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(350, 83);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(350, 88);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(96); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:352:6: '(' expr ';' expr ';' expr ')' ( NEWLINE )+ stmt_block
				{
				DebugLocation(352, 6);
				char_literal247=(IToken)Match(input,82,Follow._82_in_stmt_for2719);  
				stream_82.Add(char_literal247);

				DebugLocation(352, 10);
				PushFollow(Follow._expr_in_stmt_for2721);
				expr248=expr();
				PopFollow();

				stream_expr.Add(expr248.Tree);
				DebugLocation(352, 15);
				char_literal249=(IToken)Match(input,102,Follow._102_in_stmt_for2723);  
				stream_102.Add(char_literal249);

				DebugLocation(352, 19);
				PushFollow(Follow._expr_in_stmt_for2725);
				expr250=expr();
				PopFollow();

				stream_expr.Add(expr250.Tree);
				DebugLocation(352, 24);
				char_literal251=(IToken)Match(input,102,Follow._102_in_stmt_for2727);  
				stream_102.Add(char_literal251);

				DebugLocation(352, 28);
				PushFollow(Follow._expr_in_stmt_for2729);
				expr252=expr();
				PopFollow();

				stream_expr.Add(expr252.Tree);
				DebugLocation(352, 33);
				char_literal253=(IToken)Match(input,83,Follow._83_in_stmt_for2731);  
				stream_83.Add(char_literal253);

				DebugLocation(352, 37);
				// SugarCpp.g:352:37: ( NEWLINE )+
				int cnt97=0;
				try { DebugEnterSubRule(97);
				while (true)
				{
					int alt97=2;
					try { DebugEnterDecision(97, false);
					int LA97_0 = input.LA(1);

					if ((LA97_0==NEWLINE))
					{
						alt97 = 1;
					}


					} finally { DebugExitDecision(97); }
					switch (alt97)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:352:37: NEWLINE
						{
						DebugLocation(352, 37);
						NEWLINE254=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2733);  
						stream_NEWLINE.Add(NEWLINE254);


						}
						break;

					default:
						if (cnt97 >= 1)
							goto loop97;

						EarlyExitException eee97 = new EarlyExitException( 97, input );
						DebugRecognitionException(eee97);
						throw eee97;
					}
					cnt97++;
				}
				loop97:
					;

				} finally { DebugExitSubRule(97); }

				DebugLocation(352, 46);
				PushFollow(Follow._stmt_block_in_stmt_for2736);
				stmt_block255=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block255.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_block, expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 352:57: -> ^( Stmt_For expr expr expr stmt_block )
				{
					DebugLocation(352, 60);
					// SugarCpp.g:352:60: ^( Stmt_For expr expr expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(352, 62);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

					DebugLocation(352, 71);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(352, 76);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(352, 81);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(352, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(98); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 32);
			LeaveRule("stmt_for", 32);
			LeaveRule_stmt_for();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:356:1: stmt_try : 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 33);
		TraceIn("stmt_try", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal256 = default(IToken);
		IToken string_literal258 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block260 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal256_tree = default(CommonTree);
		CommonTree string_literal258_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:357:4: 'try' stmt_block 'catch' stmt_alloc stmt_block
			{
			DebugLocation(357, 4);
			string_literal256=(IToken)Match(input,149,Follow._149_in_stmt_try2766);  
			stream_149.Add(string_literal256);

			DebugLocation(357, 10);
			PushFollow(Follow._stmt_block_in_stmt_try2768);
			stmt_block257=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block257.Tree);
			DebugLocation(357, 21);
			string_literal258=(IToken)Match(input,126,Follow._126_in_stmt_try2770);  
			stream_126.Add(string_literal258);

			DebugLocation(357, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2772);
			stmt_alloc259=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc259.Tree);
			DebugLocation(357, 40);
			PushFollow(Follow._stmt_block_in_stmt_try2774);
			stmt_block260=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block260.Tree);


			{
			// AST REWRITE
			// elements: stmt_alloc, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 357:51: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(357, 54);
				// SugarCpp.g:357:54: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(357, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(357, 65);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(357, 76);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(357, 87);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 33);
			LeaveRule("stmt_try", 33);
			LeaveRule_stmt_try();
		}
		DebugLocation(358, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:360:1: linq_item : ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 34);
		TraceIn("linq_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal261 = default(IToken);
		IToken string_literal263 = default(IToken);
		IToken string_literal265 = default(IToken);
		IToken char_literal267 = default(IToken);
		IToken string_literal269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr264 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident266 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr268 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr270 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal261_tree = default(CommonTree);
		CommonTree string_literal263_tree = default(CommonTree);
		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree char_literal267_tree = default(CommonTree);
		CommonTree string_literal269_tree = default(CommonTree);
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_155=new RewriteRuleITokenStream(adaptor,"token 155");
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(360, 1);
		try
		{
			// SugarCpp.g:361:2: ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt99=3;
			try { DebugEnterDecision(99, false);
			switch (input.LA(1))
			{
			case 135:
				{
				alt99 = 1;
				}
				break;
			case 141:
				{
				alt99 = 2;
				}
				break;
			case 155:
				{
				alt99 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 99, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:361:4: 'from' expr 'in' expr
				{
				DebugLocation(361, 4);
				string_literal261=(IToken)Match(input,135,Follow._135_in_linq_item2797);  
				stream_135.Add(string_literal261);

				DebugLocation(361, 11);
				PushFollow(Follow._expr_in_linq_item2799);
				expr262=expr();
				PopFollow();

				stream_expr.Add(expr262.Tree);
				DebugLocation(361, 16);
				string_literal263=(IToken)Match(input,138,Follow._138_in_linq_item2801);  
				stream_138.Add(string_literal263);

				DebugLocation(361, 21);
				PushFollow(Follow._expr_in_linq_item2803);
				expr264=expr();
				PopFollow();

				stream_expr.Add(expr264.Tree);


				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 361:26: -> ^( Linq_From expr expr )
				{
					DebugLocation(361, 29);
					// SugarCpp.g:361:29: ^( Linq_From expr expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(361, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(361, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(361, 46);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:362:4: 'let' ident '=' expr
				{
				DebugLocation(362, 4);
				string_literal265=(IToken)Match(input,141,Follow._141_in_linq_item2818);  
				stream_141.Add(string_literal265);

				DebugLocation(362, 10);
				PushFollow(Follow._ident_in_linq_item2820);
				ident266=ident();
				PopFollow();

				stream_ident.Add(ident266.Tree);
				DebugLocation(362, 16);
				char_literal267=(IToken)Match(input,108,Follow._108_in_linq_item2822);  
				stream_108.Add(char_literal267);

				DebugLocation(362, 20);
				PushFollow(Follow._expr_in_linq_item2824);
				expr268=expr();
				PopFollow();

				stream_expr.Add(expr268.Tree);


				{
				// AST REWRITE
				// elements: ident, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 362:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(362, 28);
					// SugarCpp.g:362:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(362, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(362, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(362, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:363:4: 'where' expr
				{
				DebugLocation(363, 4);
				string_literal269=(IToken)Match(input,155,Follow._155_in_linq_item2839);  
				stream_155.Add(string_literal269);

				DebugLocation(363, 12);
				PushFollow(Follow._expr_in_linq_item2841);
				expr270=expr();
				PopFollow();

				stream_expr.Add(expr270.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 363:17: -> ^( Linq_Where expr )
				{
					DebugLocation(363, 20);
					// SugarCpp.g:363:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(363, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(363, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 34);
			LeaveRule("linq_item", 34);
			LeaveRule_linq_item();
		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:366:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 35);
		TraceIn("linq_prefix", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE273 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item271 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item272 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE273_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(366, 1);
		try
		{
			// SugarCpp.g:367:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:367:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(367, 4);
			// SugarCpp.g:367:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt102=0;
			try { DebugEnterSubRule(102);
			while (true)
			{
				int alt102=2;
				try { DebugEnterDecision(102, false);
				int LA102_0 = input.LA(1);

				if ((LA102_0==135||LA102_0==141||LA102_0==155))
				{
					alt102 = 1;
				}


				} finally { DebugExitDecision(102); }
				switch (alt102)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(367, 5);
					PushFollow(Follow._linq_item_in_linq_prefix2861);
					linq_item271=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item271.Tree);
					DebugLocation(367, 15);
					// SugarCpp.g:367:15: ( linq_item )*
					try { DebugEnterSubRule(100);
					while (true)
					{
						int alt100=2;
						try { DebugEnterDecision(100, false);
						int LA100_0 = input.LA(1);

						if ((LA100_0==135||LA100_0==141||LA100_0==155))
						{
							alt100 = 1;
						}


						} finally { DebugExitDecision(100); }
						switch ( alt100 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:367:15: linq_item
							{
							DebugLocation(367, 15);
							PushFollow(Follow._linq_item_in_linq_prefix2863);
							linq_item272=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item272.Tree);

							}
							break;

						default:
							goto loop100;
						}
					}

					loop100:
						;

					} finally { DebugExitSubRule(100); }

					DebugLocation(367, 26);
					// SugarCpp.g:367:26: ( NEWLINE )+
					int cnt101=0;
					try { DebugEnterSubRule(101);
					while (true)
					{
						int alt101=2;
						try { DebugEnterDecision(101, false);
						int LA101_0 = input.LA(1);

						if ((LA101_0==NEWLINE))
						{
							alt101 = 1;
						}


						} finally { DebugExitDecision(101); }
						switch (alt101)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:367:26: NEWLINE
							{
							DebugLocation(367, 26);
							NEWLINE273=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix2866);  
							stream_NEWLINE.Add(NEWLINE273);


							}
							break;

						default:
							if (cnt101 >= 1)
								goto loop101;

							EarlyExitException eee101 = new EarlyExitException( 101, input );
							DebugRecognitionException(eee101);
							throw eee101;
						}
						cnt101++;
					}
					loop101:
						;

					} finally { DebugExitSubRule(101); }


					}
					break;

				default:
					if (cnt102 >= 1)
						goto loop102;

					EarlyExitException eee102 = new EarlyExitException( 102, input );
					DebugRecognitionException(eee102);
					throw eee102;
				}
				cnt102++;
			}
			loop102:
				;

			} finally { DebugExitSubRule(102); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 367:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(367, 40);
				// SugarCpp.g:367:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(367, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(367, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(367, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 35);
			LeaveRule("linq_prefix", 35);
			LeaveRule_linq_prefix();
		}
		DebugLocation(368, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:370:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 36);
		TraceIn("stmt_linq", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix274 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block275 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(370, 1);
		try
		{
			// SugarCpp.g:371:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:371:4: linq_prefix stmt_block
			{
			DebugLocation(371, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq2889);
			linq_prefix274=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix274.Tree);
			DebugLocation(371, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq2891);
			stmt_block275=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block275.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, linq_prefix
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 371:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(371, 30);
				// SugarCpp.g:371:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(371, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(371, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(371, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 36);
			LeaveRule("stmt_linq", 36);
			LeaveRule_stmt_linq();
		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:374:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 37);
		TraceIn("ident_list", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal277 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident278 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal277_tree = default(CommonTree);
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(374, 1);
		try
		{
			// SugarCpp.g:375:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: ident ( ',' ident )*
			{
			DebugLocation(375, 4);
			PushFollow(Follow._ident_in_ident_list2912);
			ident276=ident();
			PopFollow();

			stream_ident.Add(ident276.Tree);
			DebugLocation(375, 10);
			// SugarCpp.g:375:10: ( ',' ident )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=2;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==89))
				{
					alt103 = 1;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:375:11: ',' ident
					{
					DebugLocation(375, 11);
					char_literal277=(IToken)Match(input,89,Follow._89_in_ident_list2915);  
					stream_89.Add(char_literal277);

					DebugLocation(375, 15);
					PushFollow(Follow._ident_in_ident_list2917);
					ident278=ident();
					PopFollow();

					stream_ident.Add(ident278.Tree);

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 375:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(375, 26);
				// SugarCpp.g:375:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(375, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(375, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(375, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 37);
			LeaveRule("ident_list", 37);
			LeaveRule_ident_list();
		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:378:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 38);
		TraceIn("stmt_alloc", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal280 = default(IToken);
		IToken char_literal282 = default(IToken);
		IToken string_literal283 = default(IToken);
		IToken char_literal285 = default(IToken);
		IToken char_literal287 = default(IToken);
		IToken string_literal288 = default(IToken);
		IToken char_literal290 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list279 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name281 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr284 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list286 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr289 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr291 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal280_tree = default(CommonTree);
		CommonTree char_literal282_tree = default(CommonTree);
		CommonTree string_literal283_tree = default(CommonTree);
		CommonTree char_literal285_tree = default(CommonTree);
		CommonTree char_literal287_tree = default(CommonTree);
		CommonTree string_literal288_tree = default(CommonTree);
		CommonTree char_literal290_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(378, 1);
		try
		{
			// SugarCpp.g:379:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:379:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			{
			DebugLocation(379, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2939);
			ident_list279=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list279.Tree);
			DebugLocation(379, 15);
			// SugarCpp.g:379:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' expr )* ) -> ^( ':=' ident_list ( expr )* ) )
			int alt108=2;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			int LA108_0 = input.LA(1);

			if ((LA108_0==99))
			{
				alt108 = 1;
			}
			else if ((LA108_0==101))
			{
				alt108 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 108, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:379:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(379, 17);
				char_literal280=(IToken)Match(input,99,Follow._99_in_stmt_alloc2943);  
				stream_99.Add(char_literal280);

				DebugLocation(379, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2945);
				type_name281=type_name();
				PopFollow();

				stream_type_name.Add(type_name281.Tree);
				DebugLocation(379, 31);
				// SugarCpp.g:379:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt106=3;
				try { DebugEnterSubRule(106);
				try { DebugEnterDecision(106, false);
				switch (input.LA(1))
				{
				case 101:
				case 108:
					{
					alt106 = 1;
					}
					break;
				case 82:
					{
					alt106 = 2;
					}
					break;
				case INDENT:
				case NEWLINE:
				case 134:
				case 136:
				case 151:
				case 153:
				case 156:
					{
					alt106 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 106, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(106); }
				switch (alt106)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:379:33: ( '=' | ':=' ) expr
					{
					DebugLocation(379, 33);
					// SugarCpp.g:379:33: ( '=' | ':=' )
					int alt104=2;
					try { DebugEnterSubRule(104);
					try { DebugEnterDecision(104, false);
					int LA104_0 = input.LA(1);

					if ((LA104_0==108))
					{
						alt104 = 1;
					}
					else if ((LA104_0==101))
					{
						alt104 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 104, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(104); }
					switch (alt104)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:379:34: '='
						{
						DebugLocation(379, 34);
						char_literal282=(IToken)Match(input,108,Follow._108_in_stmt_alloc2950);  
						stream_108.Add(char_literal282);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:379:40: ':='
						{
						DebugLocation(379, 40);
						string_literal283=(IToken)Match(input,101,Follow._101_in_stmt_alloc2954);  
						stream_101.Add(string_literal283);


						}
						break;

					}
					} finally { DebugExitSubRule(104); }

					DebugLocation(379, 46);
					PushFollow(Follow._expr_in_stmt_alloc2957);
					expr284=expr();
					PopFollow();

					stream_expr.Add(expr284.Tree);


					{
					// AST REWRITE
					// elements: expr, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 379:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(379, 55);
						// SugarCpp.g:379:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(379, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(379, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(379, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(379, 95);
						// SugarCpp.g:379:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(379, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:380:33: '(' ( expr_list )? ')'
					{
					DebugLocation(380, 33);
					char_literal285=(IToken)Match(input,82,Follow._82_in_stmt_alloc3005);  
					stream_82.Add(char_literal285);

					DebugLocation(380, 37);
					// SugarCpp.g:380:37: ( expr_list )?
					int alt105=2;
					try { DebugEnterSubRule(105);
					try { DebugEnterDecision(105, false);
					int LA105_0 = input.LA(1);

					if ((LA105_0==IDENT||LA105_0==NUMBER||LA105_0==STRING||LA105_0==75||LA105_0==80||LA105_0==82||LA105_0==84||(LA105_0>=86 && LA105_0<=87)||(LA105_0>=90 && LA105_0<=91)||(LA105_0>=117 && LA105_0<=118)||LA105_0==144||LA105_0==160))
					{
						alt105 = 1;
					}
					} finally { DebugExitDecision(105); }
					switch (alt105)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:380:37: expr_list
						{
						DebugLocation(380, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc3007);
						expr_list286=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list286.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(105); }

					DebugLocation(380, 48);
					char_literal287=(IToken)Match(input,83,Follow._83_in_stmt_alloc3010);  
					stream_83.Add(char_literal287);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 380:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(380, 56);
						// SugarCpp.g:380:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(380, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(380, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(380, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(380, 98);
						// SugarCpp.g:380:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(380, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:381:15: 
					{

					{
					// AST REWRITE
					// elements: type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 381:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(381, 18);
						// SugarCpp.g:381:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(381, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(381, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(381, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(106); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:383:8: ':=' ( expr ( ',' expr )* )
				{
				DebugLocation(383, 8);
				string_literal288=(IToken)Match(input,101,Follow._101_in_stmt_alloc3071);  
				stream_101.Add(string_literal288);

				DebugLocation(383, 14);
				// SugarCpp.g:383:14: ( expr ( ',' expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:383:15: expr ( ',' expr )*
				{
				DebugLocation(383, 15);
				PushFollow(Follow._expr_in_stmt_alloc3075);
				expr289=expr();
				PopFollow();

				stream_expr.Add(expr289.Tree);
				DebugLocation(383, 20);
				// SugarCpp.g:383:20: ( ',' expr )*
				try { DebugEnterSubRule(107);
				while (true)
				{
					int alt107=2;
					try { DebugEnterDecision(107, false);
					int LA107_0 = input.LA(1);

					if ((LA107_0==89))
					{
						alt107 = 1;
					}


					} finally { DebugExitDecision(107); }
					switch ( alt107 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:383:21: ',' expr
						{
						DebugLocation(383, 21);
						char_literal290=(IToken)Match(input,89,Follow._89_in_stmt_alloc3078);  
						stream_89.Add(char_literal290);

						DebugLocation(383, 25);
						PushFollow(Follow._expr_in_stmt_alloc3080);
						expr291=expr();
						PopFollow();

						stream_expr.Add(expr291.Tree);

						}
						break;

					default:
						goto loop107;
					}
				}

				loop107:
					;

				} finally { DebugExitSubRule(107); }


				}



				{
				// AST REWRITE
				// elements: ident_list, expr, 101
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 383:33: -> ^( ':=' ident_list ( expr )* )
				{
					DebugLocation(383, 36);
					// SugarCpp.g:383:36: ^( ':=' ident_list ( expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(383, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_101.NextNode(), root_1);

					DebugLocation(383, 43);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(383, 54);
					// SugarCpp.g:383:54: ( expr )*
					while ( stream_expr.HasNext )
					{
						DebugLocation(383, 54);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 38);
			LeaveRule("stmt_alloc", 38);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(384, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:386:1: stmt_modify : lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 39);
		TraceIn("stmt_modify", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal295 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue292 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op293 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr294 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal295_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(386, 1);
		try
		{
			// SugarCpp.g:387:2: ( lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:387:4: lvalue ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(387, 4);
			PushFollow(Follow._lvalue_in_stmt_modify3106);
			lvalue292=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue292.Tree);
			DebugLocation(387, 11);
			// SugarCpp.g:387:11: ( modify_expr_op ^ expr | '?=' ^ modify_expr )?
			int alt109=3;
			try { DebugEnterSubRule(109);
			try { DebugEnterDecision(109, false);
			int LA109_0 = input.LA(1);

			if ((LA109_0==78||LA109_0==81||LA109_0==85||LA109_0==88||LA109_0==92||LA109_0==98||LA109_0==106||LA109_0==108||LA109_0==114||LA109_0==121||LA109_0==158))
			{
				alt109 = 1;
			}
			else if ((LA109_0==116))
			{
				alt109 = 2;
			}
			} finally { DebugExitDecision(109); }
			switch (alt109)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:387:13: modify_expr_op ^ expr
				{
				DebugLocation(387, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify3110);
				modify_expr_op293=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op293.Tree, root_0);
				DebugLocation(387, 29);
				PushFollow(Follow._expr_in_stmt_modify3113);
				expr294=expr();
				PopFollow();

				adaptor.AddChild(root_0, expr294.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:388:13: '?=' ^ modify_expr
				{
				DebugLocation(388, 17);
				string_literal295=(IToken)Match(input,116,Follow._116_in_stmt_modify3127); 
				string_literal295_tree = (CommonTree)adaptor.Create(string_literal295);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal295_tree, root_0);
				DebugLocation(388, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify3130);
				modify_expr296=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr296.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(109); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 39);
			LeaveRule("stmt_modify", 39);
			LeaveRule_stmt_modify();
		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:391:1: expr : list_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> list_expr297 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(391, 1);
		try
		{
			// SugarCpp.g:392:2: ( list_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:392:4: list_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(392, 4);
			PushFollow(Follow._list_expr_in_expr3143);
			list_expr297=list_expr();
			PopFollow();

			adaptor.AddChild(root_0, list_expr297.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(393, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_list_expr();
	partial void LeaveRule_list_expr();

	// $ANTLR start "list_expr"
	// SugarCpp.g:395:1: list_expr : ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr );
	[GrammarRule("list_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> list_expr()
	{
		EnterRule_list_expr();
		EnterRule("list_expr", 41);
		TraceIn("list_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal298 = default(IToken);
		IToken char_literal299 = default(IToken);
		IToken NEWLINE300 = default(IToken);
		IToken INDENT301 = default(IToken);
		IToken DEDENT302 = default(IToken);
		IToken char_literal304 = default(IToken);
		IToken NEWLINE305 = default(IToken);
		IToken INDENT306 = default(IToken);
		IToken DEDENT307 = default(IToken);
		IToken char_literal309 = default(IToken);
		IToken NEWLINE310 = default(IToken);
		IToken INDENT311 = default(IToken);
		IToken DEDENT312 = default(IToken);
		IToken char_literal313 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr303 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> list_expr308 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr314 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal298_tree = default(CommonTree);
		CommonTree char_literal299_tree = default(CommonTree);
		CommonTree NEWLINE300_tree = default(CommonTree);
		CommonTree INDENT301_tree = default(CommonTree);
		CommonTree DEDENT302_tree = default(CommonTree);
		CommonTree char_literal304_tree = default(CommonTree);
		CommonTree NEWLINE305_tree = default(CommonTree);
		CommonTree INDENT306_tree = default(CommonTree);
		CommonTree DEDENT307_tree = default(CommonTree);
		CommonTree char_literal309_tree = default(CommonTree);
		CommonTree NEWLINE310_tree = default(CommonTree);
		CommonTree INDENT311_tree = default(CommonTree);
		CommonTree DEDENT312_tree = default(CommonTree);
		CommonTree char_literal313_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_list_expr=new RewriteRuleSubtreeStream(adaptor,"rule list_expr");
		try { DebugEnterRule(GrammarFileName, "list_expr");
		DebugLocation(395, 1);
		try
		{
			// SugarCpp.g:396:2: ( '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']' -> ^( Expr_List ( list_expr )* ) | lambda_expr )
			int alt115=2;
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==118))
			{
				alt115 = 1;
			}
			else if ((LA115_0==IDENT||LA115_0==NUMBER||LA115_0==STRING||LA115_0==75||LA115_0==80||LA115_0==82||LA115_0==84||(LA115_0>=86 && LA115_0<=87)||(LA115_0>=90 && LA115_0<=91)||LA115_0==117||LA115_0==144||LA115_0==160))
			{
				alt115 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 115, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:396:4: '[' ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )? ( ',' | NEWLINE | INDENT | DEDENT )* ']'
				{
				DebugLocation(396, 4);
				char_literal298=(IToken)Match(input,118,Follow._118_in_list_expr3154);  
				stream_118.Add(char_literal298);

				DebugLocation(396, 8);
				// SugarCpp.g:396:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?
				int alt113=2;
				try { DebugEnterSubRule(113);
				try { DebugEnterDecision(113, false);
				try
				{
					alt113 = dfa113.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(113); }
				switch (alt113)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:396:9: ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					{
					DebugLocation(396, 9);
					// SugarCpp.g:396:9: ( ',' | NEWLINE | INDENT | DEDENT )*
					try { DebugEnterSubRule(110);
					while (true)
					{
						int alt110=5;
						try { DebugEnterDecision(110, false);
						switch (input.LA(1))
						{
						case 89:
							{
							alt110 = 1;
							}
							break;
						case NEWLINE:
							{
							alt110 = 2;
							}
							break;
						case INDENT:
							{
							alt110 = 3;
							}
							break;
						case DEDENT:
							{
							alt110 = 4;
							}
							break;
						}

						} finally { DebugExitDecision(110); }
						switch ( alt110 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:396:10: ','
							{
							DebugLocation(396, 10);
							char_literal299=(IToken)Match(input,89,Follow._89_in_list_expr3158);  
							stream_89.Add(char_literal299);


							}
							break;
						case 2:
							DebugEnterAlt(2);
							// SugarCpp.g:396:16: NEWLINE
							{
							DebugLocation(396, 16);
							NEWLINE300=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3162);  
							stream_NEWLINE.Add(NEWLINE300);


							}
							break;
						case 3:
							DebugEnterAlt(3);
							// SugarCpp.g:396:26: INDENT
							{
							DebugLocation(396, 26);
							INDENT301=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3166);  
							stream_INDENT.Add(INDENT301);


							}
							break;
						case 4:
							DebugEnterAlt(4);
							// SugarCpp.g:396:35: DEDENT
							{
							DebugLocation(396, 35);
							DEDENT302=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3170);  
							stream_DEDENT.Add(DEDENT302);


							}
							break;

						default:
							goto loop110;
						}
					}

					loop110:
						;

					} finally { DebugExitSubRule(110); }

					DebugLocation(396, 44);
					PushFollow(Follow._list_expr_in_list_expr3174);
					list_expr303=list_expr();
					PopFollow();

					stream_list_expr.Add(list_expr303.Tree);
					DebugLocation(396, 54);
					// SugarCpp.g:396:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*
					try { DebugEnterSubRule(112);
					while (true)
					{
						int alt112=2;
						try { DebugEnterDecision(112, false);
						try
						{
							alt112 = dfa112.Predict(input);
						}
						catch (NoViableAltException nvae)
						{
							DebugRecognitionException(nvae);
							throw;
						}
						} finally { DebugExitDecision(112); }
						switch ( alt112 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:396:55: ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr
							{
							DebugLocation(396, 55);
							// SugarCpp.g:396:55: ( ',' | NEWLINE | INDENT | DEDENT )+
							int cnt111=0;
							try { DebugEnterSubRule(111);
							while (true)
							{
								int alt111=5;
								try { DebugEnterDecision(111, false);
								switch (input.LA(1))
								{
								case 89:
									{
									alt111 = 1;
									}
									break;
								case NEWLINE:
									{
									alt111 = 2;
									}
									break;
								case INDENT:
									{
									alt111 = 3;
									}
									break;
								case DEDENT:
									{
									alt111 = 4;
									}
									break;
								}

								} finally { DebugExitDecision(111); }
								switch (alt111)
								{
								case 1:
									DebugEnterAlt(1);
									// SugarCpp.g:396:56: ','
									{
									DebugLocation(396, 56);
									char_literal304=(IToken)Match(input,89,Follow._89_in_list_expr3178);  
									stream_89.Add(char_literal304);


									}
									break;
								case 2:
									DebugEnterAlt(2);
									// SugarCpp.g:396:62: NEWLINE
									{
									DebugLocation(396, 62);
									NEWLINE305=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3182);  
									stream_NEWLINE.Add(NEWLINE305);


									}
									break;
								case 3:
									DebugEnterAlt(3);
									// SugarCpp.g:396:72: INDENT
									{
									DebugLocation(396, 72);
									INDENT306=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3186);  
									stream_INDENT.Add(INDENT306);


									}
									break;
								case 4:
									DebugEnterAlt(4);
									// SugarCpp.g:396:81: DEDENT
									{
									DebugLocation(396, 81);
									DEDENT307=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3190);  
									stream_DEDENT.Add(DEDENT307);


									}
									break;

								default:
									if (cnt111 >= 1)
										goto loop111;

									EarlyExitException eee111 = new EarlyExitException( 111, input );
									DebugRecognitionException(eee111);
									throw eee111;
								}
								cnt111++;
							}
							loop111:
								;

							} finally { DebugExitSubRule(111); }

							DebugLocation(396, 90);
							PushFollow(Follow._list_expr_in_list_expr3194);
							list_expr308=list_expr();
							PopFollow();

							stream_list_expr.Add(list_expr308.Tree);

							}
							break;

						default:
							goto loop112;
						}
					}

					loop112:
						;

					} finally { DebugExitSubRule(112); }


					}
					break;

				}
				} finally { DebugExitSubRule(113); }

				DebugLocation(396, 104);
				// SugarCpp.g:396:104: ( ',' | NEWLINE | INDENT | DEDENT )*
				try { DebugEnterSubRule(114);
				while (true)
				{
					int alt114=5;
					try { DebugEnterDecision(114, false);
					switch (input.LA(1))
					{
					case 89:
						{
						alt114 = 1;
						}
						break;
					case NEWLINE:
						{
						alt114 = 2;
						}
						break;
					case INDENT:
						{
						alt114 = 3;
						}
						break;
					case DEDENT:
						{
						alt114 = 4;
						}
						break;
					}

					} finally { DebugExitDecision(114); }
					switch ( alt114 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:396:105: ','
						{
						DebugLocation(396, 105);
						char_literal309=(IToken)Match(input,89,Follow._89_in_list_expr3201);  
						stream_89.Add(char_literal309);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:396:111: NEWLINE
						{
						DebugLocation(396, 111);
						NEWLINE310=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_list_expr3205);  
						stream_NEWLINE.Add(NEWLINE310);


						}
						break;
					case 3:
						DebugEnterAlt(3);
						// SugarCpp.g:396:121: INDENT
						{
						DebugLocation(396, 121);
						INDENT311=(IToken)Match(input,INDENT,Follow._INDENT_in_list_expr3209);  
						stream_INDENT.Add(INDENT311);


						}
						break;
					case 4:
						DebugEnterAlt(4);
						// SugarCpp.g:396:130: DEDENT
						{
						DebugLocation(396, 130);
						DEDENT312=(IToken)Match(input,DEDENT,Follow._DEDENT_in_list_expr3213);  
						stream_DEDENT.Add(DEDENT312);


						}
						break;

					default:
						goto loop114;
					}
				}

				loop114:
					;

				} finally { DebugExitSubRule(114); }

				DebugLocation(396, 139);
				char_literal313=(IToken)Match(input,119,Follow._119_in_list_expr3217);  
				stream_119.Add(char_literal313);



				{
				// AST REWRITE
				// elements: list_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 396:143: -> ^( Expr_List ( list_expr )* )
				{
					DebugLocation(396, 146);
					// SugarCpp.g:396:146: ^( Expr_List ( list_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(396, 148);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_List, "Expr_List"), root_1);

					DebugLocation(396, 158);
					// SugarCpp.g:396:158: ( list_expr )*
					while ( stream_list_expr.HasNext )
					{
						DebugLocation(396, 158);
						adaptor.AddChild(root_1, stream_list_expr.NextTree());

					}
					stream_list_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:397:4: lambda_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(397, 4);
				PushFollow(Follow._lambda_expr_in_list_expr3231);
				lambda_expr314=lambda_expr();
				PopFollow();

				adaptor.AddChild(root_0, lambda_expr314.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("list_expr", 41);
			LeaveRule("list_expr", 41);
			LeaveRule_list_expr();
		}
		DebugLocation(398, 1);
		} finally { DebugExitRule(GrammarFileName, "list_expr"); }
		return retval;

	}
	// $ANTLR end "list_expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:400:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 42);
		TraceIn("lambda_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal315 = default(IToken);
		IToken char_literal317 = default(IToken);
		IToken string_literal318 = default(IToken);
		IToken string_literal320 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr319 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr321 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr322 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree char_literal317_tree = default(CommonTree);
		CommonTree string_literal318_tree = default(CommonTree);
		CommonTree string_literal320_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(400, 1);
		try
		{
			// SugarCpp.g:401:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt118=2;
			try { DebugEnterDecision(118, false);
			try
			{
				alt118 = dfa118.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:401:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(401, 4);
				char_literal315=(IToken)Match(input,82,Follow._82_in_lambda_expr3242);  
				stream_82.Add(char_literal315);

				DebugLocation(401, 8);
				// SugarCpp.g:401:8: ( func_args )?
				int alt116=2;
				try { DebugEnterSubRule(116);
				try { DebugEnterDecision(116, false);
				int LA116_0 = input.LA(1);

				if ((LA116_0==IDENT||LA116_0==101))
				{
					alt116 = 1;
				}
				} finally { DebugExitDecision(116); }
				switch (alt116)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:401:8: func_args
					{
					DebugLocation(401, 8);
					PushFollow(Follow._func_args_in_lambda_expr3244);
					func_args316=func_args();
					PopFollow();

					stream_func_args.Add(func_args316.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(116); }

				DebugLocation(401, 19);
				char_literal317=(IToken)Match(input,83,Follow._83_in_lambda_expr3247);  
				stream_83.Add(char_literal317);

				DebugLocation(401, 23);
				// SugarCpp.g:401:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt117=2;
				try { DebugEnterSubRule(117);
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==93))
				{
					alt117 = 1;
				}
				else if ((LA117_0==110))
				{
					alt117 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 117, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(117); }
				switch (alt117)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:401:25: '->' expr
					{
					DebugLocation(401, 25);
					string_literal318=(IToken)Match(input,93,Follow._93_in_lambda_expr3251);  
					stream_93.Add(string_literal318);

					DebugLocation(401, 30);
					PushFollow(Follow._expr_in_lambda_expr3253);
					expr319=expr();
					PopFollow();

					stream_expr.Add(expr319.Tree);


					{
					// AST REWRITE
					// elements: expr, 93, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 401:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(401, 39);
						// SugarCpp.g:401:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(401, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(401, 53);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(401, 58);
						// SugarCpp.g:401:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(401, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(401, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:402:25: '=>' expr
					{
					DebugLocation(402, 25);
					string_literal320=(IToken)Match(input,110,Follow._110_in_lambda_expr3293);  
					stream_110.Add(string_literal320);

					DebugLocation(402, 30);
					PushFollow(Follow._expr_in_lambda_expr3295);
					expr321=expr();
					PopFollow();

					stream_expr.Add(expr321.Tree);


					{
					// AST REWRITE
					// elements: 110, expr, func_args
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 402:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(402, 39);
						// SugarCpp.g:402:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(402, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(402, 53);
						adaptor.AddChild(root_1, stream_110.NextNode());
						DebugLocation(402, 58);
						// SugarCpp.g:402:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(402, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(402, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(117); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:403:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(403, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr3315);
				modify_expr322=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr322.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 42);
			LeaveRule("lambda_expr", 42);
			LeaveRule_lambda_expr();
		}
		DebugLocation(404, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:406:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 43);
		TraceIn("modify_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set323 = default(IToken);

		CommonTree set323_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(406, 91);
		try
		{
			// SugarCpp.g:406:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(406, 15);

			set323=(IToken)input.LT(1);
			if (input.LA(1)==78||input.LA(1)==81||input.LA(1)==85||input.LA(1)==88||input.LA(1)==92||input.LA(1)==98||input.LA(1)==106||input.LA(1)==108||input.LA(1)==114||input.LA(1)==121||input.LA(1)==158)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set323));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 43);
			LeaveRule("modify_expr_op", 43);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(406, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:407:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 44);
		TraceIn("modify_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set325 = default(IToken);
		IToken char_literal327 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr324 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr328 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set325_tree = default(CommonTree);
		CommonTree char_literal327_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(407, 1);
		try
		{
			// SugarCpp.g:408:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:408:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(408, 4);
			PushFollow(Follow._cond_expr_in_modify_expr3372);
			cond_expr324=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr324.Tree);
			DebugLocation(408, 14);
			// SugarCpp.g:408:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt120=3;
			try { DebugEnterSubRule(120);
			try { DebugEnterDecision(120, false);
			int LA120_0 = input.LA(1);

			if ((LA120_0==78||LA120_0==81||LA120_0==85||LA120_0==88||LA120_0==92||LA120_0==98||LA120_0==101||LA120_0==106||LA120_0==114||LA120_0==121||LA120_0==158))
			{
				alt120 = 1;
			}
			else if ((LA120_0==108))
			{
				alt120 = 2;
			}
			} finally { DebugExitDecision(120); }
			switch (alt120)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:408:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(408, 94);

				set325=(IToken)input.LT(1);
				set325=(IToken)input.LT(1);
				if (input.LA(1)==78||input.LA(1)==81||input.LA(1)==85||input.LA(1)==88||input.LA(1)==92||input.LA(1)==98||input.LA(1)==101||input.LA(1)==106||input.LA(1)==114||input.LA(1)==121||input.LA(1)==158)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set325), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(408, 96);
				PushFollow(Follow._cond_expr_in_modify_expr3421);
				cond_expr326=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr326.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:409:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(409, 7);
				// SugarCpp.g:409:7: ( '=' ^ cond_expr )+
				int cnt119=0;
				try { DebugEnterSubRule(119);
				while (true)
				{
					int alt119=2;
					try { DebugEnterDecision(119, false);
					int LA119_0 = input.LA(1);

					if ((LA119_0==108))
					{
						alt119 = 1;
					}


					} finally { DebugExitDecision(119); }
					switch (alt119)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:409:8: '=' ^ cond_expr
						{
						DebugLocation(409, 11);
						char_literal327=(IToken)Match(input,108,Follow._108_in_modify_expr3430); 
						char_literal327_tree = (CommonTree)adaptor.Create(char_literal327);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal327_tree, root_0);
						DebugLocation(409, 13);
						PushFollow(Follow._cond_expr_in_modify_expr3433);
						cond_expr328=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr328.Tree);

						}
						break;

					default:
						if (cnt119 >= 1)
							goto loop119;

						EarlyExitException eee119 = new EarlyExitException( 119, input );
						DebugRecognitionException(eee119);
						throw eee119;
					}
					cnt119++;
				}
				loop119:
					;

				} finally { DebugExitSubRule(119); }


				}
				break;

			}
			} finally { DebugExitSubRule(120); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 44);
			LeaveRule("modify_expr", 44);
			LeaveRule_modify_expr();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:412:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 45);
		TraceIn("cond_expr_item", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr329 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(412, 24);
		try
		{
			// SugarCpp.g:412:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:412:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(412, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item3446);
			or_expr329=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr329.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 45);
			LeaveRule("cond_expr_item", 45);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(412, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:413:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 46);
		TraceIn("cond_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal330 = default(IToken);
		IToken char_literal331 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree char_literal331_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(413, 1);
		try
		{
			// SugarCpp.g:414:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:414:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(414, 4);
			// SugarCpp.g:414:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:414:5: a= or_expr
			{
			DebugLocation(414, 6);
			PushFollow(Follow._or_expr_in_cond_expr3458);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 414:15: -> $a
			{
				DebugLocation(414, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(414, 22);
			// SugarCpp.g:414:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt123=2;
			try { DebugEnterSubRule(123);
			try { DebugEnterDecision(123, false);
			int LA123_0 = input.LA(1);

			if ((LA123_0==115))
			{
				alt123 = 1;
			}
			} finally { DebugExitDecision(123); }
			switch (alt123)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:414:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(414, 23);
				char_literal330=(IToken)Match(input,115,Follow._115_in_cond_expr3467);  
				stream_115.Add(char_literal330);

				DebugLocation(414, 27);
				// SugarCpp.g:414:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt122=2;
				try { DebugEnterSubRule(122);
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==IDENT||LA122_0==NUMBER||LA122_0==STRING||LA122_0==75||LA122_0==80||LA122_0==82||LA122_0==84||(LA122_0>=86 && LA122_0<=87)||(LA122_0>=90 && LA122_0<=91)||LA122_0==117||LA122_0==144||LA122_0==160))
				{
					alt122 = 1;
				}
				else if ((LA122_0==DEDENT||LA122_0==INDENT||LA122_0==NEWLINE||LA122_0==78||LA122_0==81||LA122_0==83||LA122_0==85||(LA122_0>=88 && LA122_0<=89)||LA122_0==92||LA122_0==98||(LA122_0>=101 && LA122_0<=102)||LA122_0==106||LA122_0==108||LA122_0==114||LA122_0==119||LA122_0==121||LA122_0==125||LA122_0==130||(LA122_0>=134 && LA122_0<=136)||LA122_0==138||LA122_0==141||(LA122_0>=147 && LA122_0<=148)||LA122_0==151||LA122_0==153||(LA122_0>=155 && LA122_0<=156)||LA122_0==158))
				{
					alt122 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 122, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(122); }
				switch (alt122)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:414:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(414, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr3473);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(414, 46);
					// SugarCpp.g:414:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt121=2;
					try { DebugEnterSubRule(121);
					try { DebugEnterDecision(121, false);
					int LA121_0 = input.LA(1);

					if ((LA121_0==99))
					{
						alt121 = 1;
					}
					else if ((LA121_0==DEDENT||LA121_0==INDENT||LA121_0==NEWLINE||LA121_0==78||LA121_0==81||LA121_0==83||LA121_0==85||(LA121_0>=88 && LA121_0<=89)||LA121_0==92||LA121_0==98||(LA121_0>=101 && LA121_0<=102)||LA121_0==106||LA121_0==108||LA121_0==114||LA121_0==119||LA121_0==121||LA121_0==125||LA121_0==130||(LA121_0>=134 && LA121_0<=136)||LA121_0==138||LA121_0==141||(LA121_0>=147 && LA121_0<=148)||LA121_0==151||LA121_0==153||(LA121_0>=155 && LA121_0<=156)||LA121_0==158))
					{
						alt121 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(121); }
					switch (alt121)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:414:48: ':' b= cond_expr_item
						{
						DebugLocation(414, 48);
						char_literal331=(IToken)Match(input,99,Follow._99_in_cond_expr3477);  
						stream_99.Add(char_literal331);

						DebugLocation(414, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr3481);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: a, b, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 414:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(414, 72);
							// SugarCpp.g:414:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(414, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(414, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(414, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(414, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:415:17: 
						{

						{
						// AST REWRITE
						// elements: cond_expr, a
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 415:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(415, 20);
							// SugarCpp.g:415:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(415, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(415, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(415, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(121); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:417:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 417:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(417, 14);
						// SugarCpp.g:417:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(417, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(417, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(122); }


				}
				break;

			}
			} finally { DebugExitSubRule(123); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 46);
			LeaveRule("cond_expr", 46);
			LeaveRule_cond_expr();
		}
		DebugLocation(419, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_op();
	partial void LeaveRule_or_op();

	// $ANTLR start "or_op"
	// SugarCpp.g:421:1: or_op : ( '||' | 'or' );
	[GrammarRule("or_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_op()
	{
		EnterRule_or_op();
		EnterRule("or_op", 47);
		TraceIn("or_op", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set332 = default(IToken);

		CommonTree set332_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "or_op");
		DebugLocation(421, 19);
		try
		{
			// SugarCpp.g:421:6: ( '||' | 'or' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(421, 6);

			set332=(IToken)input.LT(1);
			if (input.LA(1)==145||input.LA(1)==159)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set332));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_op", 47);
			LeaveRule("or_op", 47);
			LeaveRule_or_op();
		}
		DebugLocation(421, 19);
		} finally { DebugExitRule(GrammarFileName, "or_op"); }
		return retval;

	}
	// $ANTLR end "or_op"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:422:1: or_expr : (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 48);
		TraceIn("or_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		RewriteRuleSubtreeStream stream_or_op=new RewriteRuleSubtreeStream(adaptor,"rule or_op");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(422, 1);
		try
		{
			// SugarCpp.g:423:2: ( (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:423:4: (a= and_expr -> $a) (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			{
			DebugLocation(423, 4);
			// SugarCpp.g:423:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:423:5: a= and_expr
			{
			DebugLocation(423, 6);
			PushFollow(Follow._and_expr_in_or_expr3595);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 423:16: -> $a
			{
				DebugLocation(423, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(423, 23);
			// SugarCpp.g:423:23: (op= or_op b= and_expr -> ^( Expr_Bin $op $or_expr $b) )*
			try { DebugEnterSubRule(124);
			while (true)
			{
				int alt124=2;
				try { DebugEnterDecision(124, false);
				int LA124_0 = input.LA(1);

				if ((LA124_0==145||LA124_0==159))
				{
					alt124 = 1;
				}


				} finally { DebugExitDecision(124); }
				switch ( alt124 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:423:24: op= or_op b= and_expr
					{
					DebugLocation(423, 26);
					PushFollow(Follow._or_op_in_or_expr3606);
					op=or_op();
					PopFollow();

					stream_or_op.Add(op.Tree);
					DebugLocation(423, 34);
					PushFollow(Follow._and_expr_in_or_expr3610);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, op, or_expr
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 423:44: -> ^( Expr_Bin $op $or_expr $b)
					{
						DebugLocation(423, 47);
						// SugarCpp.g:423:47: ^( Expr_Bin $op $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(423, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(423, 59);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(423, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(423, 72);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop124;
				}
			}

			loop124:
				;

			} finally { DebugExitSubRule(124); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 48);
			LeaveRule("or_expr", 48);
			LeaveRule_or_expr();
		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_op();
	partial void LeaveRule_and_op();

	// $ANTLR start "and_op"
	// SugarCpp.g:426:1: and_op : ( '&&' | 'and' );
	[GrammarRule("and_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_op()
	{
		EnterRule_and_op();
		EnterRule("and_op", 49);
		TraceIn("and_op", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set333 = default(IToken);

		CommonTree set333_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "and_op");
		DebugLocation(426, 21);
		try
		{
			// SugarCpp.g:426:7: ( '&&' | 'and' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(426, 7);

			set333=(IToken)input.LT(1);
			if (input.LA(1)==79||input.LA(1)==123)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set333));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_op", 49);
			LeaveRule("and_op", 49);
			LeaveRule_and_op();
		}
		DebugLocation(426, 21);
		} finally { DebugExitRule(GrammarFileName, "and_op"); }
		return retval;

	}
	// $ANTLR end "and_op"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:427:1: and_expr : (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 50);
		TraceIn("and_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		RewriteRuleSubtreeStream stream_and_op=new RewriteRuleSubtreeStream(adaptor,"rule and_op");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(427, 1);
		try
		{
			// SugarCpp.g:428:2: ( (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:428:4: (a= bit_or -> $a) (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			{
			DebugLocation(428, 4);
			// SugarCpp.g:428:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:428:5: a= bit_or
			{
			DebugLocation(428, 6);
			PushFollow(Follow._bit_or_in_and_expr3652);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 428:14: -> $a
			{
				DebugLocation(428, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(428, 21);
			// SugarCpp.g:428:21: (op= and_op b= bit_or -> ^( Expr_Bin $op $and_expr $b) )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=2;
				try { DebugEnterDecision(125, false);
				int LA125_0 = input.LA(1);

				if ((LA125_0==79||LA125_0==123))
				{
					alt125 = 1;
				}


				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:428:22: op= and_op b= bit_or
					{
					DebugLocation(428, 24);
					PushFollow(Follow._and_op_in_and_expr3663);
					op=and_op();
					PopFollow();

					stream_and_op.Add(op.Tree);
					DebugLocation(428, 33);
					PushFollow(Follow._bit_or_in_and_expr3667);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, b, op
					// token labels: 
					// rule labels: retval, op, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 428:41: -> ^( Expr_Bin $op $and_expr $b)
					{
						DebugLocation(428, 44);
						// SugarCpp.g:428:44: ^( Expr_Bin $op $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(428, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(428, 56);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(428, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(428, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 50);
			LeaveRule("and_expr", 50);
			LeaveRule_and_expr();
		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:431:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 51);
		TraceIn("bit_or", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal334 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal334_tree = default(CommonTree);
		RewriteRuleITokenStream stream_157=new RewriteRuleITokenStream(adaptor,"token 157");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(431, 1);
		try
		{
			// SugarCpp.g:432:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:432:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(432, 4);
			// SugarCpp.g:432:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:432:5: a= bit_xor
			{
			DebugLocation(432, 6);
			PushFollow(Follow._bit_xor_in_bit_or3698);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 432:15: -> $a
			{
				DebugLocation(432, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(432, 22);
			// SugarCpp.g:432:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(126);
			while (true)
			{
				int alt126=2;
				try { DebugEnterDecision(126, false);
				int LA126_0 = input.LA(1);

				if ((LA126_0==157))
				{
					alt126 = 1;
				}


				} finally { DebugExitDecision(126); }
				switch ( alt126 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:432:23: '|' b= bit_xor
					{
					DebugLocation(432, 23);
					char_literal334=(IToken)Match(input,157,Follow._157_in_bit_or3707);  
					stream_157.Add(char_literal334);

					DebugLocation(432, 28);
					PushFollow(Follow._bit_xor_in_bit_or3711);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 157, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 432:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(432, 40);
						// SugarCpp.g:432:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(432, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(432, 51);
						adaptor.AddChild(root_1, stream_157.NextNode());
						DebugLocation(432, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(432, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop126;
				}
			}

			loop126:
				;

			} finally { DebugExitSubRule(126); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 51);
			LeaveRule("bit_or", 51);
			LeaveRule_bit_or();
		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:435:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 52);
		TraceIn("bit_xor", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal335 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal335_tree = default(CommonTree);
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(435, 1);
		try
		{
			// SugarCpp.g:436:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:436:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(436, 4);
			// SugarCpp.g:436:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:436:5: a= bit_and
			{
			DebugLocation(436, 6);
			PushFollow(Follow._bit_and_in_bit_xor3741);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 436:15: -> $a
			{
				DebugLocation(436, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(436, 22);
			// SugarCpp.g:436:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(127);
			while (true)
			{
				int alt127=2;
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==120))
				{
					alt127 = 1;
				}


				} finally { DebugExitDecision(127); }
				switch ( alt127 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:436:23: '^' b= bit_and
					{
					DebugLocation(436, 23);
					char_literal335=(IToken)Match(input,120,Follow._120_in_bit_xor3750);  
					stream_120.Add(char_literal335);

					DebugLocation(436, 28);
					PushFollow(Follow._bit_and_in_bit_xor3754);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 120
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 436:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(436, 40);
						// SugarCpp.g:436:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(436, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(436, 51);
						adaptor.AddChild(root_1, stream_120.NextNode());
						DebugLocation(436, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(436, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop127;
				}
			}

			loop127:
				;

			} finally { DebugExitSubRule(127); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 52);
			LeaveRule("bit_xor", 52);
			LeaveRule_bit_xor();
		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:439:1: bit_and : (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 53);
		TraceIn("bit_and", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal336 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal336_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(439, 1);
		try
		{
			// SugarCpp.g:440:2: ( (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:440:4: (a= cmp_expr -> $a) ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(440, 4);
			// SugarCpp.g:440:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:440:5: a= cmp_expr
			{
			DebugLocation(440, 6);
			PushFollow(Follow._cmp_expr_in_bit_and3784);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 440:16: -> $a
			{
				DebugLocation(440, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(440, 23);
			// SugarCpp.g:440:23: ( '&' b= cmp_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(128);
			while (true)
			{
				int alt128=2;
				try { DebugEnterDecision(128, false);
				int LA128_0 = input.LA(1);

				if ((LA128_0==80))
				{
					alt128 = 1;
				}


				} finally { DebugExitDecision(128); }
				switch ( alt128 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:440:24: '&' b= cmp_expr
					{
					DebugLocation(440, 24);
					char_literal336=(IToken)Match(input,80,Follow._80_in_bit_and3793);  
					stream_80.Add(char_literal336);

					DebugLocation(440, 29);
					PushFollow(Follow._cmp_expr_in_bit_and3797);
					b=cmp_expr();
					PopFollow();

					stream_cmp_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_and, 80
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 440:39: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(440, 42);
						// SugarCpp.g:440:42: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(440, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(440, 53);
						adaptor.AddChild(root_1, stream_80.NextNode());
						DebugLocation(440, 58);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(440, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop128;
				}
			}

			loop128:
				;

			} finally { DebugExitSubRule(128); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 53);
			LeaveRule("bit_and", 53);
			LeaveRule_bit_and();
		}
		DebugLocation(441, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_chain_op();
	partial void LeaveRule_chain_op();

	// $ANTLR start "chain_op"
	// SugarCpp.g:443:1: chain_op : ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("chain_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_op()
	{
		EnterRule_chain_op();
		EnterRule("chain_op", 54);
		TraceIn("chain_op", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set337 = default(IToken);

		CommonTree set337_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "chain_op");
		DebugLocation(443, 64);
		try
		{
			// SugarCpp.g:443:9: ( '<' | '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(443, 9);

			set337=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==103||input.LA(1)==107||input.LA(1)==109||(input.LA(1)>=111 && input.LA(1)<=112)||(input.LA(1)>=139 && input.LA(1)<=140))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set337));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_op", 54);
			LeaveRule("chain_op", 54);
			LeaveRule_chain_op();
		}
		DebugLocation(443, 64);
		} finally { DebugExitRule(GrammarFileName, "chain_op"); }
		return retval;

	}
	// $ANTLR end "chain_op"

	partial void EnterRule_no_less_op();
	partial void LeaveRule_no_less_op();

	// $ANTLR start "no_less_op"
	// SugarCpp.g:444:1: no_less_op : ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' );
	[GrammarRule("no_less_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> no_less_op()
	{
		EnterRule_no_less_op();
		EnterRule("no_less_op", 55);
		TraceIn("no_less_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set338 = default(IToken);

		CommonTree set338_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "no_less_op");
		DebugLocation(444, 60);
		try
		{
			// SugarCpp.g:444:11: ( '<=' | '>' | '>=' | '!=' | '==' | 'is' | 'isnt' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(444, 11);

			set338=(IToken)input.LT(1);
			if (input.LA(1)==76||input.LA(1)==107||input.LA(1)==109||(input.LA(1)>=111 && input.LA(1)<=112)||(input.LA(1)>=139 && input.LA(1)<=140))
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set338));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("no_less_op", 55);
			LeaveRule("no_less_op", 55);
			LeaveRule_no_less_op();
		}
		DebugLocation(444, 60);
		} finally { DebugExitRule(GrammarFileName, "no_less_op"); }
		return retval;

	}
	// $ANTLR end "no_less_op"

	partial void EnterRule_chain_list();
	partial void LeaveRule_chain_list();

	// $ANTLR start "chain_list"
	// SugarCpp.g:445:1: chain_list : ( chain_op infix_expr )+ ;
	[GrammarRule("chain_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> chain_list()
	{
		EnterRule_chain_list();
		EnterRule("chain_list", 56);
		TraceIn("chain_list", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> chain_op339 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_expr340 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "chain_list");
		DebugLocation(445, 35);
		try
		{
			// SugarCpp.g:445:11: ( ( chain_op infix_expr )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:445:13: ( chain_op infix_expr )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(445, 13);
			// SugarCpp.g:445:13: ( chain_op infix_expr )+
			int cnt129=0;
			try { DebugEnterSubRule(129);
			while (true)
			{
				int alt129=2;
				try { DebugEnterDecision(129, false);
				int LA129_0 = input.LA(1);

				if ((LA129_0==76||LA129_0==103||LA129_0==107||LA129_0==109||(LA129_0>=111 && LA129_0<=112)||(LA129_0>=139 && LA129_0<=140)))
				{
					alt129 = 1;
				}


				} finally { DebugExitDecision(129); }
				switch (alt129)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:445:14: chain_op infix_expr
					{
					DebugLocation(445, 14);
					PushFollow(Follow._chain_op_in_chain_list3889);
					chain_op339=chain_op();
					PopFollow();

					adaptor.AddChild(root_0, chain_op339.Tree);
					DebugLocation(445, 23);
					PushFollow(Follow._infix_expr_in_chain_list3891);
					infix_expr340=infix_expr();
					PopFollow();

					adaptor.AddChild(root_0, infix_expr340.Tree);

					}
					break;

				default:
					if (cnt129 >= 1)
						goto loop129;

					EarlyExitException eee129 = new EarlyExitException( 129, input );
					DebugRecognitionException(eee129);
					throw eee129;
				}
				cnt129++;
			}
			loop129:
				;

			} finally { DebugExitSubRule(129); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("chain_list", 56);
			LeaveRule("chain_list", 56);
			LeaveRule_chain_list();
		}
		DebugLocation(445, 35);
		} finally { DebugExitRule(GrammarFileName, "chain_list"); }
		return retval;

	}
	// $ANTLR end "chain_list"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:446:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) ) ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 57);
		TraceIn("cmp_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal341 = default(IToken);
		IToken char_literal343 = default(IToken);
		IToken char_literal344 = default(IToken);
		IToken char_literal346 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list345 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list347 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> chain_list348 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal341_tree = default(CommonTree);
		CommonTree char_literal343_tree = default(CommonTree);
		CommonTree char_literal344_tree = default(CommonTree);
		CommonTree char_literal346_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_chain_list=new RewriteRuleSubtreeStream(adaptor,"rule chain_list");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_no_less_op=new RewriteRuleSubtreeStream(adaptor,"rule no_less_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(446, 1);
		try
		{
			// SugarCpp.g:447:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:447:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )
			{
			DebugLocation(447, 4);
			// SugarCpp.g:447:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:447:5: a= infix_expr
			{
			DebugLocation(447, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3905);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 447:18: -> $a
			{
				DebugLocation(447, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(447, 25);
			// SugarCpp.g:447:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) |op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) ) )
			int alt134=2;
			try { DebugEnterSubRule(134);
			try { DebugEnterDecision(134, false);
			int LA134_0 = input.LA(1);

			if ((LA134_0==103))
			{
				alt134 = 1;
			}
			else if ((LA134_0==76||LA134_0==107||LA134_0==109||(LA134_0>=111 && LA134_0<=112)||(LA134_0>=139 && LA134_0<=140)))
			{
				alt134 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 134, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(134); }
			switch (alt134)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:447:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				{
				DebugLocation(447, 27);
				char_literal341=(IToken)Match(input,103,Follow._103_in_cmp_expr3915);  
				stream_103.Add(char_literal341);

				DebugLocation(447, 32);
				PushFollow(Follow._infix_expr_in_cmp_expr3919);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(447, 44);
				// SugarCpp.g:447:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | chain_list -> ^( Expr_Chain $cmp_expr '<' $b chain_list ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
				int alt132=3;
				try { DebugEnterSubRule(132);
				try { DebugEnterDecision(132, false);
				switch (input.LA(1))
				{
				case IDENT:
					{
					alt132 = 1;
					}
					break;
				case 111:
					{
					int LA132_2 = input.LA(2);

					if (((b.Tree.Token.Type == IDENT)))
					{
						alt132 = 1;
					}
					else if ((true))
					{
						alt132 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 132, 2, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					}
					break;
				case 76:
				case 103:
				case 107:
				case 109:
				case 112:
				case 139:
				case 140:
					{
					alt132 = 2;
					}
					break;
				case DEDENT:
				case INDENT:
				case NEWLINE:
				case 78:
				case 79:
				case 80:
				case 81:
				case 83:
				case 85:
				case 88:
				case 89:
				case 92:
				case 98:
				case 99:
				case 101:
				case 102:
				case 106:
				case 108:
				case 114:
				case 115:
				case 119:
				case 120:
				case 121:
				case 123:
				case 125:
				case 130:
				case 134:
				case 135:
				case 136:
				case 138:
				case 141:
				case 145:
				case 147:
				case 148:
				case 151:
				case 153:
				case 155:
				case 156:
				case 157:
				case 158:
				case 159:
					{
					alt132 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 132, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(132); }
				switch (alt132)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:447:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
					{
					DebugLocation(447, 46);
					if (!((b.Tree.Token.Type == IDENT)))
					{
						throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
					}
					DebugLocation(447, 76);
					// SugarCpp.g:447:76: ( ident )*
					try { DebugEnterSubRule(130);
					while (true)
					{
						int alt130=2;
						try { DebugEnterDecision(130, false);
						int LA130_0 = input.LA(1);

						if ((LA130_0==IDENT))
						{
							alt130 = 1;
						}


						} finally { DebugExitDecision(130); }
						switch ( alt130 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:447:76: ident
							{
							DebugLocation(447, 76);
							PushFollow(Follow._ident_in_cmp_expr3925);
							ident342=ident();
							PopFollow();

							stream_ident.Add(ident342.Tree);

							}
							break;

						default:
							goto loop130;
						}
					}

					loop130:
						;

					} finally { DebugExitSubRule(130); }

					DebugLocation(447, 83);
					char_literal343=(IToken)Match(input,111,Follow._111_in_cmp_expr3928);  
					stream_111.Add(char_literal343);

					DebugLocation(447, 87);
					char_literal344=(IToken)Match(input,82,Follow._82_in_cmp_expr3930);  
					stream_82.Add(char_literal344);

					DebugLocation(447, 91);
					// SugarCpp.g:447:91: ( expr_list )?
					int alt131=2;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0==IDENT||LA131_0==NUMBER||LA131_0==STRING||LA131_0==75||LA131_0==80||LA131_0==82||LA131_0==84||(LA131_0>=86 && LA131_0<=87)||(LA131_0>=90 && LA131_0<=91)||(LA131_0>=117 && LA131_0<=118)||LA131_0==144||LA131_0==160))
					{
						alt131 = 1;
					}
					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:447:91: expr_list
						{
						DebugLocation(447, 91);
						PushFollow(Follow._expr_list_in_cmp_expr3932);
						expr_list345=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list345.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(131); }

					DebugLocation(447, 102);
					char_literal346=(IToken)Match(input,83,Follow._83_in_cmp_expr3935);  
					stream_83.Add(char_literal346);



					{
					// AST REWRITE
					// elements: expr_list, cmp_expr, b, ident
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 447:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
					{
						DebugLocation(447, 109);
						// SugarCpp.g:447:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(447, 111);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(447, 122);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(447, 131);
						// SugarCpp.g:447:131: ^( Generic_Patameters $b ( ident )* )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(447, 133);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

						DebugLocation(447, 153);
						adaptor.AddChild(root_2, stream_b.NextTree());
						DebugLocation(447, 155);
						// SugarCpp.g:447:155: ( ident )*
						while ( stream_ident.HasNext )
						{
							DebugLocation(447, 155);
							adaptor.AddChild(root_2, stream_ident.NextTree());

						}
						stream_ident.Reset();

						adaptor.AddChild(root_1, root_2);
						}
						DebugLocation(447, 163);
						// SugarCpp.g:447:163: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(447, 163);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:448:46: chain_list
					{
					DebugLocation(448, 46);
					PushFollow(Follow._chain_list_in_cmp_expr4004);
					chain_list347=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list347.Tree);


					{
					// AST REWRITE
					// elements: chain_list, 103, b, cmp_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 448:57: -> ^( Expr_Chain $cmp_expr '<' $b chain_list )
					{
						DebugLocation(448, 60);
						// SugarCpp.g:448:60: ^( Expr_Chain $cmp_expr '<' $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(448, 62);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(448, 75);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(448, 84);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(448, 89);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(448, 91);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:449:16: 
					{

					{
					// AST REWRITE
					// elements: b, cmp_expr, 103
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 449:16: -> ^( Expr_Bin '<' $cmp_expr $b)
					{
						DebugLocation(449, 19);
						// SugarCpp.g:449:19: ^( Expr_Bin '<' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(449, 21);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(449, 30);
						adaptor.AddChild(root_1, stream_103.NextNode());
						DebugLocation(449, 35);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(449, 45);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(132); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:450:27: op= no_less_op b= infix_expr ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				{
				DebugLocation(450, 29);
				PushFollow(Follow._no_less_op_in_cmp_expr4081);
				op=no_less_op();
				PopFollow();

				stream_no_less_op.Add(op.Tree);
				DebugLocation(450, 42);
				PushFollow(Follow._infix_expr_in_cmp_expr4085);
				b=infix_expr();
				PopFollow();

				stream_infix_expr.Add(b.Tree);
				DebugLocation(450, 54);
				// SugarCpp.g:450:54: ( chain_list -> ^( Expr_Chain $cmp_expr $op $b chain_list ) | -> ^( Expr_Bin $op $cmp_expr $b) )
				int alt133=2;
				try { DebugEnterSubRule(133);
				try { DebugEnterDecision(133, false);
				int LA133_0 = input.LA(1);

				if ((LA133_0==76||LA133_0==103||LA133_0==107||LA133_0==109||(LA133_0>=111 && LA133_0<=112)||(LA133_0>=139 && LA133_0<=140)))
				{
					alt133 = 1;
				}
				else if ((LA133_0==DEDENT||LA133_0==INDENT||LA133_0==NEWLINE||(LA133_0>=78 && LA133_0<=81)||LA133_0==83||LA133_0==85||(LA133_0>=88 && LA133_0<=89)||LA133_0==92||(LA133_0>=98 && LA133_0<=99)||(LA133_0>=101 && LA133_0<=102)||LA133_0==106||LA133_0==108||(LA133_0>=114 && LA133_0<=115)||(LA133_0>=119 && LA133_0<=121)||LA133_0==123||LA133_0==125||LA133_0==130||(LA133_0>=134 && LA133_0<=136)||LA133_0==138||LA133_0==141||LA133_0==145||(LA133_0>=147 && LA133_0<=148)||LA133_0==151||LA133_0==153||(LA133_0>=155 && LA133_0<=159)))
				{
					alt133 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 133, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(133); }
				switch (alt133)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:450:56: chain_list
					{
					DebugLocation(450, 56);
					PushFollow(Follow._chain_list_in_cmp_expr4089);
					chain_list348=chain_list();
					PopFollow();

					stream_chain_list.Add(chain_list348.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, op, chain_list, b
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 450:67: -> ^( Expr_Chain $cmp_expr $op $b chain_list )
					{
						DebugLocation(450, 70);
						// SugarCpp.g:450:70: ^( Expr_Chain $cmp_expr $op $b chain_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(450, 72);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Chain, "Expr_Chain"), root_1);

						DebugLocation(450, 85);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(450, 95);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(450, 99);
						adaptor.AddChild(root_1, stream_b.NextTree());
						DebugLocation(450, 101);
						adaptor.AddChild(root_1, stream_chain_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:451:17: 
					{

					{
					// AST REWRITE
					// elements: op, b, cmp_expr
					// token labels: 
					// rule labels: retval, b, op
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
					RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 451:17: -> ^( Expr_Bin $op $cmp_expr $b)
					{
						DebugLocation(451, 20);
						// SugarCpp.g:451:20: ^( Expr_Bin $op $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(451, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(451, 32);
						adaptor.AddChild(root_1, stream_op.NextTree());
						DebugLocation(451, 36);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(451, 46);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(133); }


				}
				break;

			}
			} finally { DebugExitSubRule(134); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 57);
			LeaveRule("cmp_expr", 57);
			LeaveRule_cmp_expr();
		}
		DebugLocation(454, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:456:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 58);
		TraceIn("infix_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func349 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(456, 1);
		try
		{
			// SugarCpp.g:457:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:457:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(457, 4);
			// SugarCpp.g:457:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:457:5: a= shift_expr
			{
			DebugLocation(457, 6);
			PushFollow(Follow._shift_expr_in_infix_expr4179);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 457:18: -> $a
			{
				DebugLocation(457, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(457, 25);
			// SugarCpp.g:457:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(135);
			while (true)
			{
				int alt135=2;
				try { DebugEnterDecision(135, false);
				int LA135_0 = input.LA(1);

				if ((LA135_0==122))
				{
					alt135 = 1;
				}


				} finally { DebugExitDecision(135); }
				switch ( alt135 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:457:27: infix_func b= shift_expr
					{
					DebugLocation(457, 27);
					PushFollow(Follow._infix_func_in_infix_expr4189);
					infix_func349=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func349.Tree);
					DebugLocation(457, 39);
					PushFollow(Follow._shift_expr_in_infix_expr4193);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 457:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(457, 55);
						// SugarCpp.g:457:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(457, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(457, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(457, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(457, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop135;
				}
			}

			loop135:
				;

			} finally { DebugExitSubRule(135); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 58);
			LeaveRule("infix_expr", 58);
			LeaveRule_infix_expr();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:460:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 59);
		TraceIn("shift_expr_op", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set350 = default(IToken);

		CommonTree set350_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(460, 27);
		try
		{
			// SugarCpp.g:460:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(460, 14);

			set350=(IToken)input.LT(1);
			if (input.LA(1)==105||input.LA(1)==113)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set350));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 59);
			LeaveRule("shift_expr_op", 59);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(460, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:461:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 60);
		TraceIn("shift_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op351 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(461, 1);
		try
		{
			// SugarCpp.g:462:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:462:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(462, 4);
			// SugarCpp.g:462:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:462:5: a= add_expr
			{
			DebugLocation(462, 6);
			PushFollow(Follow._add_expr_in_shift_expr4236);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 462:16: -> $a
			{
				DebugLocation(462, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(462, 23);
			// SugarCpp.g:462:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==105||LA136_0==113))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:462:24: shift_expr_op b= add_expr
					{
					DebugLocation(462, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr4245);
					shift_expr_op351=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op351.Tree);
					DebugLocation(462, 39);
					PushFollow(Follow._add_expr_in_shift_expr4249);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr, shift_expr_op
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 462:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(462, 52);
						// SugarCpp.g:462:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(462, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(462, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(462, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(462, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 60);
			LeaveRule("shift_expr", 60);
			LeaveRule_shift_expr();
		}
		DebugLocation(463, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:465:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 61);
		TraceIn("add_expr", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal352 = default(IToken);
		IToken char_literal353 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal352_tree = default(CommonTree);
		CommonTree char_literal353_tree = default(CommonTree);
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(465, 1);
		try
		{
			// SugarCpp.g:466:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:466:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(466, 4);
			// SugarCpp.g:466:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:466:5: a= mul_expr
			{
			DebugLocation(466, 6);
			PushFollow(Follow._mul_expr_in_add_expr4279);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 466:16: -> $a
			{
				DebugLocation(466, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(466, 23);
			// SugarCpp.g:466:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(137);
			while (true)
			{
				int alt137=3;
				try { DebugEnterDecision(137, false);
				int LA137_0 = input.LA(1);

				if ((LA137_0==86))
				{
					alt137 = 1;
				}
				else if ((LA137_0==90))
				{
					alt137 = 2;
				}


				} finally { DebugExitDecision(137); }
				switch ( alt137 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:466:25: '+' b= mul_expr
					{
					DebugLocation(466, 25);
					char_literal352=(IToken)Match(input,86,Follow._86_in_add_expr4289);  
					stream_86.Add(char_literal352);

					DebugLocation(466, 30);
					PushFollow(Follow._mul_expr_in_add_expr4293);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, b, 86
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 466:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(466, 43);
						// SugarCpp.g:466:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(466, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(466, 54);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(466, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(466, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:467:10: '-' b= mul_expr
					{
					DebugLocation(467, 10);
					char_literal353=(IToken)Match(input,90,Follow._90_in_add_expr4318);  
					stream_90.Add(char_literal353);

					DebugLocation(467, 15);
					PushFollow(Follow._mul_expr_in_add_expr4322);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 90, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 467:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(467, 28);
						// SugarCpp.g:467:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(467, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(467, 39);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(467, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(467, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop137;
				}
			}

			loop137:
				;

			} finally { DebugExitSubRule(137); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 61);
			LeaveRule("add_expr", 61);
			LeaveRule_add_expr();
		}
		DebugLocation(469, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:471:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 62);
		TraceIn("mul_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal354 = default(IToken);
		IToken char_literal355 = default(IToken);
		IToken char_literal356 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal354_tree = default(CommonTree);
		CommonTree char_literal355_tree = default(CommonTree);
		CommonTree char_literal356_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(471, 1);
		try
		{
			// SugarCpp.g:472:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:472:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(472, 4);
			// SugarCpp.g:472:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:472:5: a= selector_expr
			{
			DebugLocation(472, 6);
			PushFollow(Follow._selector_expr_in_mul_expr4360);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 472:21: -> $a
			{
				DebugLocation(472, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(472, 28);
			// SugarCpp.g:472:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(138);
			while (true)
			{
				int alt138=4;
				try { DebugEnterDecision(138, false);
				switch (input.LA(1))
				{
				case 84:
					{
					alt138 = 1;
					}
					break;
				case 97:
					{
					alt138 = 2;
					}
					break;
				case 77:
					{
					alt138 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(138); }
				switch ( alt138 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:472:30: '*' b= selector_expr
					{
					DebugLocation(472, 30);
					char_literal354=(IToken)Match(input,84,Follow._84_in_mul_expr4370);  
					stream_84.Add(char_literal354);

					DebugLocation(472, 35);
					PushFollow(Follow._selector_expr_in_mul_expr4374);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 84, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 472:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(472, 53);
						// SugarCpp.g:472:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(472, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(472, 64);
						adaptor.AddChild(root_1, stream_84.NextNode());
						DebugLocation(472, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(472, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:473:15: '/' b= selector_expr
					{
					DebugLocation(473, 15);
					char_literal355=(IToken)Match(input,97,Follow._97_in_mul_expr4404);  
					stream_97.Add(char_literal355);

					DebugLocation(473, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4408);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 97, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 473:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(473, 38);
						// SugarCpp.g:473:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(473, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(473, 49);
						adaptor.AddChild(root_1, stream_97.NextNode());
						DebugLocation(473, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(473, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:474:15: '%' b= selector_expr
					{
					DebugLocation(474, 15);
					char_literal356=(IToken)Match(input,77,Follow._77_in_mul_expr4438);  
					stream_77.Add(char_literal356);

					DebugLocation(474, 20);
					PushFollow(Follow._selector_expr_in_mul_expr4442);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 77, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 474:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(474, 38);
						// SugarCpp.g:474:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(474, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(474, 49);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(474, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(474, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop138;
				}
			}

			loop138:
				;

			} finally { DebugExitSubRule(138); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 62);
			LeaveRule("mul_expr", 62);
			LeaveRule_mul_expr();
		}
		DebugLocation(476, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:478:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 63);
		TraceIn("selector_expr", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal357 = default(IToken);
		IToken string_literal358 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal357_tree = default(CommonTree);
		CommonTree string_literal358_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(478, 1);
		try
		{
			// SugarCpp.g:479:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:479:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(479, 4);
			// SugarCpp.g:479:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:479:5: a= cast_expr
			{
			DebugLocation(479, 6);
			PushFollow(Follow._cast_expr_in_selector_expr4485);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 479:17: -> $a
			{
				DebugLocation(479, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(479, 24);
			// SugarCpp.g:479:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(139);
			while (true)
			{
				int alt139=3;
				try { DebugEnterDecision(139, false);
				int LA139_0 = input.LA(1);

				if ((LA139_0==94))
				{
					alt139 = 1;
				}
				else if ((LA139_0==96))
				{
					alt139 = 2;
				}


				} finally { DebugExitDecision(139); }
				switch ( alt139 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:479:26: '->*' b= ident
					{
					DebugLocation(479, 26);
					string_literal357=(IToken)Match(input,94,Follow._94_in_selector_expr4495);  
					stream_94.Add(string_literal357);

					DebugLocation(479, 33);
					PushFollow(Follow._ident_in_selector_expr4499);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 94, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 479:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(479, 43);
						// SugarCpp.g:479:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(479, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(479, 57);
						adaptor.AddChild(root_1, stream_94.NextNode());
						DebugLocation(479, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(479, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:480:11: '.*' b= ident
					{
					DebugLocation(480, 11);
					string_literal358=(IToken)Match(input,96,Follow._96_in_selector_expr4525);  
					stream_96.Add(string_literal358);

					DebugLocation(480, 18);
					PushFollow(Follow._ident_in_selector_expr4530);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 96, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 480:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(480, 28);
						// SugarCpp.g:480:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(480, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(480, 42);
						adaptor.AddChild(root_1, stream_96.NextNode());
						DebugLocation(480, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(480, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop139;
				}
			}

			loop139:
				;

			} finally { DebugExitSubRule(139); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 63);
			LeaveRule("selector_expr", 63);
			LeaveRule_selector_expr();
		}
		DebugLocation(482, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:484:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 64);
		TraceIn("cast_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal359 = default(IToken);
		IToken char_literal360 = default(IToken);
		IToken char_literal362 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name361 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal359_tree = default(CommonTree);
		CommonTree char_literal360_tree = default(CommonTree);
		CommonTree char_literal362_tree = default(CommonTree);
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(484, 1);
		try
		{
			// SugarCpp.g:485:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:485:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(485, 4);
			// SugarCpp.g:485:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:485:5: a= prefix_expr
			{
			DebugLocation(485, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4570);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 485:19: -> $a
			{
				DebugLocation(485, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(485, 26);
			// SugarCpp.g:485:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt140=2;
			try { DebugEnterSubRule(140);
			try { DebugEnterDecision(140, false);
			int LA140_0 = input.LA(1);

			if ((LA140_0==124))
			{
				alt140 = 1;
			}
			} finally { DebugExitDecision(140); }
			switch (alt140)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:485:27: 'as' '(' type_name ')'
				{
				DebugLocation(485, 27);
				string_literal359=(IToken)Match(input,124,Follow._124_in_cast_expr4579);  
				stream_124.Add(string_literal359);

				DebugLocation(485, 32);
				char_literal360=(IToken)Match(input,82,Follow._82_in_cast_expr4581);  
				stream_82.Add(char_literal360);

				DebugLocation(485, 36);
				PushFollow(Follow._type_name_in_cast_expr4583);
				type_name361=type_name();
				PopFollow();

				stream_type_name.Add(type_name361.Tree);
				DebugLocation(485, 46);
				char_literal362=(IToken)Match(input,83,Follow._83_in_cast_expr4585);  
				stream_83.Add(char_literal362);



				{
				// AST REWRITE
				// elements: type_name, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 485:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(485, 53);
					// SugarCpp.g:485:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(485, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(485, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(485, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(140); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 64);
			LeaveRule("cast_expr", 64);
			LeaveRule_cast_expr();
		}
		DebugLocation(486, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:488:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 65);
		TraceIn("prefix_expr_op", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set363 = default(IToken);

		CommonTree set363_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(488, 63);
		try
		{
			// SugarCpp.g:488:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(488, 15);

			set363=(IToken)input.LT(1);
			if (input.LA(1)==75||input.LA(1)==80||input.LA(1)==84||(input.LA(1)>=86 && input.LA(1)<=87)||(input.LA(1)>=90 && input.LA(1)<=91)||input.LA(1)==160)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set363));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 65);
			LeaveRule("prefix_expr_op", 65);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(488, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:489:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 66);
		TraceIn("prefix_expr", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal366 = default(IToken);
		IToken char_literal368 = default(IToken);
		IToken char_literal370 = default(IToken);
		IToken char_literal371 = default(IToken);
		IToken char_literal373 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op364 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr365 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name367 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list369 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list372 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr374 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal366_tree = default(CommonTree);
		CommonTree char_literal368_tree = default(CommonTree);
		CommonTree char_literal370_tree = default(CommonTree);
		CommonTree char_literal371_tree = default(CommonTree);
		CommonTree char_literal373_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(489, 1);
		try
		{
			// SugarCpp.g:490:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt143=3;
			try { DebugEnterDecision(143, false);
			switch (input.LA(1))
			{
			case 75:
			case 80:
			case 84:
			case 86:
			case 87:
			case 90:
			case 91:
			case 160:
				{
				alt143 = 1;
				}
				break;
			case 144:
				{
				alt143 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 82:
			case 117:
				{
				alt143 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 143, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(143); }
			switch (alt143)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:490:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(490, 4);
				// SugarCpp.g:490:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:490:5: prefix_expr_op prefix_expr
				{
				DebugLocation(490, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4643);
				prefix_expr_op364=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op364.Tree);
				DebugLocation(490, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4645);
				prefix_expr365=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr365.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr, prefix_expr_op
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 490:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(490, 36);
					// SugarCpp.g:490:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(490, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(490, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(490, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:491:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(491, 4);
				string_literal366=(IToken)Match(input,144,Follow._144_in_prefix_expr4661);  
				stream_144.Add(string_literal366);

				DebugLocation(491, 10);
				PushFollow(Follow._type_name_in_prefix_expr4663);
				type_name367=type_name();
				PopFollow();

				stream_type_name.Add(type_name367.Tree);
				DebugLocation(491, 20);
				// SugarCpp.g:491:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt142=2;
				try { DebugEnterSubRule(142);
				try { DebugEnterDecision(142, false);
				int LA142_0 = input.LA(1);

				if ((LA142_0==82))
				{
					alt142 = 1;
				}
				else if ((LA142_0==118))
				{
					alt142 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 142, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(142); }
				switch (alt142)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:491:22: '(' ( expr_list )? ')'
					{
					DebugLocation(491, 22);
					char_literal368=(IToken)Match(input,82,Follow._82_in_prefix_expr4667);  
					stream_82.Add(char_literal368);

					DebugLocation(491, 26);
					// SugarCpp.g:491:26: ( expr_list )?
					int alt141=2;
					try { DebugEnterSubRule(141);
					try { DebugEnterDecision(141, false);
					int LA141_0 = input.LA(1);

					if ((LA141_0==IDENT||LA141_0==NUMBER||LA141_0==STRING||LA141_0==75||LA141_0==80||LA141_0==82||LA141_0==84||(LA141_0>=86 && LA141_0<=87)||(LA141_0>=90 && LA141_0<=91)||(LA141_0>=117 && LA141_0<=118)||LA141_0==144||LA141_0==160))
					{
						alt141 = 1;
					}
					} finally { DebugExitDecision(141); }
					switch (alt141)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:491:26: expr_list
						{
						DebugLocation(491, 26);
						PushFollow(Follow._expr_list_in_prefix_expr4669);
						expr_list369=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list369.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(141); }

					DebugLocation(491, 37);
					char_literal370=(IToken)Match(input,83,Follow._83_in_prefix_expr4672);  
					stream_83.Add(char_literal370);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 491:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(491, 44);
						// SugarCpp.g:491:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(491, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(491, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(491, 70);
						// SugarCpp.g:491:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(491, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:492:10: '[' expr_list ']'
					{
					DebugLocation(492, 10);
					char_literal371=(IToken)Match(input,118,Follow._118_in_prefix_expr4694);  
					stream_118.Add(char_literal371);

					DebugLocation(492, 14);
					PushFollow(Follow._expr_list_in_prefix_expr4696);
					expr_list372=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list372.Tree);
					DebugLocation(492, 24);
					char_literal373=(IToken)Match(input,119,Follow._119_in_prefix_expr4698);  
					stream_119.Add(char_literal373);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 492:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(492, 31);
						// SugarCpp.g:492:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(492, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(492, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(492, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(142); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:493:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(493, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4714);
				suffix_expr374=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr374.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 66);
			LeaveRule("prefix_expr", 66);
			LeaveRule_prefix_expr();
		}
		DebugLocation(494, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:496:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 67);
		TraceIn("expr_list", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal376 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr375 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr377 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal376_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(496, 1);
		try
		{
			// SugarCpp.g:497:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:497:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(497, 4);
			PushFollow(Follow._expr_in_expr_list4726);
			expr375=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr375.Tree);
			DebugLocation(497, 9);
			// SugarCpp.g:497:9: ( ',' ! expr )*
			try { DebugEnterSubRule(144);
			while (true)
			{
				int alt144=2;
				try { DebugEnterDecision(144, false);
				int LA144_0 = input.LA(1);

				if ((LA144_0==89))
				{
					alt144 = 1;
				}


				} finally { DebugExitDecision(144); }
				switch ( alt144 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:497:10: ',' ! expr
					{
					DebugLocation(497, 13);
					char_literal376=(IToken)Match(input,89,Follow._89_in_expr_list4729); 
					DebugLocation(497, 15);
					PushFollow(Follow._expr_in_expr_list4732);
					expr377=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr377.Tree);

					}
					break;

				default:
					goto loop144;
				}
			}

			loop144:
				;

			} finally { DebugExitSubRule(144); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 67);
			LeaveRule("expr_list", 67);
			LeaveRule_expr_list();
		}
		DebugLocation(498, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:500:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 68);
		TraceIn("suffix_expr", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal378 = default(IToken);
		IToken string_literal379 = default(IToken);
		IToken char_literal380 = default(IToken);
		IToken string_literal382 = default(IToken);
		IToken char_literal384 = default(IToken);
		IToken char_literal386 = default(IToken);
		IToken char_literal387 = default(IToken);
		IToken char_literal389 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident381 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident383 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list385 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list388 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal378_tree = default(CommonTree);
		CommonTree string_literal379_tree = default(CommonTree);
		CommonTree char_literal380_tree = default(CommonTree);
		CommonTree string_literal382_tree = default(CommonTree);
		CommonTree char_literal384_tree = default(CommonTree);
		CommonTree char_literal386_tree = default(CommonTree);
		CommonTree char_literal387_tree = default(CommonTree);
		CommonTree char_literal389_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(500, 1);
		try
		{
			// SugarCpp.g:501:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:501:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(501, 4);
			// SugarCpp.g:501:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:501:5: a= atom_expr
			{
			DebugLocation(501, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4748);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 501:17: -> $a
			{
				DebugLocation(501, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(501, 24);
			// SugarCpp.g:501:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(147);
			while (true)
			{
				int alt147=7;
				try { DebugEnterDecision(147, false);
				switch (input.LA(1))
				{
				case 87:
					{
					alt147 = 1;
					}
					break;
				case 91:
					{
					alt147 = 2;
					}
					break;
				case 95:
					{
					alt147 = 3;
					}
					break;
				case 93:
					{
					alt147 = 4;
					}
					break;
				case 82:
					{
					alt147 = 5;
					}
					break;
				case 118:
					{
					alt147 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(147); }
				switch ( alt147 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:501:26: '++'
					{
					DebugLocation(501, 26);
					string_literal378=(IToken)Match(input,87,Follow._87_in_suffix_expr4758);  
					stream_87.Add(string_literal378);



					{
					// AST REWRITE
					// elements: suffix_expr, 87
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 501:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(501, 34);
						// SugarCpp.g:501:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(501, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(501, 48);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(501, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:502:14: '--'
					{
					DebugLocation(502, 14);
					string_literal379=(IToken)Match(input,91,Follow._91_in_suffix_expr4784);  
					stream_91.Add(string_literal379);



					{
					// AST REWRITE
					// elements: suffix_expr, 91
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 502:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(502, 22);
						// SugarCpp.g:502:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(502, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(502, 36);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(502, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:503:11: '.' ident
					{
					DebugLocation(503, 11);
					char_literal380=(IToken)Match(input,95,Follow._95_in_suffix_expr4807);  
					stream_95.Add(char_literal380);

					DebugLocation(503, 15);
					PushFollow(Follow._ident_in_suffix_expr4809);
					ident381=ident();
					PopFollow();

					stream_ident.Add(ident381.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 95
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 503:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(503, 24);
						// SugarCpp.g:503:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(503, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(503, 38);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(503, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(503, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:504:11: '->' ident
					{
					DebugLocation(504, 11);
					string_literal382=(IToken)Match(input,93,Follow._93_in_suffix_expr4834);  
					stream_93.Add(string_literal382);

					DebugLocation(504, 16);
					PushFollow(Follow._ident_in_suffix_expr4836);
					ident383=ident();
					PopFollow();

					stream_ident.Add(ident383.Tree);


					{
					// AST REWRITE
					// elements: ident, 93, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 504:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(504, 25);
						// SugarCpp.g:504:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(504, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(504, 39);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(504, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(504, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:505:11: '(' ( expr_list )? ')'
					{
					DebugLocation(505, 11);
					char_literal384=(IToken)Match(input,82,Follow._82_in_suffix_expr4861);  
					stream_82.Add(char_literal384);

					DebugLocation(505, 15);
					// SugarCpp.g:505:15: ( expr_list )?
					int alt145=2;
					try { DebugEnterSubRule(145);
					try { DebugEnterDecision(145, false);
					int LA145_0 = input.LA(1);

					if ((LA145_0==IDENT||LA145_0==NUMBER||LA145_0==STRING||LA145_0==75||LA145_0==80||LA145_0==82||LA145_0==84||(LA145_0>=86 && LA145_0<=87)||(LA145_0>=90 && LA145_0<=91)||(LA145_0>=117 && LA145_0<=118)||LA145_0==144||LA145_0==160))
					{
						alt145 = 1;
					}
					} finally { DebugExitDecision(145); }
					switch (alt145)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:505:15: expr_list
						{
						DebugLocation(505, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4863);
						expr_list385=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list385.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(145); }

					DebugLocation(505, 26);
					char_literal386=(IToken)Match(input,83,Follow._83_in_suffix_expr4866);  
					stream_83.Add(char_literal386);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 505:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(505, 33);
						// SugarCpp.g:505:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(505, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(505, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(505, 58);
						// SugarCpp.g:505:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(505, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:506:11: '[' ( expr_list )? ']'
					{
					DebugLocation(506, 11);
					char_literal387=(IToken)Match(input,118,Follow._118_in_suffix_expr4890);  
					stream_118.Add(char_literal387);

					DebugLocation(506, 15);
					// SugarCpp.g:506:15: ( expr_list )?
					int alt146=2;
					try { DebugEnterSubRule(146);
					try { DebugEnterDecision(146, false);
					int LA146_0 = input.LA(1);

					if ((LA146_0==IDENT||LA146_0==NUMBER||LA146_0==STRING||LA146_0==75||LA146_0==80||LA146_0==82||LA146_0==84||(LA146_0>=86 && LA146_0<=87)||(LA146_0>=90 && LA146_0<=91)||(LA146_0>=117 && LA146_0<=118)||LA146_0==144||LA146_0==160))
					{
						alt146 = 1;
					}
					} finally { DebugExitDecision(146); }
					switch (alt146)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:506:15: expr_list
						{
						DebugLocation(506, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4892);
						expr_list388=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list388.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(146); }

					DebugLocation(506, 26);
					char_literal389=(IToken)Match(input,119,Follow._119_in_suffix_expr4895);  
					stream_119.Add(char_literal389);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 506:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(506, 33);
						// SugarCpp.g:506:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(506, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(506, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(506, 58);
						// SugarCpp.g:506:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(506, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop147;
				}
			}

			loop147:
				;

			} finally { DebugExitSubRule(147); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 68);
			LeaveRule("suffix_expr", 68);
			LeaveRule_suffix_expr();
		}
		DebugLocation(509, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:511:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 69);
		TraceIn("atom_expr", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER390 = default(IToken);
		IToken STRING392 = default(IToken);
		IToken char_literal393 = default(IToken);
		IToken char_literal395 = default(IToken);
		IToken char_literal397 = default(IToken);
		IToken char_literal399 = default(IToken);
		IToken char_literal400 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident391 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident394 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr396 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr398 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER390_tree = default(CommonTree);
		CommonTree STRING392_tree = default(CommonTree);
		CommonTree char_literal393_tree = default(CommonTree);
		CommonTree char_literal395_tree = default(CommonTree);
		CommonTree char_literal397_tree = default(CommonTree);
		CommonTree char_literal399_tree = default(CommonTree);
		CommonTree char_literal400_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(511, 1);
		try
		{
			// SugarCpp.g:512:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt150=5;
			try { DebugEnterDecision(150, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt150 = 1;
				}
				break;
			case IDENT:
				{
				alt150 = 2;
				}
				break;
			case STRING:
				{
				alt150 = 3;
				}
				break;
			case 117:
				{
				alt150 = 4;
				}
				break;
			case 82:
				{
				alt150 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 150, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(150); }
			switch (alt150)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:512:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(512, 4);
				NUMBER390=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4941); 
				NUMBER390_tree = (CommonTree)adaptor.Create(NUMBER390);
				adaptor.AddChild(root_0, NUMBER390_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:513:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(513, 4);
				PushFollow(Follow._ident_in_atom_expr4946);
				ident391=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident391.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:514:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(514, 4);
				STRING392=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4951); 
				STRING392_tree = (CommonTree)adaptor.Create(STRING392);
				adaptor.AddChild(root_0, STRING392_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:515:4: '@' ident
				{
				DebugLocation(515, 4);
				char_literal393=(IToken)Match(input,117,Follow._117_in_atom_expr4956);  
				stream_117.Add(char_literal393);

				DebugLocation(515, 8);
				PushFollow(Follow._ident_in_atom_expr4958);
				ident394=ident();
				PopFollow();

				stream_ident.Add(ident394.Tree);


				{
				// AST REWRITE
				// elements: 117, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 515:14: -> ^( '@' ident )
				{
					DebugLocation(515, 17);
					// SugarCpp.g:515:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(515, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_117.NextNode(), root_1);

					DebugLocation(515, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:516:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(516, 4);
				char_literal395=(IToken)Match(input,82,Follow._82_in_atom_expr4971);  
				stream_82.Add(char_literal395);

				DebugLocation(516, 8);
				PushFollow(Follow._expr_in_atom_expr4973);
				expr396=expr();
				PopFollow();

				stream_expr.Add(expr396.Tree);
				DebugLocation(516, 13);
				// SugarCpp.g:516:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt149=2;
				try { DebugEnterSubRule(149);
				try { DebugEnterDecision(149, false);
				int LA149_0 = input.LA(1);

				if ((LA149_0==89))
				{
					alt149 = 1;
				}
				else if ((LA149_0==83))
				{
					alt149 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 149, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(149); }
				switch (alt149)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:516:15: ( ',' expr )+ ')'
					{
					DebugLocation(516, 15);
					// SugarCpp.g:516:15: ( ',' expr )+
					int cnt148=0;
					try { DebugEnterSubRule(148);
					while (true)
					{
						int alt148=2;
						try { DebugEnterDecision(148, false);
						int LA148_0 = input.LA(1);

						if ((LA148_0==89))
						{
							alt148 = 1;
						}


						} finally { DebugExitDecision(148); }
						switch (alt148)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:516:16: ',' expr
							{
							DebugLocation(516, 16);
							char_literal397=(IToken)Match(input,89,Follow._89_in_atom_expr4978);  
							stream_89.Add(char_literal397);

							DebugLocation(516, 20);
							PushFollow(Follow._expr_in_atom_expr4980);
							expr398=expr();
							PopFollow();

							stream_expr.Add(expr398.Tree);

							}
							break;

						default:
							if (cnt148 >= 1)
								goto loop148;

							EarlyExitException eee148 = new EarlyExitException( 148, input );
							DebugRecognitionException(eee148);
							throw eee148;
						}
						cnt148++;
					}
					loop148:
						;

					} finally { DebugExitSubRule(148); }

					DebugLocation(516, 27);
					char_literal399=(IToken)Match(input,83,Follow._83_in_atom_expr4984);  
					stream_83.Add(char_literal399);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 516:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(516, 34);
						// SugarCpp.g:516:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(516, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(516, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(516, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:517:15: ')'
					{
					DebugLocation(517, 15);
					char_literal400=(IToken)Match(input,83,Follow._83_in_atom_expr5009);  
					stream_83.Add(char_literal400);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 517:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(517, 22);
						// SugarCpp.g:517:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(517, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(517, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(149); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 69);
			LeaveRule("atom_expr", 69);
			LeaveRule_atom_expr();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:521:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 70);
		TraceIn("lvalue_item", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal401 = default(IToken);
		IToken string_literal402 = default(IToken);
		IToken char_literal403 = default(IToken);
		IToken string_literal405 = default(IToken);
		IToken char_literal408 = default(IToken);
		IToken char_literal410 = default(IToken);
		IToken char_literal411 = default(IToken);
		IToken char_literal413 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident404 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident406 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter407 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list409 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list412 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal401_tree = default(CommonTree);
		CommonTree string_literal402_tree = default(CommonTree);
		CommonTree char_literal403_tree = default(CommonTree);
		CommonTree string_literal405_tree = default(CommonTree);
		CommonTree char_literal408_tree = default(CommonTree);
		CommonTree char_literal410_tree = default(CommonTree);
		CommonTree char_literal411_tree = default(CommonTree);
		CommonTree char_literal413_tree = default(CommonTree);
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:522:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(522, 4);
			// SugarCpp.g:522:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:522:5: a= lvalue_atom
			{
			DebugLocation(522, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item5039);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 522:19: -> $a
			{
				DebugLocation(522, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(522, 26);
			// SugarCpp.g:522:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(154);
			while (true)
			{
				int alt154=7;
				try { DebugEnterDecision(154, false);
				switch (input.LA(1))
				{
				case 87:
					{
					alt154 = 1;
					}
					break;
				case 91:
					{
					alt154 = 2;
					}
					break;
				case 95:
					{
					alt154 = 3;
					}
					break;
				case 93:
					{
					alt154 = 4;
					}
					break;
				case 82:
				case 103:
					{
					alt154 = 5;
					}
					break;
				case 118:
					{
					alt154 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(154); }
				switch ( alt154 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:522:28: '++'
					{
					DebugLocation(522, 28);
					string_literal401=(IToken)Match(input,87,Follow._87_in_lvalue_item5049);  
					stream_87.Add(string_literal401);



					{
					// AST REWRITE
					// elements: lvalue_item, 87
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 522:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(522, 36);
						// SugarCpp.g:522:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(522, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(522, 50);
						adaptor.AddChild(root_1, stream_87.NextNode());
						DebugLocation(522, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:523:16: '--'
					{
					DebugLocation(523, 16);
					string_literal402=(IToken)Match(input,91,Follow._91_in_lvalue_item5077);  
					stream_91.Add(string_literal402);



					{
					// AST REWRITE
					// elements: lvalue_item, 91
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 523:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(523, 24);
						// SugarCpp.g:523:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(523, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(523, 38);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(523, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:524:13: '.' ident
					{
					DebugLocation(524, 13);
					char_literal403=(IToken)Match(input,95,Follow._95_in_lvalue_item5102);  
					stream_95.Add(char_literal403);

					DebugLocation(524, 17);
					PushFollow(Follow._ident_in_lvalue_item5104);
					ident404=ident();
					PopFollow();

					stream_ident.Add(ident404.Tree);


					{
					// AST REWRITE
					// elements: 95, ident, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 524:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(524, 26);
						// SugarCpp.g:524:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(524, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(524, 40);
						adaptor.AddChild(root_1, stream_95.NextNode());
						DebugLocation(524, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(524, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:525:13: '->' ident
					{
					DebugLocation(525, 13);
					string_literal405=(IToken)Match(input,93,Follow._93_in_lvalue_item5131);  
					stream_93.Add(string_literal405);

					DebugLocation(525, 18);
					PushFollow(Follow._ident_in_lvalue_item5133);
					ident406=ident();
					PopFollow();

					stream_ident.Add(ident406.Tree);


					{
					// AST REWRITE
					// elements: ident, 93, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 525:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(525, 27);
						// SugarCpp.g:525:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(525, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(525, 41);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(525, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(525, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:526:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(526, 13);
					// SugarCpp.g:526:13: ( generic_parameter )?
					int alt151=2;
					try { DebugEnterSubRule(151);
					try { DebugEnterDecision(151, false);
					int LA151_0 = input.LA(1);

					if ((LA151_0==103))
					{
						alt151 = 1;
					}
					} finally { DebugExitDecision(151); }
					switch (alt151)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:13: generic_parameter
						{
						DebugLocation(526, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item5160);
						generic_parameter407=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter407.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(151); }

					DebugLocation(526, 32);
					char_literal408=(IToken)Match(input,82,Follow._82_in_lvalue_item5163);  
					stream_82.Add(char_literal408);

					DebugLocation(526, 36);
					// SugarCpp.g:526:36: ( expr_list )?
					int alt152=2;
					try { DebugEnterSubRule(152);
					try { DebugEnterDecision(152, false);
					int LA152_0 = input.LA(1);

					if ((LA152_0==IDENT||LA152_0==NUMBER||LA152_0==STRING||LA152_0==75||LA152_0==80||LA152_0==82||LA152_0==84||(LA152_0>=86 && LA152_0<=87)||(LA152_0>=90 && LA152_0<=91)||(LA152_0>=117 && LA152_0<=118)||LA152_0==144||LA152_0==160))
					{
						alt152 = 1;
					}
					} finally { DebugExitDecision(152); }
					switch (alt152)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:526:36: expr_list
						{
						DebugLocation(526, 36);
						PushFollow(Follow._expr_list_in_lvalue_item5165);
						expr_list409=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list409.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(152); }

					DebugLocation(526, 47);
					char_literal410=(IToken)Match(input,83,Follow._83_in_lvalue_item5168);  
					stream_83.Add(char_literal410);



					{
					// AST REWRITE
					// elements: lvalue_item, generic_parameter, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 526:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(526, 54);
						// SugarCpp.g:526:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(526, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(526, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(526, 79);
						// SugarCpp.g:526:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(526, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(526, 98);
						// SugarCpp.g:526:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(526, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:527:13: '[' ( expr_list )? ']'
					{
					DebugLocation(527, 13);
					char_literal411=(IToken)Match(input,118,Follow._118_in_lvalue_item5197);  
					stream_118.Add(char_literal411);

					DebugLocation(527, 17);
					// SugarCpp.g:527:17: ( expr_list )?
					int alt153=2;
					try { DebugEnterSubRule(153);
					try { DebugEnterDecision(153, false);
					int LA153_0 = input.LA(1);

					if ((LA153_0==IDENT||LA153_0==NUMBER||LA153_0==STRING||LA153_0==75||LA153_0==80||LA153_0==82||LA153_0==84||(LA153_0>=86 && LA153_0<=87)||(LA153_0>=90 && LA153_0<=91)||(LA153_0>=117 && LA153_0<=118)||LA153_0==144||LA153_0==160))
					{
						alt153 = 1;
					}
					} finally { DebugExitDecision(153); }
					switch (alt153)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:527:17: expr_list
						{
						DebugLocation(527, 17);
						PushFollow(Follow._expr_list_in_lvalue_item5199);
						expr_list412=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list412.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(153); }

					DebugLocation(527, 28);
					char_literal413=(IToken)Match(input,119,Follow._119_in_lvalue_item5202);  
					stream_119.Add(char_literal413);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 527:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(527, 35);
						// SugarCpp.g:527:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(527, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(527, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(527, 60);
						// SugarCpp.g:527:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(527, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop154;
				}
			}

			loop154:
				;

			} finally { DebugExitSubRule(154); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 70);
			LeaveRule("lvalue_item", 70);
			LeaveRule_lvalue_item();
		}
		DebugLocation(529, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:531:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 71);
		TraceIn("lvalue_atom", 71);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal415 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident414 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident416 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal415_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(531, 1);
		try
		{
			// SugarCpp.g:532:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt155=2;
			try { DebugEnterDecision(155, false);
			int LA155_0 = input.LA(1);

			if ((LA155_0==IDENT))
			{
				alt155 = 1;
			}
			else if ((LA155_0==117))
			{
				alt155 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 155, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(155); }
			switch (alt155)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:532:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(532, 4);
				PushFollow(Follow._ident_in_lvalue_atom5241);
				ident414=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident414.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:533:4: '@' ident
				{
				DebugLocation(533, 4);
				char_literal415=(IToken)Match(input,117,Follow._117_in_lvalue_atom5246);  
				stream_117.Add(char_literal415);

				DebugLocation(533, 8);
				PushFollow(Follow._ident_in_lvalue_atom5248);
				ident416=ident();
				PopFollow();

				stream_ident.Add(ident416.Tree);


				{
				// AST REWRITE
				// elements: ident, 117
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 533:14: -> ^( '@' ident )
				{
					DebugLocation(533, 17);
					// SugarCpp.g:533:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(533, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_117.NextNode(), root_1);

					DebugLocation(533, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 71);
			LeaveRule("lvalue_atom", 71);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(534, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:536:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 72);
		TraceIn("lvalue", 72);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal417 = default(IToken);
		IToken char_literal419 = default(IToken);
		IToken char_literal421 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item418 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item420 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item422 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal417_tree = default(CommonTree);
		CommonTree char_literal419_tree = default(CommonTree);
		CommonTree char_literal421_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(536, 1);
		try
		{
			// SugarCpp.g:537:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt157=2;
			try { DebugEnterDecision(157, false);
			int LA157_0 = input.LA(1);

			if ((LA157_0==82))
			{
				alt157 = 1;
			}
			else if ((LA157_0==IDENT||LA157_0==117))
			{
				alt157 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 157, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(157); }
			switch (alt157)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:537:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(537, 4);
				char_literal417=(IToken)Match(input,82,Follow._82_in_lvalue5267);  
				stream_82.Add(char_literal417);

				DebugLocation(537, 8);
				PushFollow(Follow._lvalue_item_in_lvalue5269);
				lvalue_item418=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item418.Tree);
				DebugLocation(537, 20);
				// SugarCpp.g:537:20: ( ',' lvalue_item )+
				int cnt156=0;
				try { DebugEnterSubRule(156);
				while (true)
				{
					int alt156=2;
					try { DebugEnterDecision(156, false);
					int LA156_0 = input.LA(1);

					if ((LA156_0==89))
					{
						alt156 = 1;
					}


					} finally { DebugExitDecision(156); }
					switch (alt156)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:537:21: ',' lvalue_item
						{
						DebugLocation(537, 21);
						char_literal419=(IToken)Match(input,89,Follow._89_in_lvalue5272);  
						stream_89.Add(char_literal419);

						DebugLocation(537, 25);
						PushFollow(Follow._lvalue_item_in_lvalue5274);
						lvalue_item420=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item420.Tree);

						}
						break;

					default:
						if (cnt156 >= 1)
							goto loop156;

						EarlyExitException eee156 = new EarlyExitException( 156, input );
						DebugRecognitionException(eee156);
						throw eee156;
					}
					cnt156++;
				}
				loop156:
					;

				} finally { DebugExitSubRule(156); }

				DebugLocation(537, 39);
				char_literal421=(IToken)Match(input,83,Follow._83_in_lvalue5278);  
				stream_83.Add(char_literal421);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 537:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(537, 46);
					// SugarCpp.g:537:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(537, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(537, 60);
					// SugarCpp.g:537:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(537, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:538:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(538, 4);
				PushFollow(Follow._lvalue_item_in_lvalue5292);
				lvalue_item422=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item422.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 72);
			LeaveRule("lvalue", 72);
			LeaveRule_lvalue();
		}
		DebugLocation(539, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:541:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 73);
		TraceIn("ident", 73);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT423 = default(IToken);
		IToken string_literal424 = default(IToken);
		IToken IDENT425 = default(IToken);

		CommonTree IDENT423_tree = default(CommonTree);
		CommonTree string_literal424_tree = default(CommonTree);
		CommonTree IDENT425_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(541, 1);
		try
		{
			// SugarCpp.g:542:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:542:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(542, 4);
			IDENT423=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5303); 
			IDENT423_tree = (CommonTree)adaptor.Create(IDENT423);
			adaptor.AddChild(root_0, IDENT423_tree);
			DebugLocation(542, 10);
			// SugarCpp.g:542:10: ( '::' IDENT )*
			try { DebugEnterSubRule(158);
			while (true)
			{
				int alt158=2;
				try { DebugEnterDecision(158, false);
				int LA158_0 = input.LA(1);

				if ((LA158_0==100))
				{
					alt158 = 1;
				}


				} finally { DebugExitDecision(158); }
				switch ( alt158 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:542:11: '::' IDENT
					{
					DebugLocation(542, 11);
					string_literal424=(IToken)Match(input,100,Follow._100_in_ident5306); 
					string_literal424_tree = (CommonTree)adaptor.Create(string_literal424);
					adaptor.AddChild(root_0, string_literal424_tree);
					DebugLocation(542, 16);
					IDENT425=(IToken)Match(input,IDENT,Follow._IDENT_in_ident5308); 
					IDENT425_tree = (CommonTree)adaptor.Create(IDENT425);
					adaptor.AddChild(root_0, IDENT425_tree);

					}
					break;

				default:
					goto loop158;
				}
			}

			loop158:
				;

			} finally { DebugExitSubRule(158); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 73);
			LeaveRule("ident", 73);
			LeaveRule_ident();
		}
		DebugLocation(543, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:545:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 74);
		TraceIn("infix_func", 74);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal426 = default(IToken);
		IToken char_literal428 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident427 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal426_tree = default(CommonTree);
		CommonTree char_literal428_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(545, 1);
		try
		{
			// SugarCpp.g:546:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:546:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(546, 7);
			char_literal426=(IToken)Match(input,122,Follow._122_in_infix_func5321); 
			DebugLocation(546, 9);
			PushFollow(Follow._ident_in_infix_func5324);
			ident427=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident427.Tree);
			DebugLocation(546, 18);
			char_literal428=(IToken)Match(input,122,Follow._122_in_infix_func5326); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 74);
			LeaveRule("infix_func", 74);
			LeaveRule_infix_func();
		}
		DebugLocation(547, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA53 dfa53;
	private DFA70 dfa70;
	private DFA77 dfa77;
	private DFA81 dfa81;
	private DFA113 dfa113;
	private DFA112 dfa112;
	private DFA118 dfa118;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa53 = new DFA53( this );
		dfa70 = new DFA70( this );
		dfa77 = new DFA77( this );
		dfa81 = new DFA81( this );
		dfa113 = new DFA113( this );
		dfa112 = new DFA112( this );
		dfa118 = new DFA118( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x25\x1\xFFFF\x1\x25\x6\xFFFF\x2\x52\x1\x25\x1\xFFFF\x3\x25\x1\x30"+
			"\x2\x25\x1\x52\x3\x53\x2\x52\x1\x25\x3\x53\x1\x25\x1\x59\x5\x25\x1\x59"+
			"\x1\x25\x4\x53\x1\x52\xA\x53\x2\x25\x1\x59\x2\x25\x1\x59\x2\x25\xA\x53"+
			"\x2\x25\x2\x53";
		private const string DFA4_maxS =
			"\x1\xA0\x1\x80\x1\xFFFF\x1\xA0\x6\xFFFF\x2\x77\x1\x25\x1\xFFFF\x1\x25"+
			"\x1\x36\x1\x80\x1\x30\x1\x36\x1\xA0\x1\x77\x2\x59\x1\x64\x2\x77\x1\xA0"+
			"\x2\x59\x1\x64\x1\x36\x1\x77\x2\x25\x3\x36\x1\x77\x1\x25\x2\x59\x2\x64"+
			"\x1\x77\x2\x59\x1\x64\x2\x59\x1\x64\x2\x59\x2\x64\x1\x25\x1\x36\x1\x77"+
			"\x1\x25\x1\x36\x1\x77\x2\x25\x1\x64\x2\x59\x2\x64\x2\x59\x3\x64\x2\x25"+
			"\x2\x64";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x50\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF\x1\x5\x4\xFFFF"+
				"\x1\x8\x5\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\xFFFF\x1\x2\x1\xFFFF\x1\x6\x5"+
				"\xFFFF\x1\x2",
				"\x1\xA\x5A\xFFFF\x1\xB",
				"",
				"\x1\x2\x2A\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x29\xFFFF"+
				"\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\xB\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x5A\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\xB\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x2A\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\xFFFF\x1\x2\xE\xFFFF\x1\x2\x29\xFFFF"+
				"\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x12\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x3\xA\xFFFF\x1\x1A\x45\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x3\xFFFF"+
				"\x1\x5\x13\xFFFF\x1\x2\x7\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\xB\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\xB\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\xB\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x12\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\xB\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\xB\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1D\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "186:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x30\x1\xA0\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x1C\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x45\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "230:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x30\x1\xA0\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x1C\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x45\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x3\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x1\x3\x1"+
				"\xFFFF\x1\x3\x1\xFFFF\x1\x3\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "242:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xF\xFFFF";
		private const string DFA53_eofS =
			"\xF\xFFFF";
		private const string DFA53_minS =
			"\x1\x25\x1\xFFFF\x1\x25\x1\xFFFF\x3\x25\x1\x50\x3\x25\x2\x50\x1\x25\x1"+
			"\x50";
		private const string DFA53_maxS =
			"\x1\xA0\x1\xFFFF\x1\xA0\x1\xFFFF\x1\x25\x1\x98\x1\xA0\x1\x76\x1\x25\x1"+
			"\x98\x1\xA0\x2\x76\x1\x25\x1\x76";
		private const string DFA53_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA53_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x2\x5A\xFFFF\x1\x1\x17\xFFFF\x1\x1\x7\xFFFF\x1\x3",
				"",
				"\x1\x1\x2A\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x29\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x49\xFFFF\x1\x1\x10\xFFFF\x1\x1\x17\xFFFF\x1\x1",
				"\x1\x1\x2A\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x2\xFFFF\x1\x5\xE\xFFFF\x1\x1\x29\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x5A\xFFFF\x1\x1\x17\xFFFF\x1\x1",
				"\x1\x1\x2A\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x21\xFFFF\x1\x1"+
				"\x29\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "271:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA70 : DFA
	{
		private const string DFA70_eotS =
			"\x9\xFFFF";
		private const string DFA70_eofS =
			"\x9\xFFFF";
		private const string DFA70_minS =
			"\x1\x25\x1\x30\x4\xFFFF\x1\x25\x1\xFFFF\x1\x30";
		private const string DFA70_maxS =
			"\x1\x9A\x1\x9E\x4\xFFFF\x1\x25\x1\xFFFF\x1\x9E";
		private const string DFA70_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA70_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA70_transitionS =
			{
				"\x1\x1\x2C\xFFFF\x1\x5\x22\xFFFF\x1\x5\x1C\xFFFF\x1\x2\x3\xFFFF\x1\x4"+
				"\x3\xFFFF\x1\x3",
				"\x1\x5\x1D\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1\x5\xE"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1D\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\xC\xFFFF\x1\x5\x1\xFFFF\x1\x5\xE"+
				"\xFFFF\x1\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5"
			};

		private static readonly short[] DFA70_eot = DFA.UnpackEncodedString(DFA70_eotS);
		private static readonly short[] DFA70_eof = DFA.UnpackEncodedString(DFA70_eofS);
		private static readonly char[] DFA70_min = DFA.UnpackEncodedStringToUnsignedChars(DFA70_minS);
		private static readonly char[] DFA70_max = DFA.UnpackEncodedStringToUnsignedChars(DFA70_maxS);
		private static readonly short[] DFA70_accept = DFA.UnpackEncodedString(DFA70_acceptS);
		private static readonly short[] DFA70_special = DFA.UnpackEncodedString(DFA70_specialS);
		private static readonly short[][] DFA70_transition;

		static DFA70()
		{
			int numStates = DFA70_transitionS.Length;
			DFA70_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA70_transition[i] = DFA.UnpackEncodedString(DFA70_transitionS[i]);
			}
		}

		public DFA70( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 70;
			this.eot = DFA70_eot;
			this.eof = DFA70_eof;
			this.min = DFA70_min;
			this.max = DFA70_max;
			this.accept = DFA70_accept;
			this.special = DFA70_special;
			this.transition = DFA70_transition;
		}

		public override string Description { get { return "302:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA77 : DFA
	{
		private const string DFA77_eotS =
			"\x4\xFFFF";
		private const string DFA77_eofS =
			"\x4\xFFFF";
		private const string DFA77_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA77_maxS =
			"\x1\x83\x1\x9C\x2\xFFFF";
		private const string DFA77_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA77_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA77_transitionS =
			{
				"\x1\x1\x52\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x3\xA\xFFFF\x1\x1\x21\xFFFF\x1\x3\x22\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x4\x3\x4\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x4\x3",
				"",
				""
			};

		private static readonly short[] DFA77_eot = DFA.UnpackEncodedString(DFA77_eotS);
		private static readonly short[] DFA77_eof = DFA.UnpackEncodedString(DFA77_eofS);
		private static readonly char[] DFA77_min = DFA.UnpackEncodedStringToUnsignedChars(DFA77_minS);
		private static readonly char[] DFA77_max = DFA.UnpackEncodedStringToUnsignedChars(DFA77_maxS);
		private static readonly short[] DFA77_accept = DFA.UnpackEncodedString(DFA77_acceptS);
		private static readonly short[] DFA77_special = DFA.UnpackEncodedString(DFA77_specialS);
		private static readonly short[][] DFA77_transition;

		static DFA77()
		{
			int numStates = DFA77_transitionS.Length;
			DFA77_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA77_transition[i] = DFA.UnpackEncodedString(DFA77_transitionS[i]);
			}
		}

		public DFA77( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 77;
			this.eot = DFA77_eot;
			this.eof = DFA77_eof;
			this.min = DFA77_min;
			this.max = DFA77_max;
			this.accept = DFA77_accept;
			this.special = DFA77_special;
			this.transition = DFA77_transition;
		}

		public override string Description { get { return "329:35: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA81 : DFA
	{
		private const string DFA81_eotS =
			"\x4\xFFFF";
		private const string DFA81_eofS =
			"\x4\xFFFF";
		private const string DFA81_minS =
			"\x1\x30\x1\x8\x2\xFFFF";
		private const string DFA81_maxS =
			"\x1\x83\x1\x9C\x2\xFFFF";
		private const string DFA81_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA81_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA81_transitionS =
			{
				"\x1\x1\x52\xFFFF\x1\x2",
				"\x1\x3\x1C\xFFFF\x1\x3\xA\xFFFF\x1\x1\x21\xFFFF\x1\x3\x22\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x1\xFFFF\x1\x2\x1\xFFFF\x4\x3\x4\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x3\x3\x1\xFFFF\x4\x3",
				"",
				""
			};

		private static readonly short[] DFA81_eot = DFA.UnpackEncodedString(DFA81_eotS);
		private static readonly short[] DFA81_eof = DFA.UnpackEncodedString(DFA81_eofS);
		private static readonly char[] DFA81_min = DFA.UnpackEncodedStringToUnsignedChars(DFA81_minS);
		private static readonly char[] DFA81_max = DFA.UnpackEncodedStringToUnsignedChars(DFA81_maxS);
		private static readonly short[] DFA81_accept = DFA.UnpackEncodedString(DFA81_acceptS);
		private static readonly short[] DFA81_special = DFA.UnpackEncodedString(DFA81_specialS);
		private static readonly short[][] DFA81_transition;

		static DFA81()
		{
			int numStates = DFA81_transitionS.Length;
			DFA81_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA81_transition[i] = DFA.UnpackEncodedString(DFA81_transitionS[i]);
			}
		}

		public DFA81( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 81;
			this.eot = DFA81_eot;
			this.eof = DFA81_eof;
			this.min = DFA81_min;
			this.max = DFA81_max;
			this.accept = DFA81_accept;
			this.special = DFA81_special;
			this.transition = DFA81_transition;
		}

		public override string Description { get { return "332:39: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA113 : DFA
	{
		private const string DFA113_eotS =
			"\x7\xFFFF";
		private const string DFA113_eofS =
			"\x7\xFFFF";
		private const string DFA113_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA113_maxS =
			"\x5\xA0\x2\xFFFF";
		private const string DFA113_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2";
		private const string DFA113_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA113_transitionS =
			{
				"\x1\x4\x1C\xFFFF\x1\x5\x1\x3\x9\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x14"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x1\x5\xF\xFFFF"+
				"\x1\x5",
				"\x1\x4\x1C\xFFFF\x1\x5\x1\x3\x9\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x14"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x1\x5\xF\xFFFF"+
				"\x1\x5",
				"\x1\x4\x1C\xFFFF\x1\x5\x1\x3\x9\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x14"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x1\x5\xF\xFFFF"+
				"\x1\x5",
				"\x1\x4\x1C\xFFFF\x1\x5\x1\x3\x9\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x14"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x1\x5\xF\xFFFF"+
				"\x1\x5",
				"\x1\x4\x1C\xFFFF\x1\x5\x1\x3\x9\xFFFF\x1\x2\x1\x5\x4\xFFFF\x1\x5\x14"+
				"\xFFFF\x1\x5\x4\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x2"+
				"\x5\x1\xFFFF\x1\x1\x2\x5\x19\xFFFF\x2\x5\x1\x6\x18\xFFFF\x1\x5\xF\xFFFF"+
				"\x1\x5",
				"",
				""
			};

		private static readonly short[] DFA113_eot = DFA.UnpackEncodedString(DFA113_eotS);
		private static readonly short[] DFA113_eof = DFA.UnpackEncodedString(DFA113_eofS);
		private static readonly char[] DFA113_min = DFA.UnpackEncodedStringToUnsignedChars(DFA113_minS);
		private static readonly char[] DFA113_max = DFA.UnpackEncodedStringToUnsignedChars(DFA113_maxS);
		private static readonly short[] DFA113_accept = DFA.UnpackEncodedString(DFA113_acceptS);
		private static readonly short[] DFA113_special = DFA.UnpackEncodedString(DFA113_specialS);
		private static readonly short[][] DFA113_transition;

		static DFA113()
		{
			int numStates = DFA113_transitionS.Length;
			DFA113_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA113_transition[i] = DFA.UnpackEncodedString(DFA113_transitionS[i]);
			}
		}

		public DFA113( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 113;
			this.eot = DFA113_eot;
			this.eof = DFA113_eof;
			this.min = DFA113_min;
			this.max = DFA113_max;
			this.accept = DFA113_accept;
			this.special = DFA113_special;
			this.transition = DFA113_transition;
		}

		public override string Description { get { return "396:8: ( ( ',' | NEWLINE | INDENT | DEDENT )* list_expr ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )* )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA112 : DFA
	{
		private const string DFA112_eotS =
			"\x7\xFFFF";
		private const string DFA112_eofS =
			"\x7\xFFFF";
		private const string DFA112_minS =
			"\x5\x8\x2\xFFFF";
		private const string DFA112_maxS =
			"\x1\x77\x4\xA0\x2\xFFFF";
		private const string DFA112_acceptS =
			"\x5\xFFFF\x1\x2\x1\x1";
		private const string DFA112_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA112_transitionS =
			{
				"\x1\x4\x1D\xFFFF\x1\x3\x9\xFFFF\x1\x2\x28\xFFFF\x1\x1\x1D\xFFFF\x1\x5",
				"\x1\x4\x1C\xFFFF\x1\x6\x1\x3\x9\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x14"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x1\x6\xF\xFFFF"+
				"\x1\x6",
				"\x1\x4\x1C\xFFFF\x1\x6\x1\x3\x9\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x14"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x1\x6\xF\xFFFF"+
				"\x1\x6",
				"\x1\x4\x1C\xFFFF\x1\x6\x1\x3\x9\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x14"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x1\x6\xF\xFFFF"+
				"\x1\x6",
				"\x1\x4\x1C\xFFFF\x1\x6\x1\x3\x9\xFFFF\x1\x2\x1\x6\x4\xFFFF\x1\x6\x14"+
				"\xFFFF\x1\x6\x4\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x1\x6\x1\xFFFF\x2"+
				"\x6\x1\xFFFF\x1\x1\x2\x6\x19\xFFFF\x2\x6\x1\x5\x18\xFFFF\x1\x6\xF\xFFFF"+
				"\x1\x6",
				"",
				""
			};

		private static readonly short[] DFA112_eot = DFA.UnpackEncodedString(DFA112_eotS);
		private static readonly short[] DFA112_eof = DFA.UnpackEncodedString(DFA112_eofS);
		private static readonly char[] DFA112_min = DFA.UnpackEncodedStringToUnsignedChars(DFA112_minS);
		private static readonly char[] DFA112_max = DFA.UnpackEncodedStringToUnsignedChars(DFA112_maxS);
		private static readonly short[] DFA112_accept = DFA.UnpackEncodedString(DFA112_acceptS);
		private static readonly short[] DFA112_special = DFA.UnpackEncodedString(DFA112_specialS);
		private static readonly short[][] DFA112_transition;

		static DFA112()
		{
			int numStates = DFA112_transitionS.Length;
			DFA112_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA112_transition[i] = DFA.UnpackEncodedString(DFA112_transitionS[i]);
			}
		}

		public DFA112( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 112;
			this.eot = DFA112_eot;
			this.eof = DFA112_eof;
			this.min = DFA112_min;
			this.max = DFA112_max;
			this.accept = DFA112_accept;
			this.special = DFA112_special;
			this.transition = DFA112_transition;
		}

		public override string Description { get { return "()* loopback of 396:54: ( ( ',' | NEWLINE | INDENT | DEDENT )+ list_expr )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA118 : DFA
	{
		private const string DFA118_eotS =
			"\x7\xFFFF";
		private const string DFA118_eofS =
			"\x7\xFFFF";
		private const string DFA118_minS =
			"\x2\x25\x1\xFFFF\x1\x4C\x1\xFFFF\x1\x25\x1\x4C";
		private const string DFA118_maxS =
			"\x2\xA0\x1\xFFFF\x1\x8C\x1\xFFFF\x1\x25\x1\x8C";
		private const string DFA118_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x2\xFFFF";
		private const string DFA118_specialS =
			"\x7\xFFFF}>";
		private static readonly string[] DFA118_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x14\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x19\xFFFF"+
				"\x1\x2\x1A\xFFFF\x1\x2\xF\xFFFF\x1\x2",
				"\x1\x3\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x14\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xF\xFFFF\x2\x2\x19\xFFFF\x1\x2\xF\xFFFF\x1\x2",
				"",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x4"+
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x4\x1\x5\x2\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x4\xFFFF\x1\x2\x3\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\xE\xFFFF\x2\x2",
				"",
				"\x1\x6",
				"\x2\x2\x4\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x1\xFFFF\x1\x4"+
				"\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x1\x4\x1\x5\x2\xFFFF\x1\x2\x1\xFFFF\x1"+
				"\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x3\x2\x4\xFFFF\x1\x2\x3\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\xE\xFFFF\x2\x2"
			};

		private static readonly short[] DFA118_eot = DFA.UnpackEncodedString(DFA118_eotS);
		private static readonly short[] DFA118_eof = DFA.UnpackEncodedString(DFA118_eofS);
		private static readonly char[] DFA118_min = DFA.UnpackEncodedStringToUnsignedChars(DFA118_minS);
		private static readonly char[] DFA118_max = DFA.UnpackEncodedStringToUnsignedChars(DFA118_maxS);
		private static readonly short[] DFA118_accept = DFA.UnpackEncodedString(DFA118_acceptS);
		private static readonly short[] DFA118_special = DFA.UnpackEncodedString(DFA118_specialS);
		private static readonly short[][] DFA118_transition;

		static DFA118()
		{
			int numStates = DFA118_transitionS.Length;
			DFA118_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA118_transition[i] = DFA.UnpackEncodedString(DFA118_transitionS[i]);
			}
		}

		public DFA118( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 118;
			this.eot = DFA118_eot;
			this.eof = DFA118_eof;
			this.min = DFA118_min;
			this.max = DFA118_max;
			this.accept = DFA118_accept;
			this.special = DFA118_special;
			this.transition = DFA118_transition;
		}

		public override string Description { get { return "400:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root516 = new BitSet(new ulong[]{0x1002000000000UL,0x8040000000000000UL,0x105408211UL});
		public static readonly BitSet _global_block_in_root519 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root521 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block541 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block543 = new BitSet(new ulong[]{0x1002000000002UL,0x8040000000000000UL,0x105408211UL});
		public static readonly BitSet _func_def_in_node566 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node571 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node601 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item634 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_attribute_item637 = new BitSet(new ulong[]{0x42002000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item639 = new BitSet(new ulong[]{0x0UL,0x2080000UL});
		public static readonly BitSet _89_in_attribute_item642 = new BitSet(new ulong[]{0x42002000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item644 = new BitSet(new ulong[]{0x0UL,0x2080000UL});
		public static readonly BitSet _83_in_attribute_item648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_attribute_item666 = new BitSet(new ulong[]{0x2UL,0x40000UL});
		public static readonly BitSet _82_in_attribute_item669 = new BitSet(new ulong[]{0x42002000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item671 = new BitSet(new ulong[]{0x0UL,0x2080000UL});
		public static readonly BitSet _89_in_attribute_item674 = new BitSet(new ulong[]{0x42002000000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item676 = new BitSet(new ulong[]{0x0UL,0x2080000UL});
		public static readonly BitSet _83_in_attribute_item680 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_attribute705 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _attribute_item_in_attribute707 = new BitSet(new ulong[]{0x0UL,0x80000002000000UL});
		public static readonly BitSet _89_in_attribute710 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1UL});
		public static readonly BitSet _attribute_item_in_attribute712 = new BitSet(new ulong[]{0x0UL,0x80000002000000UL});
		public static readonly BitSet _119_in_attribute716 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute718 = new BitSet(new ulong[]{0x1000000000002UL,0x40000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc737 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_list_in_global_alloc740 = new BitSet(new ulong[]{0x0UL,0x2800000000UL});
		public static readonly BitSet _99_in_global_alloc744 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000001UL});
		public static readonly BitSet _type_name_in_global_alloc746 = new BitSet(new ulong[]{0x2UL,0x102000040000UL});
		public static readonly BitSet _108_in_global_alloc751 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _101_in_global_alloc755 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_global_alloc758 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_global_alloc818 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CDD0800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_global_alloc820 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_global_alloc823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_global_alloc896 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_global_alloc899 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_global_alloc902 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_global_alloc904 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _stmt_using_in_global_using941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef952 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_import_def963 = new BitSet(new ulong[]{0x41000000000002UL});
		public static readonly BitSet _STRING_in_import_def965 = new BitSet(new ulong[]{0x1000000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def969 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _INDENT_in_import_def972 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def974 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _STRING_in_import_def979 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def981 = new BitSet(new ulong[]{0x41000000000100UL});
		public static readonly BitSet _DEDENT_in_import_def986 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def1008 = new BitSet(new ulong[]{0x0UL,0x0UL,0x10UL});
		public static readonly BitSet _132_in_enum_def1011 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_enum_def1013 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_enum_def1015 = new BitSet(new ulong[]{0x2000000002UL});
		public static readonly BitSet _ident_in_enum_def1018 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_enum_def1021 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_enum_def1023 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000UL});
		public static readonly BitSet _143_in_namespace_def1056 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_namespace_def1058 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1060 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1063 = new BitSet(new ulong[]{0x1002000000100UL,0x8040000000000000UL,0x105408211UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1065 = new BitSet(new ulong[]{0x1002000000100UL,0x8040000000000000UL,0x105408211UL});
		public static readonly BitSet _global_block_in_namespace_def1068 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1092 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_class_def1095 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_class_def1097 = new BitSet(new ulong[]{0x1000000000002UL,0x8800040000UL});
		public static readonly BitSet _generic_parameter_in_class_def1100 = new BitSet(new ulong[]{0x1000000000002UL,0x800040000UL});
		public static readonly BitSet _82_in_class_def1105 = new BitSet(new ulong[]{0x2000000000UL,0x2000000000UL});
		public static readonly BitSet _func_args_in_class_def1107 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_class_def1109 = new BitSet(new ulong[]{0x1000000000002UL,0x800000000UL});
		public static readonly BitSet _99_in_class_def1114 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_class_def1116 = new BitSet(new ulong[]{0x1000000000002UL,0x2000000UL});
		public static readonly BitSet _89_in_class_def1119 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_class_def1121 = new BitSet(new ulong[]{0x1000000000002UL,0x2000000UL});
		public static readonly BitSet _NEWLINE_in_class_def1128 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _INDENT_in_class_def1131 = new BitSet(new ulong[]{0x1002000000100UL,0x8040000000000000UL,0x105408211UL});
		public static readonly BitSet _NEWLINE_in_class_def1133 = new BitSet(new ulong[]{0x1002000000100UL,0x8040000000000000UL,0x105408211UL});
		public static readonly BitSet _global_block_in_class_def1136 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1138 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_type_name_op1179 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_type_name_op1183 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_type_name_op1185 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _80_in_type_name_op1189 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_type_name1198 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000000UL});
		public static readonly BitSet _152_in_type_name1201 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_type_name1204 = new BitSet(new ulong[]{0x2UL,0x40008000110000UL});
		public static readonly BitSet _103_in_type_name1207 = new BitSet(new ulong[]{0x2000000000UL,0x800000000000UL,0x1000001UL});
		public static readonly BitSet _type_name_in_type_name1210 = new BitSet(new ulong[]{0x0UL,0x800002000000UL});
		public static readonly BitSet _89_in_type_name1213 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000001UL});
		public static readonly BitSet _type_name_in_type_name1215 = new BitSet(new ulong[]{0x0UL,0x800002000000UL});
		public static readonly BitSet _111_in_type_name1221 = new BitSet(new ulong[]{0x2UL,0x40000000110000UL});
		public static readonly BitSet _type_name_op_in_type_name1225 = new BitSet(new ulong[]{0x2UL,0x40000000110000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1265 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_generic_parameter_inside1268 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1270 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _103_in_generic_parameter1292 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1294 = new BitSet(new ulong[]{0x0UL,0x800000000000UL});
		public static readonly BitSet _111_in_generic_parameter1296 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1311 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_func_args1314 = new BitSet(new ulong[]{0x2000000000UL,0x2000000000UL});
		public static readonly BitSet _func_args_item_in_func_args1316 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _ident_list_in_func_args_item1338 = new BitSet(new ulong[]{0x0UL,0x800000000UL});
		public static readonly BitSet _99_in_func_args_item1340 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000001UL});
		public static readonly BitSet _type_name_in_func_args_item1342 = new BitSet(new ulong[]{0x2UL,0x102000040000UL});
		public static readonly BitSet _108_in_func_args_item1347 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _101_in_func_args_item1351 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_func_args_item1354 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_func_args_item1402 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CDD0800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_func_args_item1404 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_func_args_item1407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_func_args_item1464 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _modify_expr_in_func_args_item1468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1479 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x101000001UL});
		public static readonly BitSet _type_name_in_func_def1482 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x100000000UL});
		public static readonly BitSet _160_in_func_def1485 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_func_def1488 = new BitSet(new ulong[]{0x0UL,0x8000040000UL});
		public static readonly BitSet _generic_parameter_in_func_def1490 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_func_def1493 = new BitSet(new ulong[]{0x2000000000UL,0x2000080000UL});
		public static readonly BitSet _func_args_in_func_def1495 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_func_def1498 = new BitSet(new ulong[]{0x1000000000000UL,0x100000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1501 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1504 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_func_def1553 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_func_def1555 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1596 = new BitSet(new ulong[]{0x1002000000100UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1598 = new BitSet(new ulong[]{0x1002000000100UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _stmt_in_stmt_block1603 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1605 = new BitSet(new ulong[]{0x1002000000100UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _DEDENT_in_stmt_block1610 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1630 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1635 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1640 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1650 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1655 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1660 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1674 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _136_in_stmt_expr1684 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1686 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _151_in_stmt_expr1715 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1717 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _156_in_stmt_expr1746 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1748 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _153_in_stmt_expr1777 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1779 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _134_in_stmt_expr1808 = new BitSet(new ulong[]{0x2000000000UL,0x50000UL});
		public static readonly BitSet _80_in_stmt_expr1812 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_stmt_expr1815 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_stmt_expr1817 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1819 = new BitSet(new ulong[]{0x0UL,0x0UL,0x100004UL});
		public static readonly BitSet _148_in_stmt_expr1823 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1825 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL,0x12800140UL});
		public static readonly BitSet _125_in_stmt_expr1828 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1830 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _130_in_stmt_expr1884 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1886 = new BitSet(new ulong[]{0x2UL,0x2000000000000000UL,0x12800140UL});
		public static readonly BitSet _125_in_stmt_expr1889 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1891 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _82_in_stmt_expr1974 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1976 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_stmt_expr1978 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1980 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_stmt_expr1982 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_expr1984 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_stmt_expr1986 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_expr1988 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_expr1991 = new BitSet(new ulong[]{0x2UL,0x0UL,0x12800140UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item2066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item2071 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item2076 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item2086 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_defer2097 = new BitSet(new ulong[]{0x2000000000UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _stmt_in_stmt_defer2099 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _133_in_stmt_defer2112 = new BitSet(new ulong[]{0x2000000000UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _stmt_in_stmt_defer2114 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _150_in_stmt_typedef2133 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_stmt_typedef2135 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_stmt_typedef2137 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000001UL});
		public static readonly BitSet _type_name_in_stmt_typedef2139 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item2158 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _143_in_stmt_using_item2162 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _154_in_stmt_using2170 = new BitSet(new ulong[]{0x2000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using2172 = new BitSet(new ulong[]{0x2000000002UL,0x0UL,0x8000UL});
		public static readonly BitSet _146_in_stmt_return2193 = new BitSet(new ulong[]{0x42002000000002UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_return2195 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_stmt_if2216 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_if2218 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2221 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2224 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2227 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_stmt_if2230 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_if2264 = new BitSet(new ulong[]{0x2000000000UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _stmt_in_stmt_if2266 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _151_in_stmt_if2291 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_if2293 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2296 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2299 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x8UL});
		public static readonly BitSet _NEWLINE_in_stmt_if2302 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x8UL});
		public static readonly BitSet _131_in_stmt_if2305 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if2307 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_if2343 = new BitSet(new ulong[]{0x2000000000UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _stmt_in_stmt_if2345 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _156_in_stmt_while2380 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_while2382 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2386 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2389 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_while2413 = new BitSet(new ulong[]{0x2000000000UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _stmt_in_stmt_while2415 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _153_in_stmt_while2443 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_while2445 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x80000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2449 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2452 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_while2476 = new BitSet(new ulong[]{0x2000000000UL,0x20000000040000UL,0x1EE461E2UL});
		public static readonly BitSet _stmt_in_stmt_while2478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_while2506 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2508 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2511 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_stmt_for2530 = new BitSet(new ulong[]{0x2000000000UL,0x50000UL});
		public static readonly BitSet _80_in_stmt_for2534 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_stmt_for2537 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_stmt_for2539 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2541 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x100004UL});
		public static readonly BitSet _148_in_stmt_for2545 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2547 = new BitSet(new ulong[]{0x1000000000000UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_stmt_for2550 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2552 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2556 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_stmt_for2612 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2614 = new BitSet(new ulong[]{0x1000000000000UL,0x2000000000000000UL});
		public static readonly BitSet _125_in_stmt_for2617 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2619 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2623 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2626 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2679 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2682 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_stmt_for2719 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2721 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_stmt_for2723 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2725 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_stmt_for2727 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_for2729 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_stmt_for2731 = new BitSet(new ulong[]{0x1000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2733 = new BitSet(new ulong[]{0x1004000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2736 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_try2766 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2768 = new BitSet(new ulong[]{0x0UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_stmt_try2770 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2772 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2774 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_linq_item2797 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_linq_item2799 = new BitSet(new ulong[]{0x0UL,0x0UL,0x400UL});
		public static readonly BitSet _138_in_linq_item2801 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_linq_item2803 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _141_in_linq_item2818 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_linq_item2820 = new BitSet(new ulong[]{0x0UL,0x100000000000UL});
		public static readonly BitSet _108_in_linq_item2822 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_linq_item2824 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _155_in_linq_item2839 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_linq_item2841 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix2861 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x8002080UL});
		public static readonly BitSet _linq_item_in_linq_prefix2863 = new BitSet(new ulong[]{0x1000000000000UL,0x0UL,0x8002080UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix2866 = new BitSet(new ulong[]{0x1000000000002UL,0x0UL,0x8002080UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq2889 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq2891 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2912 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_ident_list2915 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_ident_list2917 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2939 = new BitSet(new ulong[]{0x0UL,0x2800000000UL});
		public static readonly BitSet _99_in_stmt_alloc2943 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000001UL});
		public static readonly BitSet _type_name_in_stmt_alloc2945 = new BitSet(new ulong[]{0x2UL,0x102000040000UL});
		public static readonly BitSet _108_in_stmt_alloc2950 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _101_in_stmt_alloc2954 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_alloc2957 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_stmt_alloc3005 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CDD0800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_stmt_alloc3007 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_stmt_alloc3010 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_stmt_alloc3071 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_alloc3075 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_stmt_alloc3078 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_alloc3080 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _lvalue_in_stmt_modify3106 = new BitSet(new ulong[]{0x2UL,0x214140411224000UL,0x40000000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify3110 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_stmt_modify3113 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _116_in_stmt_modify3127 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _modify_expr_in_stmt_modify3130 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _list_expr_in_expr3143 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_list_expr3154 = new BitSet(new ulong[]{0x43006000000100UL,0xE000000ED50800UL,0x100010000UL});
		public static readonly BitSet _89_in_list_expr3158 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3162 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _INDENT_in_list_expr3166 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _DEDENT_in_list_expr3170 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _list_expr_in_list_expr3174 = new BitSet(new ulong[]{0x1004000000100UL,0x80000002000000UL});
		public static readonly BitSet _89_in_list_expr3178 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3182 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _INDENT_in_list_expr3186 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _DEDENT_in_list_expr3190 = new BitSet(new ulong[]{0x43006000000100UL,0x6000000ED50800UL,0x100010000UL});
		public static readonly BitSet _list_expr_in_list_expr3194 = new BitSet(new ulong[]{0x1004000000100UL,0x80000002000000UL});
		public static readonly BitSet _89_in_list_expr3201 = new BitSet(new ulong[]{0x1004000000100UL,0x80000002000000UL});
		public static readonly BitSet _NEWLINE_in_list_expr3205 = new BitSet(new ulong[]{0x1004000000100UL,0x80000002000000UL});
		public static readonly BitSet _INDENT_in_list_expr3209 = new BitSet(new ulong[]{0x1004000000100UL,0x80000002000000UL});
		public static readonly BitSet _DEDENT_in_list_expr3213 = new BitSet(new ulong[]{0x1004000000100UL,0x80000002000000UL});
		public static readonly BitSet _119_in_list_expr3217 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_list_expr3231 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_lambda_expr3242 = new BitSet(new ulong[]{0x2000000000UL,0x2000080000UL});
		public static readonly BitSet _func_args_in_lambda_expr3244 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_lambda_expr3247 = new BitSet(new ulong[]{0x0UL,0x400020000000UL});
		public static readonly BitSet _93_in_lambda_expr3251 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_lambda_expr3253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_lambda_expr3293 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_lambda_expr3295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr3315 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr3372 = new BitSet(new ulong[]{0x2UL,0x204142411224000UL,0x40000000UL});
		public static readonly BitSet _set_in_modify_expr3376 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3421 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_modify_expr3430 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _cond_expr_in_modify_expr3433 = new BitSet(new ulong[]{0x2UL,0x100000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item3446 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr3458 = new BitSet(new ulong[]{0x2UL,0x8000000000000UL});
		public static readonly BitSet _115_in_cond_expr3467 = new BitSet(new ulong[]{0x42002000000002UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3473 = new BitSet(new ulong[]{0x2UL,0x800000000UL});
		public static readonly BitSet _99_in_cond_expr3477 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr3481 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr3595 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80020000UL});
		public static readonly BitSet _or_op_in_or_expr3606 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _and_expr_in_or_expr3610 = new BitSet(new ulong[]{0x2UL,0x0UL,0x80020000UL});
		public static readonly BitSet _bit_or_in_and_expr3652 = new BitSet(new ulong[]{0x2UL,0x800000000008000UL});
		public static readonly BitSet _and_op_in_and_expr3663 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _bit_or_in_and_expr3667 = new BitSet(new ulong[]{0x2UL,0x800000000008000UL});
		public static readonly BitSet _bit_xor_in_bit_or3698 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000UL});
		public static readonly BitSet _157_in_bit_or3707 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _bit_xor_in_bit_or3711 = new BitSet(new ulong[]{0x2UL,0x0UL,0x20000000UL});
		public static readonly BitSet _bit_and_in_bit_xor3741 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _120_in_bit_xor3750 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _bit_and_in_bit_xor3754 = new BitSet(new ulong[]{0x2UL,0x100000000000000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3784 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _80_in_bit_and3793 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _cmp_expr_in_bit_and3797 = new BitSet(new ulong[]{0x2UL,0x10000UL});
		public static readonly BitSet _chain_op_in_chain_list3889 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _infix_expr_in_chain_list3891 = new BitSet(new ulong[]{0x2UL,0x1A88000001000UL,0x1800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3905 = new BitSet(new ulong[]{0x0UL,0x1A88000001000UL,0x1800UL});
		public static readonly BitSet _103_in_cmp_expr3915 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3919 = new BitSet(new ulong[]{0x2000000002UL,0x1A88000001000UL,0x1800UL});
		public static readonly BitSet _ident_in_cmp_expr3925 = new BitSet(new ulong[]{0x2000000000UL,0x800000000000UL});
		public static readonly BitSet _111_in_cmp_expr3928 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_cmp_expr3930 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CDD0800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_cmp_expr3932 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_cmp_expr3935 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _chain_list_in_cmp_expr4004 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _no_less_op_in_cmp_expr4081 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _infix_expr_in_cmp_expr4085 = new BitSet(new ulong[]{0x2UL,0x1A88000001000UL,0x1800UL});
		public static readonly BitSet _chain_list_in_cmp_expr4089 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_infix_expr4179 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr4189 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _shift_expr_in_infix_expr4193 = new BitSet(new ulong[]{0x2UL,0x400000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr4236 = new BitSet(new ulong[]{0x2UL,0x2020000000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr4245 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _add_expr_in_shift_expr4249 = new BitSet(new ulong[]{0x2UL,0x2020000000000UL});
		public static readonly BitSet _mul_expr_in_add_expr4279 = new BitSet(new ulong[]{0x2UL,0x4400000UL});
		public static readonly BitSet _86_in_add_expr4289 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _mul_expr_in_add_expr4293 = new BitSet(new ulong[]{0x2UL,0x4400000UL});
		public static readonly BitSet _90_in_add_expr4318 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _mul_expr_in_add_expr4322 = new BitSet(new ulong[]{0x2UL,0x4400000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4360 = new BitSet(new ulong[]{0x2UL,0x200102000UL});
		public static readonly BitSet _84_in_mul_expr4370 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4374 = new BitSet(new ulong[]{0x2UL,0x200102000UL});
		public static readonly BitSet _97_in_mul_expr4404 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4408 = new BitSet(new ulong[]{0x2UL,0x200102000UL});
		public static readonly BitSet _77_in_mul_expr4438 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _selector_expr_in_mul_expr4442 = new BitSet(new ulong[]{0x2UL,0x200102000UL});
		public static readonly BitSet _cast_expr_in_selector_expr4485 = new BitSet(new ulong[]{0x2UL,0x140000000UL});
		public static readonly BitSet _94_in_selector_expr4495 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_selector_expr4499 = new BitSet(new ulong[]{0x2UL,0x140000000UL});
		public static readonly BitSet _96_in_selector_expr4525 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_selector_expr4530 = new BitSet(new ulong[]{0x2UL,0x140000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4570 = new BitSet(new ulong[]{0x2UL,0x1000000000000000UL});
		public static readonly BitSet _124_in_cast_expr4579 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_cast_expr4581 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000001UL});
		public static readonly BitSet _type_name_in_cast_expr4583 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_cast_expr4585 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4643 = new BitSet(new ulong[]{0x42002000000000UL,0x2000000CD50800UL,0x100010000UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_prefix_expr4661 = new BitSet(new ulong[]{0x2000000000UL,0x0UL,0x1000001UL});
		public static readonly BitSet _type_name_in_prefix_expr4663 = new BitSet(new ulong[]{0x0UL,0x40000000040000UL});
		public static readonly BitSet _82_in_prefix_expr4667 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CDD0800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_prefix_expr4669 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_prefix_expr4672 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _118_in_prefix_expr4694 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_prefix_expr4696 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_prefix_expr4698 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4714 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4726 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _89_in_expr_list4729 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_expr_list4732 = new BitSet(new ulong[]{0x2UL,0x2000000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4748 = new BitSet(new ulong[]{0x2UL,0x400000A8840000UL});
		public static readonly BitSet _87_in_suffix_expr4758 = new BitSet(new ulong[]{0x2UL,0x400000A8840000UL});
		public static readonly BitSet _91_in_suffix_expr4784 = new BitSet(new ulong[]{0x2UL,0x400000A8840000UL});
		public static readonly BitSet _95_in_suffix_expr4807 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4809 = new BitSet(new ulong[]{0x2UL,0x400000A8840000UL});
		public static readonly BitSet _93_in_suffix_expr4834 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_suffix_expr4836 = new BitSet(new ulong[]{0x2UL,0x400000A8840000UL});
		public static readonly BitSet _82_in_suffix_expr4861 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CDD0800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4863 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_suffix_expr4866 = new BitSet(new ulong[]{0x2UL,0x400000A8840000UL});
		public static readonly BitSet _118_in_suffix_expr4890 = new BitSet(new ulong[]{0x42002000000000UL,0xE000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_suffix_expr4892 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_suffix_expr4895 = new BitSet(new ulong[]{0x2UL,0x400000A8840000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4941 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4951 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_atom_expr4956 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_atom_expr4958 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_atom_expr4971 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_atom_expr4973 = new BitSet(new ulong[]{0x0UL,0x2080000UL});
		public static readonly BitSet _89_in_atom_expr4978 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_in_atom_expr4980 = new BitSet(new ulong[]{0x0UL,0x2080000UL});
		public static readonly BitSet _83_in_atom_expr4984 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _83_in_atom_expr5009 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item5039 = new BitSet(new ulong[]{0x2UL,0x400080A8840000UL});
		public static readonly BitSet _87_in_lvalue_item5049 = new BitSet(new ulong[]{0x2UL,0x400080A8840000UL});
		public static readonly BitSet _91_in_lvalue_item5077 = new BitSet(new ulong[]{0x2UL,0x400080A8840000UL});
		public static readonly BitSet _95_in_lvalue_item5102 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_lvalue_item5104 = new BitSet(new ulong[]{0x2UL,0x400080A8840000UL});
		public static readonly BitSet _93_in_lvalue_item5131 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_lvalue_item5133 = new BitSet(new ulong[]{0x2UL,0x400080A8840000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item5160 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_lvalue_item5163 = new BitSet(new ulong[]{0x42002000000000UL,0x6000000CDD0800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_lvalue_item5165 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_lvalue_item5168 = new BitSet(new ulong[]{0x2UL,0x400080A8840000UL});
		public static readonly BitSet _118_in_lvalue_item5197 = new BitSet(new ulong[]{0x42002000000000UL,0xE000000CD50800UL,0x100010000UL});
		public static readonly BitSet _expr_list_in_lvalue_item5199 = new BitSet(new ulong[]{0x0UL,0x80000000000000UL});
		public static readonly BitSet _119_in_lvalue_item5202 = new BitSet(new ulong[]{0x2UL,0x400080A8840000UL});
		public static readonly BitSet _ident_in_lvalue_atom5241 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _117_in_lvalue_atom5246 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_lvalue_atom5248 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _82_in_lvalue5267 = new BitSet(new ulong[]{0x2000000000UL,0x20000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5269 = new BitSet(new ulong[]{0x0UL,0x2000000UL});
		public static readonly BitSet _89_in_lvalue5272 = new BitSet(new ulong[]{0x2000000000UL,0x20000000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue5274 = new BitSet(new ulong[]{0x0UL,0x2080000UL});
		public static readonly BitSet _83_in_lvalue5278 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue5292 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident5303 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _100_in_ident5306 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _IDENT_in_ident5308 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _122_in_infix_func5321 = new BitSet(new ulong[]{0x2000000000UL});
		public static readonly BitSet _ident_in_infix_func5324 = new BitSet(new ulong[]{0x0UL,0x400000000000000UL});
		public static readonly BitSet _122_in_infix_func5326 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
