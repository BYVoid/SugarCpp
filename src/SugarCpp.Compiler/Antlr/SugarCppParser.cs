//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-02 20:59:17

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "'\\\\'", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int EXPONENT=9;
	public const int Enum=10;
	public const int Expr_Access=11;
	public const int Expr_Alloc=12;
	public const int Expr_Bin=13;
	public const int Expr_Bracket=14;
	public const int Expr_Call=15;
	public const int Expr_Call_With=16;
	public const int Expr_Cond=17;
	public const int Expr_Dict=18;
	public const int Expr_Infix=19;
	public const int Expr_Lambda=20;
	public const int Expr_New_Array=21;
	public const int Expr_New_Type=22;
	public const int Expr_Prefix=23;
	public const int Expr_Return=24;
	public const int Expr_Suffix=25;
	public const int Expr_Tuple=26;
	public const int Func_Args=27;
	public const int Func_Def=28;
	public const int Generic_Patameters=29;
	public const int Global_Block=30;
	public const int IDENT=31;
	public const int INDENT=32;
	public const int Ident_List=33;
	public const int Import=34;
	public const int Left_Bracket=35;
	public const int LineComment=36;
	public const int Match_Tuple=37;
	public const int NEWLINE=38;
	public const int NUMBER=39;
	public const int Namespace=40;
	public const int Right_Bracket=41;
	public const int Root=42;
	public const int SP=43;
	public const int STRING=44;
	public const int Stmt_Block=45;
	public const int Stmt_For=46;
	public const int Stmt_ForEach=47;
	public const int Stmt_If=48;
	public const int Stmt_Try=49;
	public const int Stmt_Typedef=50;
	public const int Stmt_Using=51;
	public const int Stmt_While=52;
	public const int Type_IDENT=53;
	public const int Type_Ref=54;
	public const int Type_Tuple=55;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[218+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:155:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int root_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(155, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// SugarCpp.g:156:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:156:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(156, 4);
			// SugarCpp.g:156:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:156:4: NEWLINE
					{
					DebugLocation(156, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root413); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(156, 13);
			PushFollow(Follow._global_block_in_root416);
			global_block2=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block2.Tree);
			DebugLocation(156, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root418); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 156:30: -> ^( Root global_block )
			{
				DebugLocation(156, 33);
				// SugarCpp.g:156:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(156, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(156, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
			if (state.backtracking > 0) { Memoize(input, 1, root_StartIndex); }

		}
		DebugLocation(157, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:159:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(159, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// SugarCpp.g:160:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:160:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(160, 4);
			// SugarCpp.g:160:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==95||LA3_0==102||LA3_0==104||LA3_0==107||LA3_0==109||(LA3_0>=113 && LA3_0<=114)||LA3_0==119))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:160:5: node ( NEWLINE )+
					{
					DebugLocation(160, 5);
					PushFollow(Follow._node_in_global_block438);
					node4=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_node.Add(node4.Tree);
					DebugLocation(160, 10);
					// SugarCpp.g:160:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:160:10: NEWLINE
							{
							DebugLocation(160, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block440); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 160:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(160, 24);
				// SugarCpp.g:160:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(160, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(160, 39);
				// SugarCpp.g:160:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(160, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
			if (state.backtracking > 0) { Memoize(input, 2, global_block_StartIndex); }

		}
		DebugLocation(161, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:163:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(163, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// SugarCpp.g:164:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:164:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(164, 4);
				PushFollow(Follow._func_def_in_node463);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:165:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(165, 4);
				PushFollow(Follow._class_def_in_node468);
				class_def7=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:166:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(166, 4);
				PushFollow(Follow._enum_def_in_node473);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:167:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(167, 4);
				PushFollow(Follow._global_alloc_in_node478);
				global_alloc9=global_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:168:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(168, 4);
				PushFollow(Follow._global_using_in_node483);
				global_using10=global_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:169:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(169, 4);
				PushFollow(Follow._global_typedef_in_node488);
				global_typedef11=global_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:170:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(170, 4);
				PushFollow(Follow._import_def_in_node493);
				import_def12=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:171:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(171, 4);
				PushFollow(Follow._namespace_def_in_node498);
				namespace_def13=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
			if (state.backtracking > 0) { Memoize(input, 3, node_StartIndex); }

		}
		DebugLocation(172, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:174:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(174, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// SugarCpp.g:175:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:175:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(175, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args510); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:176:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(176, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args515); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:177:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(177, 4);
				PushFollow(Follow._ident_in_attribute_args520);
				ident16=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
			if (state.backtracking > 0) { Memoize(input, 4, attribute_args_StartIndex); }

		}
		DebugLocation(178, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:180:1: attribute_item : ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) ;
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(180, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// SugarCpp.g:181:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:181:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
			{
			DebugLocation(181, 4);
			PushFollow(Follow._ident_in_attribute_item531);
			ident17=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident17.Tree);
			DebugLocation(181, 10);
			// SugarCpp.g:181:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
			int alt7=2;
			try { DebugEnterSubRule(7);
			try { DebugEnterDecision(7, false);
			int LA7_0 = input.LA(1);

			if ((LA7_0==63))
			{
				alt7 = 1;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:181:11: '(' attribute_args ( ',' attribute_args )* ')'
				{
				DebugLocation(181, 11);
				char_literal18=(IToken)Match(input,63,Follow._63_in_attribute_item534); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_63.Add(char_literal18);

				DebugLocation(181, 15);
				PushFollow(Follow._attribute_args_in_attribute_item536);
				attribute_args19=attribute_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute_args.Add(attribute_args19.Tree);
				DebugLocation(181, 30);
				// SugarCpp.g:181:30: ( ',' attribute_args )*
				try { DebugEnterSubRule(6);
				while (true)
				{
					int alt6=2;
					try { DebugEnterDecision(6, false);
					int LA6_0 = input.LA(1);

					if ((LA6_0==70))
					{
						alt6 = 1;
					}


					} finally { DebugExitDecision(6); }
					switch ( alt6 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:181:31: ',' attribute_args
						{
						DebugLocation(181, 31);
						char_literal20=(IToken)Match(input,70,Follow._70_in_attribute_item539); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_70.Add(char_literal20);

						DebugLocation(181, 35);
						PushFollow(Follow._attribute_args_in_attribute_item541);
						attribute_args21=attribute_args();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_attribute_args.Add(attribute_args21.Tree);

						}
						break;

					default:
						goto loop6;
					}
				}

				loop6:
					;

				} finally { DebugExitSubRule(6); }

				DebugLocation(181, 52);
				char_literal22=(IToken)Match(input,64,Follow._64_in_attribute_item545); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_64.Add(char_literal22);


				}
				break;

			}
			} finally { DebugExitSubRule(7); }



			{
			// AST REWRITE
			// elements: ident, attribute_args
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 181:58: -> ^( Attribute ident ( attribute_args )* )
			{
				DebugLocation(181, 61);
				// SugarCpp.g:181:61: ^( Attribute ident ( attribute_args )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(181, 63);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(181, 73);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(181, 79);
				// SugarCpp.g:181:79: ( attribute_args )*
				while ( stream_attribute_args.HasNext )
				{
					DebugLocation(181, 79);
					adaptor.AddChild(root_1, stream_attribute_args.NextTree());

				}
				stream_attribute_args.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
			if (state.backtracking > 0) { Memoize(input, 5, attribute_item_StartIndex); }

		}
		DebugLocation(182, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:184:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		IToken char_literal27 = default(IToken);
		IToken NEWLINE28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		CommonTree char_literal27_tree = default(CommonTree);
		CommonTree NEWLINE28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(184, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// SugarCpp.g:185:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:185:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(185, 4);
			// SugarCpp.g:185:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt10=0;
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==95))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch (alt10)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:185:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(185, 5);
					char_literal23=(IToken)Match(input,95,Follow._95_in_attribute570); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal23);

					DebugLocation(185, 9);
					PushFollow(Follow._attribute_item_in_attribute572);
					attribute_item24=attribute_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute_item.Add(attribute_item24.Tree);
					DebugLocation(185, 24);
					// SugarCpp.g:185:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==70))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:185:25: ',' attribute_item
							{
							DebugLocation(185, 25);
							char_literal25=(IToken)Match(input,70,Follow._70_in_attribute575); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_70.Add(char_literal25);

							DebugLocation(185, 29);
							PushFollow(Follow._attribute_item_in_attribute577);
							attribute_item26=attribute_item();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_attribute_item.Add(attribute_item26.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(185, 46);
					char_literal27=(IToken)Match(input,97,Follow._97_in_attribute581); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal27);

					DebugLocation(185, 50);
					// SugarCpp.g:185:50: ( NEWLINE )+
					int cnt9=0;
					try { DebugEnterSubRule(9);
					while (true)
					{
						int alt9=2;
						try { DebugEnterDecision(9, false);
						int LA9_0 = input.LA(1);

						if ((LA9_0==NEWLINE))
						{
							alt9 = 1;
						}


						} finally { DebugExitDecision(9); }
						switch (alt9)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:185:50: NEWLINE
							{
							DebugLocation(185, 50);
							NEWLINE28=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute583); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE28);


							}
							break;

						default:
							if (cnt9 >= 1)
								goto loop9;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee9 = new EarlyExitException( 9, input );
							DebugRecognitionException(eee9);
							throw eee9;
						}
						cnt9++;
					}
					loop9:
						;

					} finally { DebugExitSubRule(9); }


					}
					break;

				default:
					if (cnt10 >= 1)
						goto loop10;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee10 = new EarlyExitException( 10, input );
					DebugRecognitionException(eee10);
					throw eee10;
				}
				cnt10++;
			}
			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 185:61: -> ( attribute_item )+
			{
				DebugLocation(185, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(185, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 6, attribute_StartIndex); }

		}
		DebugLocation(186, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:188:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken string_literal37 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute29 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name32 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr38 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree string_literal37_tree = default(CommonTree);
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(188, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// SugarCpp.g:189:2: ( ( attribute )? ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) )
			int alt14=2;
			try { DebugEnterDecision(14, false);
			try
			{
				alt14 = dfa14.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:189:4: ( attribute )? ident_list ':' type_name ( '=' expr )?
				{
				DebugLocation(189, 4);
				// SugarCpp.g:189:4: ( attribute )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==95))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:189:4: attribute
					{
					DebugLocation(189, 4);
					PushFollow(Follow._attribute_in_global_alloc602);
					attribute29=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute.Add(attribute29.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(189, 15);
				PushFollow(Follow._ident_list_in_global_alloc605);
				ident_list30=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list30.Tree);
				DebugLocation(189, 26);
				char_literal31=(IToken)Match(input,80,Follow._80_in_global_alloc607); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_80.Add(char_literal31);

				DebugLocation(189, 30);
				PushFollow(Follow._type_name_in_global_alloc609);
				type_name32=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name32.Tree);
				DebugLocation(189, 40);
				// SugarCpp.g:189:40: ( '=' expr )?
				int alt12=2;
				try { DebugEnterSubRule(12);
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==88))
				{
					alt12 = 1;
				}
				} finally { DebugExitDecision(12); }
				switch (alt12)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:189:41: '=' expr
					{
					DebugLocation(189, 41);
					char_literal33=(IToken)Match(input,88,Follow._88_in_global_alloc612); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal33);

					DebugLocation(189, 45);
					PushFollow(Follow._expr_in_global_alloc614);
					expr34=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr34.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(12); }



				{
				// AST REWRITE
				// elements: type_name, expr, ident_list, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 189:52: -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? )
				{
					DebugLocation(189, 55);
					// SugarCpp.g:189:55: ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(189, 57);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(189, 68);
					// SugarCpp.g:189:68: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(189, 68);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(189, 79);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(189, 89);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(189, 100);
					// SugarCpp.g:189:100: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(189, 100);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:190:4: ( attribute )? ident ':=' modify_expr
				{
				DebugLocation(190, 4);
				// SugarCpp.g:190:4: ( attribute )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==95))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:4: attribute
					{
					DebugLocation(190, 4);
					PushFollow(Follow._attribute_in_global_alloc637);
					attribute35=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_attribute.Add(attribute35.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(190, 15);
				PushFollow(Follow._ident_in_global_alloc640);
				ident36=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident36.Tree);
				DebugLocation(190, 21);
				string_literal37=(IToken)Match(input,82,Follow._82_in_global_alloc642); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_82.Add(string_literal37);

				DebugLocation(190, 26);
				PushFollow(Follow._modify_expr_in_global_alloc644);
				modify_expr38=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(modify_expr38.Tree);


				{
				// AST REWRITE
				// elements: ident, 82, attribute, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 190:38: -> ^( ':=' ( attribute )? ident modify_expr )
				{
					DebugLocation(190, 41);
					// SugarCpp.g:190:41: ^( ':=' ( attribute )? ident modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(190, 43);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_82.NextNode(), root_1);

					DebugLocation(190, 48);
					// SugarCpp.g:190:48: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(190, 48);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(190, 59);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(190, 65);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
			if (state.backtracking > 0) { Memoize(input, 7, global_alloc_StartIndex); }

		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:193:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using39 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(193, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// SugarCpp.g:194:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:194:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(194, 4);
			PushFollow(Follow._stmt_using_in_global_using668);
			stmt_using39=stmt_using();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using39.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
			if (state.backtracking > 0) { Memoize(input, 8, global_using_StartIndex); }

		}
		DebugLocation(195, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:197:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int global_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(197, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// SugarCpp.g:198:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:198:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(198, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef679);
			stmt_typedef40=stmt_typedef();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef40.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
			if (state.backtracking > 0) { Memoize(input, 9, global_typedef_StartIndex); }

		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:201:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int import_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal41 = default(IToken);
		IToken STRING42 = default(IToken);
		IToken NEWLINE43 = default(IToken);
		IToken INDENT44 = default(IToken);
		IToken NEWLINE45 = default(IToken);
		IToken STRING46 = default(IToken);
		IToken NEWLINE47 = default(IToken);
		IToken DEDENT48 = default(IToken);

		CommonTree string_literal41_tree = default(CommonTree);
		CommonTree STRING42_tree = default(CommonTree);
		CommonTree NEWLINE43_tree = default(CommonTree);
		CommonTree INDENT44_tree = default(CommonTree);
		CommonTree NEWLINE45_tree = default(CommonTree);
		CommonTree STRING46_tree = default(CommonTree);
		CommonTree NEWLINE47_tree = default(CommonTree);
		CommonTree DEDENT48_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(201, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// SugarCpp.g:202:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:202:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(202, 4);
			string_literal41=(IToken)Match(input,107,Follow._107_in_import_def690); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_107.Add(string_literal41);

			DebugLocation(202, 13);
			// SugarCpp.g:202:13: ( STRING )?
			int alt15=2;
			try { DebugEnterSubRule(15);
			try { DebugEnterDecision(15, false);
			int LA15_0 = input.LA(1);

			if ((LA15_0==STRING))
			{
				alt15 = 1;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:202:13: STRING
				{
				DebugLocation(202, 13);
				STRING42=(IToken)Match(input,STRING,Follow._STRING_in_import_def692); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING42);


				}
				break;

			}
			} finally { DebugExitSubRule(15); }

			DebugLocation(202, 21);
			// SugarCpp.g:202:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			try
			{
				alt20 = dfa20.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:202:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(202, 22);
				// SugarCpp.g:202:22: ( NEWLINE )+
				int cnt16=0;
				try { DebugEnterSubRule(16);
				while (true)
				{
					int alt16=2;
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==NEWLINE))
					{
						alt16 = 1;
					}


					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:202:22: NEWLINE
						{
						DebugLocation(202, 22);
						NEWLINE43=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def696); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE43);


						}
						break;

					default:
						if (cnt16 >= 1)
							goto loop16;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee16 = new EarlyExitException( 16, input );
						DebugRecognitionException(eee16);
						throw eee16;
					}
					cnt16++;
				}
				loop16:
					;

				} finally { DebugExitSubRule(16); }

				DebugLocation(202, 31);
				INDENT44=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def699); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT44);

				DebugLocation(202, 38);
				// SugarCpp.g:202:38: ( NEWLINE )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_0 = input.LA(1);

					if ((LA17_0==NEWLINE))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:202:38: NEWLINE
						{
						DebugLocation(202, 38);
						NEWLINE45=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def701); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE45);


						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(202, 48);
				// SugarCpp.g:202:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_0 = input.LA(1);

					if ((LA19_0==STRING))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:202:49: STRING ( NEWLINE )+
						{
						DebugLocation(202, 49);
						STRING46=(IToken)Match(input,STRING,Follow._STRING_in_import_def706); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING46);

						DebugLocation(202, 56);
						// SugarCpp.g:202:56: ( NEWLINE )+
						int cnt18=0;
						try { DebugEnterSubRule(18);
						while (true)
						{
							int alt18=2;
							try { DebugEnterDecision(18, false);
							int LA18_0 = input.LA(1);

							if ((LA18_0==NEWLINE))
							{
								alt18 = 1;
							}


							} finally { DebugExitDecision(18); }
							switch (alt18)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:202:56: NEWLINE
								{
								DebugLocation(202, 56);
								NEWLINE47=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def708); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE47);


								}
								break;

							default:
								if (cnt18 >= 1)
									goto loop18;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee18 = new EarlyExitException( 18, input );
								DebugRecognitionException(eee18);
								throw eee18;
							}
							cnt18++;
						}
						loop18:
							;

						} finally { DebugExitSubRule(18); }


						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(202, 67);
				DEDENT48=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def713); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT48);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 202:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(202, 79);
				// SugarCpp.g:202:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(202, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(202, 88);
				// SugarCpp.g:202:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(202, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
			if (state.backtracking > 0) { Memoize(input, 10, import_def_StartIndex); }

		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:205:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enum_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal50 = default(IToken);
		IToken char_literal52 = default(IToken);
		IToken char_literal54 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute49 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident51 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident55 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal50_tree = default(CommonTree);
		CommonTree char_literal52_tree = default(CommonTree);
		CommonTree char_literal54_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(205, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// SugarCpp.g:206:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:206:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(206, 4);
			// SugarCpp.g:206:4: ( attribute )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==95))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:4: attribute
				{
				DebugLocation(206, 4);
				PushFollow(Follow._attribute_in_enum_def735);
				attribute49=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute49.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(206, 15);
			string_literal50=(IToken)Match(input,104,Follow._104_in_enum_def738); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_104.Add(string_literal50);

			DebugLocation(206, 22);
			PushFollow(Follow._ident_in_enum_def740);
			ident51=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident51.Tree);
			DebugLocation(206, 28);
			char_literal52=(IToken)Match(input,88,Follow._88_in_enum_def742); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal52);

			DebugLocation(206, 32);
			// SugarCpp.g:206:32: ( ident ( '|' ident )* )?
			int alt23=2;
			try { DebugEnterSubRule(23);
			try { DebugEnterDecision(23, false);
			int LA23_0 = input.LA(1);

			if ((LA23_0==IDENT))
			{
				alt23 = 1;
			}
			} finally { DebugExitDecision(23); }
			switch (alt23)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:33: ident ( '|' ident )*
				{
				DebugLocation(206, 33);
				PushFollow(Follow._ident_in_enum_def745);
				ident53=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident.Add(ident53.Tree);
				DebugLocation(206, 39);
				// SugarCpp.g:206:39: ( '|' ident )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==116))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:206:40: '|' ident
						{
						DebugLocation(206, 40);
						char_literal54=(IToken)Match(input,116,Follow._116_in_enum_def748); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_116.Add(char_literal54);

						DebugLocation(206, 44);
						PushFollow(Follow._ident_in_enum_def750);
						ident55=ident();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_ident.Add(ident55.Tree);

						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }


				}
				break;

			}
			} finally { DebugExitSubRule(23); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 206:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(206, 57);
				// SugarCpp.g:206:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(206, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(206, 64);
				// SugarCpp.g:206:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(206, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(206, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(206, 81);
				// SugarCpp.g:206:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(206, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(206, 94);
				// SugarCpp.g:206:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(206, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
			if (state.backtracking > 0) { Memoize(input, 11, enum_def_StartIndex); }

		}
		DebugLocation(207, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:209:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespace_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal56 = default(IToken);
		IToken NEWLINE58 = default(IToken);
		IToken INDENT59 = default(IToken);
		IToken NEWLINE60 = default(IToken);
		IToken DEDENT62 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block61 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal56_tree = default(CommonTree);
		CommonTree NEWLINE58_tree = default(CommonTree);
		CommonTree INDENT59_tree = default(CommonTree);
		CommonTree NEWLINE60_tree = default(CommonTree);
		CommonTree DEDENT62_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(209, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// SugarCpp.g:210:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:210:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(210, 4);
			string_literal56=(IToken)Match(input,109,Follow._109_in_namespace_def783); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(string_literal56);

			DebugLocation(210, 16);
			PushFollow(Follow._ident_in_namespace_def785);
			ident57=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident57.Tree);
			DebugLocation(210, 22);
			// SugarCpp.g:210:22: ( NEWLINE )+
			int cnt24=0;
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==NEWLINE))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch (alt24)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:210:22: NEWLINE
					{
					DebugLocation(210, 22);
					NEWLINE58=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def787); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE58);


					}
					break;

				default:
					if (cnt24 >= 1)
						goto loop24;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee24 = new EarlyExitException( 24, input );
					DebugRecognitionException(eee24);
					throw eee24;
				}
				cnt24++;
			}
			loop24:
				;

			} finally { DebugExitSubRule(24); }

			DebugLocation(210, 31);
			INDENT59=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def790); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT59);

			DebugLocation(210, 38);
			// SugarCpp.g:210:38: ( NEWLINE )*
			try { DebugEnterSubRule(25);
			while (true)
			{
				int alt25=2;
				try { DebugEnterDecision(25, false);
				int LA25_0 = input.LA(1);

				if ((LA25_0==NEWLINE))
				{
					alt25 = 1;
				}


				} finally { DebugExitDecision(25); }
				switch ( alt25 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:210:38: NEWLINE
					{
					DebugLocation(210, 38);
					NEWLINE60=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def792); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE60);


					}
					break;

				default:
					goto loop25;
				}
			}

			loop25:
				;

			} finally { DebugExitSubRule(25); }

			DebugLocation(210, 47);
			PushFollow(Follow._global_block_in_namespace_def795);
			global_block61=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block61.Tree);
			DebugLocation(210, 60);
			DEDENT62=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def797); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT62);



			{
			// AST REWRITE
			// elements: ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 210:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(210, 70);
				// SugarCpp.g:210:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(210, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(210, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(210, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
			if (state.backtracking > 0) { Memoize(input, 12, namespace_def_StartIndex); }

		}
		DebugLocation(211, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:213:1: class_def : ( attribute )? 'class' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Class ( attribute )? ident global_block ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal64 = default(IToken);
		IToken NEWLINE66 = default(IToken);
		IToken INDENT67 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken DEDENT70 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block69 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal64_tree = default(CommonTree);
		CommonTree NEWLINE66_tree = default(CommonTree);
		CommonTree INDENT67_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree DEDENT70_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(213, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// SugarCpp.g:214:2: ( ( attribute )? 'class' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Class ( attribute )? ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:214:5: ( attribute )? 'class' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(214, 5);
			// SugarCpp.g:214:5: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==95))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:214:5: attribute
				{
				DebugLocation(214, 5);
				PushFollow(Follow._attribute_in_class_def819);
				attribute63=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute63.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(214, 16);
			string_literal64=(IToken)Match(input,102,Follow._102_in_class_def822); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(string_literal64);

			DebugLocation(214, 24);
			PushFollow(Follow._ident_in_class_def824);
			ident65=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident65.Tree);
			DebugLocation(214, 30);
			// SugarCpp.g:214:30: ( NEWLINE )+
			int cnt27=0;
			try { DebugEnterSubRule(27);
			while (true)
			{
				int alt27=2;
				try { DebugEnterDecision(27, false);
				int LA27_0 = input.LA(1);

				if ((LA27_0==NEWLINE))
				{
					alt27 = 1;
				}


				} finally { DebugExitDecision(27); }
				switch (alt27)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:214:30: NEWLINE
					{
					DebugLocation(214, 30);
					NEWLINE66=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def826); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE66);


					}
					break;

				default:
					if (cnt27 >= 1)
						goto loop27;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee27 = new EarlyExitException( 27, input );
					DebugRecognitionException(eee27);
					throw eee27;
				}
				cnt27++;
			}
			loop27:
				;

			} finally { DebugExitSubRule(27); }

			DebugLocation(214, 39);
			INDENT67=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def829); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT67);

			DebugLocation(214, 46);
			// SugarCpp.g:214:46: ( NEWLINE )*
			try { DebugEnterSubRule(28);
			while (true)
			{
				int alt28=2;
				try { DebugEnterDecision(28, false);
				int LA28_0 = input.LA(1);

				if ((LA28_0==NEWLINE))
				{
					alt28 = 1;
				}


				} finally { DebugExitDecision(28); }
				switch ( alt28 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:214:46: NEWLINE
					{
					DebugLocation(214, 46);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def831); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					goto loop28;
				}
			}

			loop28:
				;

			} finally { DebugExitSubRule(28); }

			DebugLocation(214, 55);
			PushFollow(Follow._global_block_in_class_def834);
			global_block69=global_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_global_block.Add(global_block69.Tree);
			DebugLocation(214, 68);
			DEDENT70=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def836); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT70);



			{
			// AST REWRITE
			// elements: attribute, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 214:75: -> ^( Class ( attribute )? ident global_block )
			{
				DebugLocation(214, 78);
				// SugarCpp.g:214:78: ^( Class ( attribute )? ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(214, 80);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(214, 86);
				// SugarCpp.g:214:86: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(214, 86);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(214, 97);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(214, 103);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
			if (state.backtracking > 0) { Memoize(input, 13, class_def_StartIndex); }

		}
		DebugLocation(215, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:217:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal71 = default(IToken);
		IToken char_literal72 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal74 = default(IToken);

		CommonTree char_literal71_tree = default(CommonTree);
		CommonTree char_literal72_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree char_literal74_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(217, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// SugarCpp.g:217:13: ( '*' | '[' ']' | '&' )
			int alt29=3;
			try { DebugEnterDecision(29, false);
			switch (input.LA(1))
			{
			case 65:
				{
				alt29 = 1;
				}
				break;
			case 95:
				{
				alt29 = 2;
				}
				break;
			case 61:
				{
				alt29 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 29, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(29); }
			switch (alt29)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:217:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 15);
				char_literal71=(IToken)Match(input,65,Follow._65_in_type_name_op858); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal71_tree = (CommonTree)adaptor.Create(char_literal71);
				adaptor.AddChild(root_0, char_literal71_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:217:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 21);
				char_literal72=(IToken)Match(input,95,Follow._95_in_type_name_op862); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal72_tree = (CommonTree)adaptor.Create(char_literal72);
				adaptor.AddChild(root_0, char_literal72_tree);
				}
				DebugLocation(217, 25);
				char_literal73=(IToken)Match(input,97,Follow._97_in_type_name_op864); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal73_tree = (CommonTree)adaptor.Create(char_literal73);
				adaptor.AddChild(root_0, char_literal73_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 31);
				char_literal74=(IToken)Match(input,61,Follow._61_in_type_name_op868); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal74_tree = (CommonTree)adaptor.Create(char_literal74);
				adaptor.AddChild(root_0, char_literal74_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
			if (state.backtracking > 0) { Memoize(input, 14, type_name_op_StartIndex); }

		}
		DebugLocation(217, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:218:1: type_name : ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal76 = default(IToken);
		IToken char_literal78 = default(IToken);
		IToken char_literal80 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name77 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name79 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op81 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal76_tree = default(CommonTree);
		CommonTree char_literal78_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(218, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// SugarCpp.g:219:2: ( ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(219, 4);
			PushFollow(Follow._ident_in_type_name877);
			ident75=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident75.Tree);
			DebugLocation(219, 10);
			// SugarCpp.g:219:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==84))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:219:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(219, 11);
				char_literal76=(IToken)Match(input,84,Follow._84_in_type_name880); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_84.Add(char_literal76);

				DebugLocation(219, 15);
				// SugarCpp.g:219:15: ( type_name ( ',' type_name )* )?
				int alt31=2;
				try { DebugEnterSubRule(31);
				try { DebugEnterDecision(31, false);
				int LA31_0 = input.LA(1);

				if ((LA31_0==IDENT))
				{
					alt31 = 1;
				}
				} finally { DebugExitDecision(31); }
				switch (alt31)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:219:16: type_name ( ',' type_name )*
					{
					DebugLocation(219, 16);
					PushFollow(Follow._type_name_in_type_name883);
					type_name77=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name77.Tree);
					DebugLocation(219, 26);
					// SugarCpp.g:219:26: ( ',' type_name )*
					try { DebugEnterSubRule(30);
					while (true)
					{
						int alt30=2;
						try { DebugEnterDecision(30, false);
						int LA30_0 = input.LA(1);

						if ((LA30_0==70))
						{
							alt30 = 1;
						}


						} finally { DebugExitDecision(30); }
						switch ( alt30 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:219:27: ',' type_name
							{
							DebugLocation(219, 27);
							char_literal78=(IToken)Match(input,70,Follow._70_in_type_name886); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_70.Add(char_literal78);

							DebugLocation(219, 31);
							PushFollow(Follow._type_name_in_type_name888);
							type_name79=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name79.Tree);

							}
							break;

						default:
							goto loop30;
						}
					}

					loop30:
						;

					} finally { DebugExitSubRule(30); }


					}
					break;

				}
				} finally { DebugExitSubRule(31); }

				DebugLocation(219, 45);
				char_literal80=(IToken)Match(input,91,Follow._91_in_type_name894); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_91.Add(char_literal80);


				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(219, 51);
			// SugarCpp.g:219:51: ( type_name_op )*
			try { DebugEnterSubRule(33);
			while (true)
			{
				int alt33=2;
				try { DebugEnterDecision(33, false);
				int LA33_0 = input.LA(1);

				if ((LA33_0==95))
				{
					int LA33_2 = input.LA(2);

					if ((LA33_2==97))
					{
						alt33 = 1;
					}


				}
				else if ((LA33_0==61||LA33_0==65))
				{
					alt33 = 1;
				}


				} finally { DebugExitDecision(33); }
				switch ( alt33 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:219:51: type_name_op
					{
					DebugLocation(219, 51);
					PushFollow(Follow._type_name_op_in_type_name898);
					type_name_op81=type_name_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name_op.Add(type_name_op81.Tree);

					}
					break;

				default:
					goto loop33;
				}
			}

			loop33:
				;

			} finally { DebugExitSubRule(33); }



			{
			// AST REWRITE
			// elements: type_name_op, 91, type_name, ident, 84
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 219:65: -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(219, 68);
				// SugarCpp.g:219:68: ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(219, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(219, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(219, 87);
				// SugarCpp.g:219:87: ( '<' ( type_name )* '>' )?
				if (stream_91.HasNext||stream_type_name.HasNext||stream_84.HasNext)
				{
					DebugLocation(219, 88);
					adaptor.AddChild(root_1, stream_84.NextNode());
					DebugLocation(219, 92);
					// SugarCpp.g:219:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(219, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(219, 103);
					adaptor.AddChild(root_1, stream_91.NextNode());

				}
				stream_91.Reset();
				stream_type_name.Reset();
				stream_84.Reset();
				DebugLocation(219, 110);
				// SugarCpp.g:219:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(219, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 15, type_name_StartIndex); }

		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:222:1: generic_parameter : '<' ident ( ',' ident )* '>' -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 16);
		TraceIn("generic_parameter", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int generic_parameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal82 = default(IToken);
		IToken char_literal84 = default(IToken);
		IToken char_literal86 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident85 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree char_literal84_tree = default(CommonTree);
		CommonTree char_literal86_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(222, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// SugarCpp.g:223:2: ( '<' ident ( ',' ident )* '>' -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: '<' ident ( ',' ident )* '>'
			{
			DebugLocation(223, 4);
			char_literal82=(IToken)Match(input,84,Follow._84_in_generic_parameter932); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_84.Add(char_literal82);

			DebugLocation(223, 8);
			PushFollow(Follow._ident_in_generic_parameter934);
			ident83=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident83.Tree);
			DebugLocation(223, 14);
			// SugarCpp.g:223:14: ( ',' ident )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				int LA34_0 = input.LA(1);

				if ((LA34_0==70))
				{
					alt34 = 1;
				}


				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:223:15: ',' ident
					{
					DebugLocation(223, 15);
					char_literal84=(IToken)Match(input,70,Follow._70_in_generic_parameter937); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(char_literal84);

					DebugLocation(223, 19);
					PushFollow(Follow._ident_in_generic_parameter939);
					ident85=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident85.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }

			DebugLocation(223, 27);
			char_literal86=(IToken)Match(input,91,Follow._91_in_generic_parameter943); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal86);



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:31: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(223, 34);
				// SugarCpp.g:223:34: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 36);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(223, 55);
				// SugarCpp.g:223:55: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(223, 55);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 16);
			LeaveRule("generic_parameter", 16);
			LeaveRule_generic_parameter();
			if (state.backtracking > 0) { Memoize(input, 16, generic_parameter_StartIndex); }

		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:226:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 17);
		TraceIn("func_args", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc89 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(226, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// SugarCpp.g:227:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:227:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(227, 4);
			PushFollow(Follow._stmt_alloc_in_func_args963);
			stmt_alloc87=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc87.Tree);
			DebugLocation(227, 15);
			// SugarCpp.g:227:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(35);
			while (true)
			{
				int alt35=2;
				try { DebugEnterDecision(35, false);
				int LA35_0 = input.LA(1);

				if ((LA35_0==70))
				{
					alt35 = 1;
				}


				} finally { DebugExitDecision(35); }
				switch ( alt35 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:227:16: ',' stmt_alloc
					{
					DebugLocation(227, 16);
					char_literal88=(IToken)Match(input,70,Follow._70_in_func_args966); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(char_literal88);

					DebugLocation(227, 20);
					PushFollow(Follow._stmt_alloc_in_func_args968);
					stmt_alloc89=stmt_alloc();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc89.Tree);

					}
					break;

				default:
					goto loop35;
				}
			}

			loop35:
				;

			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 227:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(227, 36);
				// SugarCpp.g:227:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(227, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(227, 48);
				// SugarCpp.g:227:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(227, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 17);
			LeaveRule("func_args", 17);
			LeaveRule_func_args();
			if (state.backtracking > 0) { Memoize(input, 17, func_args_StartIndex); }

		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:230:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 18);
		TraceIn("func_def", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal92 = default(IToken);
		IToken char_literal95 = default(IToken);
		IToken char_literal97 = default(IToken);
		IToken NEWLINE98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name91 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter94 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args96 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal92_tree = default(CommonTree);
		CommonTree char_literal95_tree = default(CommonTree);
		CommonTree char_literal97_tree = default(CommonTree);
		CommonTree NEWLINE98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(230, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// SugarCpp.g:231:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(231, 4);
			// SugarCpp.g:231:4: ( attribute )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==95))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:4: attribute
				{
				DebugLocation(231, 4);
				PushFollow(Follow._attribute_in_func_def990);
				attribute90=attribute();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_attribute.Add(attribute90.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }

			DebugLocation(231, 15);
			// SugarCpp.g:231:15: ( type_name )?
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			try
			{
				alt37 = dfa37.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:15: type_name
				{
				DebugLocation(231, 15);
				PushFollow(Follow._type_name_in_func_def993);
				type_name91=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name91.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(231, 26);
			// SugarCpp.g:231:26: ( '~' )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			int LA38_0 = input.LA(1);

			if ((LA38_0==119))
			{
				alt38 = 1;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:26: '~'
				{
				DebugLocation(231, 26);
				char_literal92=(IToken)Match(input,119,Follow._119_in_func_def996); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_119.Add(char_literal92);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }

			DebugLocation(231, 31);
			PushFollow(Follow._ident_in_func_def999);
			ident93=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident93.Tree);
			DebugLocation(231, 37);
			// SugarCpp.g:231:37: ( generic_parameter )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==84))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:37: generic_parameter
				{
				DebugLocation(231, 37);
				PushFollow(Follow._generic_parameter_in_func_def1001);
				generic_parameter94=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter94.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }

			DebugLocation(231, 56);
			char_literal95=(IToken)Match(input,63,Follow._63_in_func_def1004); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal95);

			DebugLocation(231, 60);
			// SugarCpp.g:231:60: ( func_args )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==IDENT))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:60: func_args
				{
				DebugLocation(231, 60);
				PushFollow(Follow._func_args_in_func_def1006);
				func_args96=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args96.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(231, 71);
			char_literal97=(IToken)Match(input,64,Follow._64_in_func_def1009); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(char_literal97);

			DebugLocation(231, 75);
			// SugarCpp.g:231:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==NEWLINE))
			{
				alt42 = 1;
			}
			else if ((LA42_0==88))
			{
				alt42 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 42, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:231:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(231, 76);
				// SugarCpp.g:231:76: ( NEWLINE )+
				int cnt41=0;
				try { DebugEnterSubRule(41);
				while (true)
				{
					int alt41=2;
					try { DebugEnterDecision(41, false);
					int LA41_0 = input.LA(1);

					if ((LA41_0==NEWLINE))
					{
						alt41 = 1;
					}


					} finally { DebugExitDecision(41); }
					switch (alt41)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:231:76: NEWLINE
						{
						DebugLocation(231, 76);
						NEWLINE98=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1012); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE98);


						}
						break;

					default:
						if (cnt41 >= 1)
							goto loop41;

						if (state.backtracking>0) {state.failed=true; return retval;}
						EarlyExitException eee41 = new EarlyExitException( 41, input );
						DebugRecognitionException(eee41);
						throw eee41;
					}
					cnt41++;
				}
				loop41:
					;

				} finally { DebugExitSubRule(41); }

				DebugLocation(231, 85);
				PushFollow(Follow._stmt_block_in_func_def1015);
				stmt_block99=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block99.Tree);


				{
				// AST REWRITE
				// elements: attribute, stmt_block, type_name, ident, 119, generic_parameter, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 231:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(231, 99);
					// SugarCpp.g:231:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(231, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(231, 110);
					// SugarCpp.g:231:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(231, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(231, 121);
					// SugarCpp.g:231:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(231, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(231, 132);
					// SugarCpp.g:231:132: ( '~' )?
					if (stream_119.HasNext)
					{
						DebugLocation(231, 132);
						adaptor.AddChild(root_1, stream_119.NextNode());

					}
					stream_119.Reset();
					DebugLocation(231, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(231, 143);
					// SugarCpp.g:231:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(231, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(231, 162);
					// SugarCpp.g:231:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(231, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(231, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:232:23: '=' expr
				{
				DebugLocation(232, 23);
				char_literal100=(IToken)Match(input,88,Follow._88_in_func_def1064); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_88.Add(char_literal100);

				DebugLocation(232, 27);
				PushFollow(Follow._expr_in_func_def1066);
				expr101=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr101.Tree);


				{
				// AST REWRITE
				// elements: type_name, ident, generic_parameter, expr, func_args, 119, attribute
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 232:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(232, 36);
					// SugarCpp.g:232:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(232, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(232, 47);
					// SugarCpp.g:232:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(232, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(232, 58);
					// SugarCpp.g:232:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(232, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(232, 69);
					// SugarCpp.g:232:69: ( '~' )?
					if (stream_119.HasNext)
					{
						DebugLocation(232, 69);
						adaptor.AddChild(root_1, stream_119.NextNode());

					}
					stream_119.Reset();
					DebugLocation(232, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(232, 80);
					// SugarCpp.g:232:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(232, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(232, 99);
					// SugarCpp.g:232:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(232, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(232, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 18);
			LeaveRule("func_def", 18);
			LeaveRule_func_def();
			if (state.backtracking > 0) { Memoize(input, 18, func_def_StartIndex); }

		}
		DebugLocation(233, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:235:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 19);
		TraceIn("stmt_block", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INDENT102 = default(IToken);
		IToken NEWLINE103 = default(IToken);
		IToken NEWLINE105 = default(IToken);
		IToken DEDENT106 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT102_tree = default(CommonTree);
		CommonTree NEWLINE103_tree = default(CommonTree);
		CommonTree NEWLINE105_tree = default(CommonTree);
		CommonTree DEDENT106_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(235, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// SugarCpp.g:236:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:236:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(236, 4);
			INDENT102=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1107); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT102);

			DebugLocation(236, 11);
			// SugarCpp.g:236:11: ( NEWLINE )*
			try { DebugEnterSubRule(43);
			while (true)
			{
				int alt43=2;
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==NEWLINE))
				{
					alt43 = 1;
				}


				} finally { DebugExitDecision(43); }
				switch ( alt43 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:11: NEWLINE
					{
					DebugLocation(236, 11);
					NEWLINE103=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1109); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE103);


					}
					break;

				default:
					goto loop43;
				}
			}

			loop43:
				;

			} finally { DebugExitSubRule(43); }

			DebugLocation(236, 21);
			// SugarCpp.g:236:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==IDENT||LA45_0==63||(LA45_0>=105 && LA45_0<=106)||(LA45_0>=111 && LA45_0<=115)))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:22: stmt ( NEWLINE )+
					{
					DebugLocation(236, 22);
					PushFollow(Follow._stmt_in_stmt_block1114);
					stmt104=stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt.Add(stmt104.Tree);
					DebugLocation(236, 27);
					// SugarCpp.g:236:27: ( NEWLINE )+
					int cnt44=0;
					try { DebugEnterSubRule(44);
					while (true)
					{
						int alt44=2;
						try { DebugEnterDecision(44, false);
						int LA44_0 = input.LA(1);

						if ((LA44_0==NEWLINE))
						{
							alt44 = 1;
						}


						} finally { DebugExitDecision(44); }
						switch (alt44)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:236:27: NEWLINE
							{
							DebugLocation(236, 27);
							NEWLINE105=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1116); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE105);


							}
							break;

						default:
							if (cnt44 >= 1)
								goto loop44;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee44 = new EarlyExitException( 44, input );
							DebugRecognitionException(eee44);
							throw eee44;
						}
						cnt44++;
					}
					loop44:
						;

					} finally { DebugExitSubRule(44); }


					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }

			DebugLocation(236, 38);
			DEDENT106=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1121); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT106);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(236, 48);
				// SugarCpp.g:236:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(236, 61);
				// SugarCpp.g:236:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(236, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 19);
			LeaveRule("stmt_block", 19);
			LeaveRule_stmt_block();
			if (state.backtracking > 0) { Memoize(input, 19, stmt_block_StartIndex); }

		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:239:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 20);
		TraceIn("stmt", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr107 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for109 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while110 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try111 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(239, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// SugarCpp.g:240:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try )
			int alt46=5;
			try { DebugEnterDecision(46, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 63:
			case 111:
			case 113:
			case 114:
				{
				alt46 = 1;
				}
				break;
			case 106:
				{
				alt46 = 2;
				}
				break;
			case 105:
				{
				alt46 = 3;
				}
				break;
			case 115:
				{
				alt46 = 4;
				}
				break;
			case 112:
				{
				alt46 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 46, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(46); }
			switch (alt46)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(240, 4);
				PushFollow(Follow._stmt_expr_in_stmt1141);
				stmt_expr107=stmt_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr107.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:241:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(241, 4);
				PushFollow(Follow._stmt_if_in_stmt1146);
				stmt_if108=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if108.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:242:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(242, 4);
				PushFollow(Follow._stmt_for_in_stmt1151);
				stmt_for109=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for109.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:243:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(243, 4);
				PushFollow(Follow._stmt_while_in_stmt1156);
				stmt_while110=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while110.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:244:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(244, 4);
				PushFollow(Follow._stmt_try_in_stmt1161);
				stmt_try111=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try111.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 20);
			LeaveRule("stmt", 20);
			LeaveRule_stmt();
			if (state.backtracking > 0) { Memoize(input, 20, stmt_StartIndex); }

		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:247:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 21);
		TraceIn("stmt_expr", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc112 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using114 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef115 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify116 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(247, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// SugarCpp.g:248:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt47=5;
			try { DebugEnterDecision(47, false);
			try
			{
				alt47 = dfa47.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(47); }
			switch (alt47)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:248:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(248, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr1172);
				stmt_alloc112=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc112.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:249:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(249, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr1177);
				stmt_return113=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return113.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:250:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(250, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr1182);
				stmt_using114=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using114.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:251:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(251, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr1187);
				stmt_typedef115=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef115.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:252:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(252, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr1192);
				stmt_modify116=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify116.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 21);
			LeaveRule("stmt_expr", 21);
			LeaveRule_stmt_expr();
			if (state.backtracking > 0) { Memoize(input, 21, stmt_expr_StartIndex); }

		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:255:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 22);
		TraceIn("stmt_typedef", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name120 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(255, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// SugarCpp.g:256:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:256:4: 'typedef' ident '=' type_name
			{
			DebugLocation(256, 4);
			string_literal117=(IToken)Match(input,113,Follow._113_in_stmt_typedef1203); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_113.Add(string_literal117);

			DebugLocation(256, 14);
			PushFollow(Follow._ident_in_stmt_typedef1205);
			ident118=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident118.Tree);
			DebugLocation(256, 20);
			char_literal119=(IToken)Match(input,88,Follow._88_in_stmt_typedef1207); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_88.Add(char_literal119);

			DebugLocation(256, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1209);
			type_name120=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name120.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 256:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(256, 37);
				// SugarCpp.g:256:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(256, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(256, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(256, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 22);
			LeaveRule("stmt_typedef", 22);
			LeaveRule_stmt_typedef();
			if (state.backtracking > 0) { Memoize(input, 22, stmt_typedef_StartIndex); }

		}
		DebugLocation(257, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:259:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 23);
		TraceIn("stmt_using_item", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal122 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal122_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(259, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// SugarCpp.g:259:16: ( ident | 'namespace' )
			int alt48=2;
			try { DebugEnterDecision(48, false);
			int LA48_0 = input.LA(1);

			if ((LA48_0==IDENT))
			{
				alt48 = 1;
			}
			else if ((LA48_0==109))
			{
				alt48 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(48); }
			switch (alt48)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:259:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 18);
				PushFollow(Follow._ident_in_stmt_using_item1228);
				ident121=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident121.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:259:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(259, 26);
				string_literal122=(IToken)Match(input,109,Follow._109_in_stmt_using_item1232); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal122_tree = (CommonTree)adaptor.Create(string_literal122);
				adaptor.AddChild(root_0, string_literal122_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 23);
			LeaveRule("stmt_using_item", 23);
			LeaveRule_stmt_using_item();
			if (state.backtracking > 0) { Memoize(input, 23, stmt_using_item_StartIndex); }

		}
		DebugLocation(259, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:260:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 24);
		TraceIn("stmt_using", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(260, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// SugarCpp.g:261:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:261:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(261, 4);
			string_literal123=(IToken)Match(input,114,Follow._114_in_stmt_using1240); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_114.Add(string_literal123);

			DebugLocation(261, 12);
			// SugarCpp.g:261:12: ( stmt_using_item )*
			try { DebugEnterSubRule(49);
			while (true)
			{
				int alt49=2;
				try { DebugEnterDecision(49, false);
				int LA49_0 = input.LA(1);

				if ((LA49_0==IDENT||LA49_0==109))
				{
					alt49 = 1;
				}


				} finally { DebugExitDecision(49); }
				switch ( alt49 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:261:12: stmt_using_item
					{
					DebugLocation(261, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1242);
					stmt_using_item124=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item124.Tree);

					}
					break;

				default:
					goto loop49;
				}
			}

			loop49:
				;

			} finally { DebugExitSubRule(49); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 261:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(261, 32);
				// SugarCpp.g:261:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(261, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(261, 45);
				// SugarCpp.g:261:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(261, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 24);
			LeaveRule("stmt_using", 24);
			LeaveRule_stmt_using();
			if (state.backtracking > 0) { Memoize(input, 24, stmt_using_StartIndex); }

		}
		DebugLocation(262, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:264:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 25);
		TraceIn("stmt_return", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_return_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal125 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr126 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal125_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(264, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// SugarCpp.g:265:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:265:4: 'return' ( expr )?
			{
			DebugLocation(265, 4);
			string_literal125=(IToken)Match(input,111,Follow._111_in_stmt_return1263); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_111.Add(string_literal125);

			DebugLocation(265, 13);
			// SugarCpp.g:265:13: ( expr )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==IDENT||LA50_0==NUMBER||LA50_0==STRING||LA50_0==56||LA50_0==61||LA50_0==63||LA50_0==65||(LA50_0>=67 && LA50_0<=68)||(LA50_0>=71 && LA50_0<=72)||LA50_0==96||LA50_0==110||LA50_0==119))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:265:13: expr
				{
				DebugLocation(265, 13);
				PushFollow(Follow._expr_in_stmt_return1265);
				expr126=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(50); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 265:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(265, 22);
				// SugarCpp.g:265:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(265, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(265, 36);
				// SugarCpp.g:265:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(265, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 25);
			LeaveRule("stmt_return", 25);
			LeaveRule_stmt_return();
			if (state.backtracking > 0) { Memoize(input, 25, stmt_return_StartIndex); }

		}
		DebugLocation(266, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:268:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 26);
		TraceIn("stmt_if", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_if_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal127 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken char_literal130 = default(IToken);
		IToken string_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		CommonTree string_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(268, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// SugarCpp.g:269:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(269, 4);
			string_literal127=(IToken)Match(input,106,Follow._106_in_stmt_if1286); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_106.Add(string_literal127);

			DebugLocation(269, 9);
			char_literal128=(IToken)Match(input,63,Follow._63_in_stmt_if1288); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal128);

			DebugLocation(269, 13);
			PushFollow(Follow._expr_in_stmt_if1290);
			expr129=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr129.Tree);
			DebugLocation(269, 18);
			char_literal130=(IToken)Match(input,64,Follow._64_in_stmt_if1292); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(char_literal130);

			DebugLocation(269, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1294);
			stmt_block131=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block131.Tree);
			DebugLocation(269, 33);
			// SugarCpp.g:269:33: ( 'else' stmt_block )?
			int alt51=2;
			try { DebugEnterSubRule(51);
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==103))
			{
				alt51 = 1;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:269:34: 'else' stmt_block
				{
				DebugLocation(269, 34);
				string_literal132=(IToken)Match(input,103,Follow._103_in_stmt_if1297); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(string_literal132);

				DebugLocation(269, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1299);
				stmt_block133=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block133.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(51); }



			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(269, 57);
				// SugarCpp.g:269:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(269, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(269, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(269, 83);
				// SugarCpp.g:269:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(269, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 26);
			LeaveRule("stmt_if", 26);
			LeaveRule_stmt_if();
			if (state.backtracking > 0) { Memoize(input, 26, stmt_if_StartIndex); }

		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:272:1: stmt_while : 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 27);
		TraceIn("stmt_while", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_while_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal134 = default(IToken);
		IToken char_literal135 = default(IToken);
		IToken char_literal137 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr136 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block138 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal134_tree = default(CommonTree);
		CommonTree char_literal135_tree = default(CommonTree);
		CommonTree char_literal137_tree = default(CommonTree);
		RewriteRuleITokenStream stream_115=new RewriteRuleITokenStream(adaptor,"token 115");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(272, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// SugarCpp.g:273:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:273:4: 'while' '(' expr ')' stmt_block
			{
			DebugLocation(273, 4);
			string_literal134=(IToken)Match(input,115,Follow._115_in_stmt_while1325); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_115.Add(string_literal134);

			DebugLocation(273, 12);
			char_literal135=(IToken)Match(input,63,Follow._63_in_stmt_while1327); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal135);

			DebugLocation(273, 16);
			PushFollow(Follow._expr_in_stmt_while1329);
			expr136=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr136.Tree);
			DebugLocation(273, 21);
			char_literal137=(IToken)Match(input,64,Follow._64_in_stmt_while1331); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(char_literal137);

			DebugLocation(273, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1333);
			stmt_block138=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block138.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 273:36: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(273, 39);
				// SugarCpp.g:273:39: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(273, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(273, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(273, 57);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 27);
			LeaveRule("stmt_while", 27);
			LeaveRule_stmt_while();
			if (state.backtracking > 0) { Memoize(input, 27, stmt_while_StartIndex); }

		}
		DebugLocation(274, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:276:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 28);
		TraceIn("stmt_for", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_for_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal139 = default(IToken);
		IToken char_literal140 = default(IToken);
		IToken char_literal142 = default(IToken);
		IToken char_literal144 = default(IToken);
		IToken string_literal146 = default(IToken);
		IToken char_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal139_tree = default(CommonTree);
		CommonTree char_literal140_tree = default(CommonTree);
		CommonTree char_literal142_tree = default(CommonTree);
		CommonTree char_literal144_tree = default(CommonTree);
		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree char_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_83=new RewriteRuleITokenStream(adaptor,"token 83");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(276, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// SugarCpp.g:281:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:281:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(281, 4);
			string_literal139=(IToken)Match(input,105,Follow._105_in_stmt_for1359); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_105.Add(string_literal139);

			DebugLocation(281, 10);
			char_literal140=(IToken)Match(input,63,Follow._63_in_stmt_for1361); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal140);

			DebugLocation(281, 14);
			PushFollow(Follow._expr_in_stmt_for1363);
			expr141=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr141.Tree);
			DebugLocation(281, 19);
			// SugarCpp.g:281:19: ( ';' expr ';' expr | 'in' expr )
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==83))
			{
				alt52 = 1;
			}
			else if ((LA52_0==108))
			{
				alt52 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 52, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:281:20: ';' expr ';' expr
				{
				DebugLocation(281, 20);
				char_literal142=(IToken)Match(input,83,Follow._83_in_stmt_for1366); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_83.Add(char_literal142);

				DebugLocation(281, 24);
				PushFollow(Follow._expr_in_stmt_for1368);
				expr143=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr143.Tree);
				DebugLocation(281, 29);
				char_literal144=(IToken)Match(input,83,Follow._83_in_stmt_for1370); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_83.Add(char_literal144);

				DebugLocation(281, 33);
				PushFollow(Follow._expr_in_stmt_for1372);
				expr145=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr145.Tree);
				DebugLocation(281, 38);
				if (state.backtracking == 0)
				{
					type=0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:281:50: 'in' expr
				{
				DebugLocation(281, 50);
				string_literal146=(IToken)Match(input,108,Follow._108_in_stmt_for1378); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_108.Add(string_literal146);

				DebugLocation(281, 55);
				PushFollow(Follow._expr_in_stmt_for1380);
				expr147=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr147.Tree);
				DebugLocation(281, 60);
				if (state.backtracking == 0)
				{
					type=1;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(281, 71);
			char_literal148=(IToken)Match(input,64,Follow._64_in_stmt_for1385); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(char_literal148);

			DebugLocation(281, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1387);
			stmt_block149=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block149.Tree);


			{
			// AST REWRITE
			// elements: expr, expr, stmt_block, expr, expr, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 282:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(282, 18);
				// SugarCpp.g:282:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(282, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(282, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(282, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(282, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(282, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 283:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(283, 7);
				// SugarCpp.g:283:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(283, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(283, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(283, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(283, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 28);
			LeaveRule("stmt_for", 28);
			LeaveRule_stmt_for();
			if (state.backtracking > 0) { Memoize(input, 28, stmt_for_StartIndex); }

		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:286:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 29);
		TraceIn("stmt_try", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_try_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal150 = default(IToken);
		IToken string_literal152 = default(IToken);
		IToken char_literal153 = default(IToken);
		IToken char_literal155 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr154 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block156 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal150_tree = default(CommonTree);
		CommonTree string_literal152_tree = default(CommonTree);
		CommonTree char_literal153_tree = default(CommonTree);
		CommonTree char_literal155_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(286, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// SugarCpp.g:287:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:287:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(287, 4);
			string_literal150=(IToken)Match(input,112,Follow._112_in_stmt_try1432); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_112.Add(string_literal150);

			DebugLocation(287, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1434);
			stmt_block151=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block151.Tree);
			DebugLocation(287, 21);
			string_literal152=(IToken)Match(input,101,Follow._101_in_stmt_try1436); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(string_literal152);

			DebugLocation(287, 29);
			char_literal153=(IToken)Match(input,63,Follow._63_in_stmt_try1438); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_63.Add(char_literal153);

			DebugLocation(287, 33);
			PushFollow(Follow._expr_in_stmt_try1440);
			expr154=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr154.Tree);
			DebugLocation(287, 38);
			char_literal155=(IToken)Match(input,64,Follow._64_in_stmt_try1442); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_64.Add(char_literal155);

			DebugLocation(287, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1444);
			stmt_block156=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block156.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 287:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(287, 56);
				// SugarCpp.g:287:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(287, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(287, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(287, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(287, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 29);
			LeaveRule("stmt_try", 29);
			LeaveRule_stmt_try();
			if (state.backtracking > 0) { Memoize(input, 29, stmt_try_StartIndex); }

		}
		DebugLocation(288, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:290:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 30);
		TraceIn("ident_list", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident157 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident159 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(290, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// SugarCpp.g:291:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:291:4: ident ( ',' ident )*
			{
			DebugLocation(291, 4);
			PushFollow(Follow._ident_in_ident_list1467);
			ident157=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident157.Tree);
			DebugLocation(291, 10);
			// SugarCpp.g:291:10: ( ',' ident )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==70))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:291:11: ',' ident
					{
					DebugLocation(291, 11);
					char_literal158=(IToken)Match(input,70,Follow._70_in_ident_list1470); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(char_literal158);

					DebugLocation(291, 15);
					PushFollow(Follow._ident_in_ident_list1472);
					ident159=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident159.Tree);

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 291:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(291, 26);
				// SugarCpp.g:291:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(291, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(291, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(291, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 30);
			LeaveRule("ident_list", 30);
			LeaveRule_ident_list();
			if (state.backtracking > 0) { Memoize(input, 30, ident_list_StartIndex); }

		}
		DebugLocation(292, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:294:1: stmt_alloc : ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr );
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 31);
		TraceIn("stmt_alloc", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal161 = default(IToken);
		IToken char_literal163 = default(IToken);
		IToken string_literal166 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name162 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr164 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident165 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal161_tree = default(CommonTree);
		CommonTree char_literal163_tree = default(CommonTree);
		CommonTree string_literal166_tree = default(CommonTree);
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(294, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// SugarCpp.g:295:2: ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr )
			int alt55=2;
			try { DebugEnterDecision(55, false);
			try
			{
				alt55 = dfa55.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:295:4: ident_list ':' type_name ( '=' expr )?
				{
				DebugLocation(295, 4);
				PushFollow(Follow._ident_list_in_stmt_alloc1494);
				ident_list160=ident_list();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_ident_list.Add(ident_list160.Tree);
				DebugLocation(295, 15);
				char_literal161=(IToken)Match(input,80,Follow._80_in_stmt_alloc1496); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_80.Add(char_literal161);

				DebugLocation(295, 19);
				PushFollow(Follow._type_name_in_stmt_alloc1498);
				type_name162=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name162.Tree);
				DebugLocation(295, 29);
				// SugarCpp.g:295:29: ( '=' expr )?
				int alt54=2;
				try { DebugEnterSubRule(54);
				try { DebugEnterDecision(54, false);
				int LA54_0 = input.LA(1);

				if ((LA54_0==88))
				{
					alt54 = 1;
				}
				} finally { DebugExitDecision(54); }
				switch (alt54)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:295:30: '=' expr
					{
					DebugLocation(295, 30);
					char_literal163=(IToken)Match(input,88,Follow._88_in_stmt_alloc1501); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_88.Add(char_literal163);

					DebugLocation(295, 34);
					PushFollow(Follow._expr_in_stmt_alloc1503);
					expr164=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr.Add(expr164.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(54); }



				{
				// AST REWRITE
				// elements: type_name, expr, ident_list
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 295:41: -> ^( Expr_Alloc type_name ident_list ( expr )? )
				{
					DebugLocation(295, 44);
					// SugarCpp.g:295:44: ^( Expr_Alloc type_name ident_list ( expr )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(295, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

					DebugLocation(295, 57);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(295, 67);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(295, 78);
					// SugarCpp.g:295:78: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(295, 78);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:296:4: ident ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(296, 4);
				PushFollow(Follow._ident_in_stmt_alloc1523);
				ident165=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident165.Tree);
				DebugLocation(296, 14);
				string_literal166=(IToken)Match(input,82,Follow._82_in_stmt_alloc1525); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal166_tree = (CommonTree)adaptor.Create(string_literal166);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal166_tree, root_0);
				}
				DebugLocation(296, 16);
				PushFollow(Follow._modify_expr_in_stmt_alloc1528);
				modify_expr167=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr167.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 31);
			LeaveRule("stmt_alloc", 31);
			LeaveRule_stmt_alloc();
			if (state.backtracking > 0) { Memoize(input, 31, stmt_alloc_StartIndex); }

		}
		DebugLocation(297, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:299:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 32);
		TraceIn("stmt_modify", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_modify_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue168 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op169 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(299, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// SugarCpp.g:300:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:300:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(300, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1539);
			lvalue168=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue168.Tree);
			DebugLocation(300, 11);
			// SugarCpp.g:300:11: ( modify_expr_op ^ cond_expr )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==59||LA56_0==62||LA56_0==66||LA56_0==69||LA56_0==73||LA56_0==79||LA56_0==86||LA56_0==88||LA56_0==94||LA56_0==99||LA56_0==117))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:300:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(300, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1542);
				modify_expr_op169=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op169.Tree, root_0);
				DebugLocation(300, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1545);
				cond_expr170=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr170.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 32);
			LeaveRule("stmt_modify", 32);
			LeaveRule_stmt_modify();
			if (state.backtracking > 0) { Memoize(input, 32, stmt_modify_StartIndex); }

		}
		DebugLocation(301, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:303:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 33);
		TraceIn("expr", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr171 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(303, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// SugarCpp.g:304:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:304:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(304, 4);
			PushFollow(Follow._lambda_expr_in_expr1558);
			lambda_expr171=lambda_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr171.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 33);
			LeaveRule("expr", 33);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 33, expr_StartIndex); }

		}
		DebugLocation(305, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:307:1: lambda_expr : ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 34);
		TraceIn("lambda_expr", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lambda_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal172 = default(IToken);
		IToken char_literal173 = default(IToken);
		IToken char_literal175 = default(IToken);
		IToken string_literal176 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args174 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr178 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree char_literal173_tree = default(CommonTree);
		CommonTree char_literal175_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_lambda_expr=new RewriteRuleSubtreeStream(adaptor,"rule lambda_expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(307, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// SugarCpp.g:308:2: ( '\\\\' '(' ( func_args )? ')' '=>' lambda_expr -> ^( Expr_Lambda ( func_args )? lambda_expr ) | modify_expr )
			int alt58=2;
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==96))
			{
				alt58 = 1;
			}
			else if ((LA58_0==IDENT||LA58_0==NUMBER||LA58_0==STRING||LA58_0==56||LA58_0==61||LA58_0==63||LA58_0==65||(LA58_0>=67 && LA58_0<=68)||(LA58_0>=71 && LA58_0<=72)||LA58_0==110||LA58_0==119))
			{
				alt58 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:308:4: '\\\\' '(' ( func_args )? ')' '=>' lambda_expr
				{
				DebugLocation(308, 4);
				char_literal172=(IToken)Match(input,96,Follow._96_in_lambda_expr1569); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_96.Add(char_literal172);

				DebugLocation(308, 9);
				char_literal173=(IToken)Match(input,63,Follow._63_in_lambda_expr1571); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_63.Add(char_literal173);

				DebugLocation(308, 13);
				// SugarCpp.g:308:13: ( func_args )?
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==IDENT))
				{
					alt57 = 1;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:308:13: func_args
					{
					DebugLocation(308, 13);
					PushFollow(Follow._func_args_in_lambda_expr1573);
					func_args174=func_args();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_func_args.Add(func_args174.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(57); }

				DebugLocation(308, 24);
				char_literal175=(IToken)Match(input,64,Follow._64_in_lambda_expr1576); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_64.Add(char_literal175);

				DebugLocation(308, 28);
				string_literal176=(IToken)Match(input,90,Follow._90_in_lambda_expr1578); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_90.Add(string_literal176);

				DebugLocation(308, 33);
				PushFollow(Follow._lambda_expr_in_lambda_expr1580);
				lambda_expr177=lambda_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_lambda_expr.Add(lambda_expr177.Tree);


				{
				// AST REWRITE
				// elements: lambda_expr, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 308:45: -> ^( Expr_Lambda ( func_args )? lambda_expr )
				{
					DebugLocation(308, 48);
					// SugarCpp.g:308:48: ^( Expr_Lambda ( func_args )? lambda_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(308, 50);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(308, 62);
					// SugarCpp.g:308:62: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(308, 62);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(308, 73);
					adaptor.AddChild(root_1, stream_lambda_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:309:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(309, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr1596);
				modify_expr178=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr178.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 34);
			LeaveRule("lambda_expr", 34);
			LeaveRule_lambda_expr();
			if (state.backtracking > 0) { Memoize(input, 34, lambda_expr_StartIndex); }

		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:312:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 35);
		TraceIn("modify_expr_op", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set179 = default(IToken);

		CommonTree set179_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(312, 92);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// SugarCpp.g:312:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(312, 15);

			set179=(IToken)input.LT(1);
			if (input.LA(1)==59||input.LA(1)==62||input.LA(1)==66||input.LA(1)==69||input.LA(1)==73||input.LA(1)==79||input.LA(1)==86||input.LA(1)==88||input.LA(1)==94||input.LA(1)==99||input.LA(1)==117)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set179));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 35);
			LeaveRule("modify_expr_op", 35);
			LeaveRule_modify_expr_op();
			if (state.backtracking > 0) { Memoize(input, 35, modify_expr_op_StartIndex); }

		}
		DebugLocation(312, 92);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:313:1: modify_expr : cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 36);
		TraceIn("modify_expr", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set181 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr182 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set181_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(313, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// SugarCpp.g:314:2: ( cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:314:4: cond_expr ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(314, 4);
			PushFollow(Follow._cond_expr_in_modify_expr1654);
			cond_expr180=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr180.Tree);
			DebugLocation(314, 14);
			// SugarCpp.g:314:14: ( ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr )?
			int alt59=2;
			try { DebugEnterSubRule(59);
			try { DebugEnterDecision(59, false);
			int LA59_0 = input.LA(1);

			if ((LA59_0==59||LA59_0==62||LA59_0==66||LA59_0==69||LA59_0==73||LA59_0==79||LA59_0==82||LA59_0==86||LA59_0==88||LA59_0==94||LA59_0==99||LA59_0==117))
			{
				alt59 = 1;
			}
			} finally { DebugExitDecision(59); }
			switch (alt59)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:314:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ modify_expr
				{
				DebugLocation(314, 99);

				set181=(IToken)input.LT(1);
				set181=(IToken)input.LT(1);
				if (input.LA(1)==59||input.LA(1)==62||input.LA(1)==66||input.LA(1)==69||input.LA(1)==73||input.LA(1)==79||input.LA(1)==82||input.LA(1)==86||input.LA(1)==88||input.LA(1)==94||input.LA(1)==99||input.LA(1)==117)
				{
					input.Consume();
					if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set181), root_0);
					state.errorRecovery=false;state.failed=false;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(314, 101);
				PushFollow(Follow._modify_expr_in_modify_expr1706);
				modify_expr182=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr182.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 36);
			LeaveRule("modify_expr", 36);
			LeaveRule_modify_expr();
			if (state.backtracking > 0) { Memoize(input, 36, modify_expr_StartIndex); }

		}
		DebugLocation(315, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:317:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 37);
		TraceIn("cond_expr_item", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr183 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(317, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// SugarCpp.g:317:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:317:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(317, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1717);
			cond_expr183=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr183.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 37);
			LeaveRule("cond_expr_item", 37);
			LeaveRule_cond_expr_item();
			if (state.backtracking > 0) { Memoize(input, 37, cond_expr_item_StartIndex); }

		}
		DebugLocation(317, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:318:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 38);
		TraceIn("cond_expr", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal184 = default(IToken);
		IToken string_literal185 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree string_literal185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(318, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// SugarCpp.g:319:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:319:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(319, 4);
			// SugarCpp.g:319:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:319:5: a= or_expr
			{
			DebugLocation(319, 6);
			PushFollow(Follow._or_expr_in_cond_expr1729);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 319:15: -> $a
			{
				DebugLocation(319, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(319, 22);
			// SugarCpp.g:319:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt60=2;
			try { DebugEnterSubRule(60);
			try { DebugEnterDecision(60, false);
			int LA60_0 = input.LA(1);

			if ((LA60_0==106))
			{
				alt60 = 1;
			}
			} finally { DebugExitDecision(60); }
			switch (alt60)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:319:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(319, 23);
				string_literal184=(IToken)Match(input,106,Follow._106_in_cond_expr1738); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_106.Add(string_literal184);

				DebugLocation(319, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1742);
				a=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
				DebugLocation(319, 45);
				string_literal185=(IToken)Match(input,103,Follow._103_in_cond_expr1744); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(string_literal185);

				DebugLocation(319, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1748);
				b=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cond_expr, a
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 319:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(319, 72);
					// SugarCpp.g:319:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(319, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(319, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(319, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(319, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(60); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 38);
			LeaveRule("cond_expr", 38);
			LeaveRule_cond_expr();
			if (state.backtracking > 0) { Memoize(input, 38, cond_expr_StartIndex); }

		}
		DebugLocation(320, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:322:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 39);
		TraceIn("or_expr", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int or_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal186 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal186_tree = default(CommonTree);
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(322, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// SugarCpp.g:323:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(323, 4);
			// SugarCpp.g:323:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:323:5: a= and_expr
			{
			DebugLocation(323, 6);
			PushFollow(Follow._and_expr_in_or_expr1779);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:16: -> $a
			{
				DebugLocation(323, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(323, 23);
			// SugarCpp.g:323:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==118))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:323:24: '||' b= and_expr
					{
					DebugLocation(323, 24);
					string_literal186=(IToken)Match(input,118,Follow._118_in_or_expr1788); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_118.Add(string_literal186);

					DebugLocation(323, 30);
					PushFollow(Follow._and_expr_in_or_expr1792);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 118, b, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 323:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(323, 43);
						// SugarCpp.g:323:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(323, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(323, 54);
						adaptor.AddChild(root_1, stream_118.NextNode());
						DebugLocation(323, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(323, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 39);
			LeaveRule("or_expr", 39);
			LeaveRule_or_expr();
			if (state.backtracking > 0) { Memoize(input, 39, or_expr_StartIndex); }

		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:326:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 40);
		TraceIn("and_expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int and_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal187 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal187_tree = default(CommonTree);
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(326, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// SugarCpp.g:327:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:327:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(327, 4);
			// SugarCpp.g:327:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:327:5: a= bit_or
			{
			DebugLocation(327, 6);
			PushFollow(Follow._bit_or_in_and_expr1822);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 327:14: -> $a
			{
				DebugLocation(327, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(327, 21);
			// SugarCpp.g:327:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(62);
			while (true)
			{
				int alt62=2;
				try { DebugEnterDecision(62, false);
				int LA62_0 = input.LA(1);

				if ((LA62_0==60))
				{
					alt62 = 1;
				}


				} finally { DebugExitDecision(62); }
				switch ( alt62 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:327:22: '&&' b= bit_or
					{
					DebugLocation(327, 22);
					string_literal187=(IToken)Match(input,60,Follow._60_in_and_expr1831); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(string_literal187);

					DebugLocation(327, 28);
					PushFollow(Follow._bit_or_in_and_expr1835);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 60, and_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 327:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(327, 39);
						// SugarCpp.g:327:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(327, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(327, 50);
						adaptor.AddChild(root_1, stream_60.NextNode());
						DebugLocation(327, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(327, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop62;
				}
			}

			loop62:
				;

			} finally { DebugExitSubRule(62); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 40);
			LeaveRule("and_expr", 40);
			LeaveRule_and_expr();
			if (state.backtracking > 0) { Memoize(input, 40, and_expr_StartIndex); }

		}
		DebugLocation(328, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:330:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 41);
		TraceIn("bit_or", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_or_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal188 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal188_tree = default(CommonTree);
		RewriteRuleITokenStream stream_116=new RewriteRuleITokenStream(adaptor,"token 116");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(330, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// SugarCpp.g:331:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:331:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(331, 4);
			// SugarCpp.g:331:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:331:5: a= bit_xor
			{
			DebugLocation(331, 6);
			PushFollow(Follow._bit_xor_in_bit_or1865);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 331:15: -> $a
			{
				DebugLocation(331, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(331, 22);
			// SugarCpp.g:331:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(63);
			while (true)
			{
				int alt63=2;
				try { DebugEnterDecision(63, false);
				int LA63_0 = input.LA(1);

				if ((LA63_0==116))
				{
					alt63 = 1;
				}


				} finally { DebugExitDecision(63); }
				switch ( alt63 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:331:23: '|' b= bit_xor
					{
					DebugLocation(331, 23);
					char_literal188=(IToken)Match(input,116,Follow._116_in_bit_or1874); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_116.Add(char_literal188);

					DebugLocation(331, 28);
					PushFollow(Follow._bit_xor_in_bit_or1878);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 116, b, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 331:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(331, 40);
						// SugarCpp.g:331:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(331, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(331, 51);
						adaptor.AddChild(root_1, stream_116.NextNode());
						DebugLocation(331, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(331, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop63;
				}
			}

			loop63:
				;

			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 41);
			LeaveRule("bit_or", 41);
			LeaveRule_bit_or();
			if (state.backtracking > 0) { Memoize(input, 41, bit_or_StartIndex); }

		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:334:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 42);
		TraceIn("bit_xor", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_xor_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal189_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(334, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// SugarCpp.g:335:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:335:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(335, 4);
			// SugarCpp.g:335:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:335:5: a= bit_and
			{
			DebugLocation(335, 6);
			PushFollow(Follow._bit_and_in_bit_xor1908);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 335:15: -> $a
			{
				DebugLocation(335, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(335, 22);
			// SugarCpp.g:335:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=2;
				try { DebugEnterDecision(64, false);
				int LA64_0 = input.LA(1);

				if ((LA64_0==98))
				{
					alt64 = 1;
				}


				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:335:23: '^' b= bit_and
					{
					DebugLocation(335, 23);
					char_literal189=(IToken)Match(input,98,Follow._98_in_bit_xor1917); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_98.Add(char_literal189);

					DebugLocation(335, 28);
					PushFollow(Follow._bit_and_in_bit_xor1921);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 98
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 335:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(335, 40);
						// SugarCpp.g:335:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(335, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(335, 51);
						adaptor.AddChild(root_1, stream_98.NextNode());
						DebugLocation(335, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(335, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 42);
			LeaveRule("bit_xor", 42);
			LeaveRule_bit_xor();
			if (state.backtracking > 0) { Memoize(input, 42, bit_xor_StartIndex); }

		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:338:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 43);
		TraceIn("bit_and", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_and_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal190 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal190_tree = default(CommonTree);
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(338, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// SugarCpp.g:339:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:339:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(339, 4);
			// SugarCpp.g:339:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:339:5: a= cmp_equ_expr
			{
			DebugLocation(339, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and1951);
			a=cmp_equ_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 339:20: -> $a
			{
				DebugLocation(339, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(339, 27);
			// SugarCpp.g:339:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(65);
			while (true)
			{
				int alt65=2;
				try { DebugEnterDecision(65, false);
				int LA65_0 = input.LA(1);

				if ((LA65_0==61))
				{
					alt65 = 1;
				}


				} finally { DebugExitDecision(65); }
				switch ( alt65 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:339:28: '&' b= cmp_equ_expr
					{
					DebugLocation(339, 28);
					char_literal190=(IToken)Match(input,61,Follow._61_in_bit_and1960); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal190);

					DebugLocation(339, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and1964);
					b=cmp_equ_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 61, bit_and, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 339:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(339, 50);
						// SugarCpp.g:339:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(339, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(339, 61);
						adaptor.AddChild(root_1, stream_61.NextNode());
						DebugLocation(339, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(339, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop65;
				}
			}

			loop65:
				;

			} finally { DebugExitSubRule(65); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 43);
			LeaveRule("bit_and", 43);
			LeaveRule_bit_and();
			if (state.backtracking > 0) { Memoize(input, 43, bit_and_StartIndex); }

		}
		DebugLocation(340, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:342:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 44);
		TraceIn("cmp_equ_expr_op", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set191 = default(IToken);

		CommonTree set191_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(342, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// SugarCpp.g:342:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(342, 16);

			set191=(IToken)input.LT(1);
			if (input.LA(1)==57||input.LA(1)==89)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set191));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 44);
			LeaveRule("cmp_equ_expr_op", 44);
			LeaveRule_cmp_equ_expr_op();
			if (state.backtracking > 0) { Memoize(input, 44, cmp_equ_expr_op_StartIndex); }

		}
		DebugLocation(342, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:343:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 45);
		TraceIn("cmp_equ_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op192 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(343, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// SugarCpp.g:344:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:344:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(344, 4);
			// SugarCpp.g:344:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:344:5: a= cmp_expr
			{
			DebugLocation(344, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr2005);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 344:16: -> $a
			{
				DebugLocation(344, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(344, 23);
			// SugarCpp.g:344:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt66=2;
			try { DebugEnterSubRule(66);
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==57||LA66_0==89))
			{
				alt66 = 1;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:344:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(344, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr2014);
				cmp_equ_expr_op192=cmp_equ_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_equ_expr_op.Add(cmp_equ_expr_op192.Tree);
				DebugLocation(344, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr2018);
				b=cmp_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr, cmp_equ_expr_op
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 344:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(344, 54);
					// SugarCpp.g:344:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(344, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(344, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(344, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(344, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(66); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 45);
			LeaveRule("cmp_equ_expr", 45);
			LeaveRule_cmp_equ_expr();
			if (state.backtracking > 0) { Memoize(input, 45, cmp_equ_expr_StartIndex); }

		}
		DebugLocation(345, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:347:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 46);
		TraceIn("cmp_expr_op", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set193 = default(IToken);

		CommonTree set193_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(347, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// SugarCpp.g:347:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(347, 12);

			set193=(IToken)input.LT(1);
			if (input.LA(1)==84||input.LA(1)==87||(input.LA(1)>=91 && input.LA(1)<=92))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set193));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 46);
			LeaveRule("cmp_expr_op", 46);
			LeaveRule_cmp_expr_op();
			if (state.backtracking > 0) { Memoize(input, 46, cmp_expr_op_StartIndex); }

		}
		DebugLocation(347, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:348:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 47);
		TraceIn("cmp_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op194 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(348, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// SugarCpp.g:349:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:349:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			{
			DebugLocation(349, 4);
			// SugarCpp.g:349:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:349:5: a= shift_expr
			{
			DebugLocation(349, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr2068);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 349:18: -> $a
			{
				DebugLocation(349, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(349, 25);
			// SugarCpp.g:349:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			int alt67=2;
			try { DebugEnterSubRule(67);
			try { DebugEnterDecision(67, false);
			int LA67_0 = input.LA(1);

			if ((LA67_0==84||LA67_0==87||(LA67_0>=91 && LA67_0<=92)))
			{
				alt67 = 1;
			}
			} finally { DebugExitDecision(67); }
			switch (alt67)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:349:26: cmp_expr_op b= shift_expr
				{
				DebugLocation(349, 26);
				PushFollow(Follow._cmp_expr_op_in_cmp_expr2077);
				cmp_expr_op194=cmp_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr_op.Add(cmp_expr_op194.Tree);
				DebugLocation(349, 39);
				PushFollow(Follow._shift_expr_in_cmp_expr2081);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_expr, cmp_expr_op
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 349:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
				{
					DebugLocation(349, 54);
					// SugarCpp.g:349:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(349, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(349, 65);
					adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
					DebugLocation(349, 78);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(349, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(67); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 47);
			LeaveRule("cmp_expr", 47);
			LeaveRule_cmp_expr();
			if (state.backtracking > 0) { Memoize(input, 47, cmp_expr_StartIndex); }

		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:352:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 48);
		TraceIn("shift_expr_op", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set195 = default(IToken);

		CommonTree set195_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(352, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// SugarCpp.g:352:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(352, 14);

			set195=(IToken)input.LT(1);
			if (input.LA(1)==85||input.LA(1)==93)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set195));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 48);
			LeaveRule("shift_expr_op", 48);
			LeaveRule_shift_expr_op();
			if (state.backtracking > 0) { Memoize(input, 48, shift_expr_op_StartIndex); }

		}
		DebugLocation(352, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:353:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 49);
		TraceIn("shift_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op196 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(353, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// SugarCpp.g:354:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:354:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(354, 4);
			// SugarCpp.g:354:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:354:5: a= add_expr
			{
			DebugLocation(354, 6);
			PushFollow(Follow._add_expr_in_shift_expr2122);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 354:16: -> $a
			{
				DebugLocation(354, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(354, 23);
			// SugarCpp.g:354:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(68);
			while (true)
			{
				int alt68=2;
				try { DebugEnterDecision(68, false);
				int LA68_0 = input.LA(1);

				if ((LA68_0==85||LA68_0==93))
				{
					alt68 = 1;
				}


				} finally { DebugExitDecision(68); }
				switch ( alt68 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:354:24: shift_expr_op b= add_expr
					{
					DebugLocation(354, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr2131);
					shift_expr_op196=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op196.Tree);
					DebugLocation(354, 39);
					PushFollow(Follow._add_expr_in_shift_expr2135);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, shift_expr_op, shift_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 354:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(354, 52);
						// SugarCpp.g:354:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(354, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(354, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(354, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(354, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop68;
				}
			}

			loop68:
				;

			} finally { DebugExitSubRule(68); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 49);
			LeaveRule("shift_expr", 49);
			LeaveRule_shift_expr();
			if (state.backtracking > 0) { Memoize(input, 49, shift_expr_StartIndex); }

		}
		DebugLocation(355, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:357:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 50);
		TraceIn("add_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int add_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal197 = default(IToken);
		IToken char_literal198 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal197_tree = default(CommonTree);
		CommonTree char_literal198_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(357, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// SugarCpp.g:358:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:358:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(358, 4);
			// SugarCpp.g:358:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:358:5: a= infix_expr
			{
			DebugLocation(358, 6);
			PushFollow(Follow._infix_expr_in_add_expr2165);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 358:18: -> $a
			{
				DebugLocation(358, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(358, 25);
			// SugarCpp.g:358:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(69);
			while (true)
			{
				int alt69=3;
				try { DebugEnterDecision(69, false);
				int LA69_0 = input.LA(1);

				if ((LA69_0==67))
				{
					alt69 = 1;
				}
				else if ((LA69_0==71))
				{
					alt69 = 2;
				}


				} finally { DebugExitDecision(69); }
				switch ( alt69 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:358:27: '+' b= infix_expr
					{
					DebugLocation(358, 27);
					char_literal197=(IToken)Match(input,67,Follow._67_in_add_expr2175); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_67.Add(char_literal197);

					DebugLocation(358, 32);
					PushFollow(Follow._infix_expr_in_add_expr2179);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 67, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 358:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(358, 47);
						// SugarCpp.g:358:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(358, 58);
						adaptor.AddChild(root_1, stream_67.NextNode());
						DebugLocation(358, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(358, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:359:12: '-' b= infix_expr
					{
					DebugLocation(359, 12);
					char_literal198=(IToken)Match(input,71,Follow._71_in_add_expr2206); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(char_literal198);

					DebugLocation(359, 17);
					PushFollow(Follow._infix_expr_in_add_expr2210);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 71, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 359:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(359, 32);
						// SugarCpp.g:359:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(359, 43);
						adaptor.AddChild(root_1, stream_71.NextNode());
						DebugLocation(359, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(359, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop69;
				}
			}

			loop69:
				;

			} finally { DebugExitSubRule(69); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 50);
			LeaveRule("add_expr", 50);
			LeaveRule_add_expr();
			if (state.backtracking > 0) { Memoize(input, 50, add_expr_StartIndex); }

		}
		DebugLocation(361, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:363:1: infix_expr : (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 51);
		TraceIn("infix_expr", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func199 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(363, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// SugarCpp.g:364:2: ( (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:364:4: (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(364, 4);
			// SugarCpp.g:364:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:364:5: a= mul_expr
			{
			DebugLocation(364, 6);
			PushFollow(Follow._mul_expr_in_infix_expr2250);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 364:16: -> $a
			{
				DebugLocation(364, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(364, 23);
			// SugarCpp.g:364:23: ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=2;
				try { DebugEnterDecision(70, false);
				int LA70_0 = input.LA(1);

				if ((LA70_0==100))
				{
					alt70 = 1;
				}


				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:364:25: infix_func b= mul_expr
					{
					DebugLocation(364, 25);
					PushFollow(Follow._infix_func_in_infix_expr2260);
					infix_func199=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func199.Tree);
					DebugLocation(364, 37);
					PushFollow(Follow._mul_expr_in_infix_expr2264);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 364:48: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(364, 51);
						// SugarCpp.g:364:51: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(364, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(364, 64);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(364, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(364, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 51);
			LeaveRule("infix_expr", 51);
			LeaveRule_infix_expr();
			if (state.backtracking > 0) { Memoize(input, 51, infix_expr_StartIndex); }

		}
		DebugLocation(365, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:367:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 52);
		TraceIn("mul_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mul_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal200 = default(IToken);
		IToken char_literal201 = default(IToken);
		IToken char_literal202 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal201_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_58=new RewriteRuleITokenStream(adaptor,"token 58");
		RewriteRuleITokenStream stream_65=new RewriteRuleITokenStream(adaptor,"token 65");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(367, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// SugarCpp.g:368:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:368:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(368, 4);
			// SugarCpp.g:368:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:368:5: a= selector_expr
			{
			DebugLocation(368, 6);
			PushFollow(Follow._selector_expr_in_mul_expr2296);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 368:21: -> $a
			{
				DebugLocation(368, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(368, 28);
			// SugarCpp.g:368:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(71);
			while (true)
			{
				int alt71=4;
				try { DebugEnterDecision(71, false);
				switch (input.LA(1))
				{
				case 65:
					{
					alt71 = 1;
					}
					break;
				case 78:
					{
					alt71 = 2;
					}
					break;
				case 58:
					{
					alt71 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(71); }
				switch ( alt71 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:368:30: '*' b= selector_expr
					{
					DebugLocation(368, 30);
					char_literal200=(IToken)Match(input,65,Follow._65_in_mul_expr2306); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_65.Add(char_literal200);

					DebugLocation(368, 35);
					PushFollow(Follow._selector_expr_in_mul_expr2310);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 65, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(368, 53);
						// SugarCpp.g:368:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(368, 64);
						adaptor.AddChild(root_1, stream_65.NextNode());
						DebugLocation(368, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(368, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:369:15: '/' b= selector_expr
					{
					DebugLocation(369, 15);
					char_literal201=(IToken)Match(input,78,Follow._78_in_mul_expr2340); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_78.Add(char_literal201);

					DebugLocation(369, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2344);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, b, 78
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(369, 38);
						// SugarCpp.g:369:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(369, 49);
						adaptor.AddChild(root_1, stream_78.NextNode());
						DebugLocation(369, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(369, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:370:15: '%' b= selector_expr
					{
					DebugLocation(370, 15);
					char_literal202=(IToken)Match(input,58,Follow._58_in_mul_expr2374); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_58.Add(char_literal202);

					DebugLocation(370, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2378);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 58, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 370:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(370, 38);
						// SugarCpp.g:370:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(370, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(370, 49);
						adaptor.AddChild(root_1, stream_58.NextNode());
						DebugLocation(370, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(370, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop71;
				}
			}

			loop71:
				;

			} finally { DebugExitSubRule(71); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 52);
			LeaveRule("mul_expr", 52);
			LeaveRule_mul_expr();
			if (state.backtracking > 0) { Memoize(input, 52, mul_expr_StartIndex); }

		}
		DebugLocation(372, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:374:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 53);
		TraceIn("selector_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal203 = default(IToken);
		IToken string_literal204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal203_tree = default(CommonTree);
		CommonTree string_literal204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(374, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// SugarCpp.g:375:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:375:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(375, 4);
			// SugarCpp.g:375:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:375:5: a= prefix_expr
			{
			DebugLocation(375, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr2421);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 375:19: -> $a
			{
				DebugLocation(375, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(375, 26);
			// SugarCpp.g:375:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(72);
			while (true)
			{
				int alt72=3;
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==75))
				{
					alt72 = 1;
				}
				else if ((LA72_0==77))
				{
					alt72 = 2;
				}


				} finally { DebugExitDecision(72); }
				switch ( alt72 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:375:28: '->*' b= ident
					{
					DebugLocation(375, 28);
					string_literal203=(IToken)Match(input,75,Follow._75_in_selector_expr2431); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_75.Add(string_literal203);

					DebugLocation(375, 35);
					PushFollow(Follow._ident_in_selector_expr2435);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 75, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(375, 45);
						// SugarCpp.g:375:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(375, 59);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(375, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(375, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:376:13: '.*' b= ident
					{
					DebugLocation(376, 13);
					string_literal204=(IToken)Match(input,77,Follow._77_in_selector_expr2463); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_77.Add(string_literal204);

					DebugLocation(376, 20);
					PushFollow(Follow._ident_in_selector_expr2468);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 77, b, selector_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 376:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(376, 30);
						// SugarCpp.g:376:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(376, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(376, 44);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(376, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(376, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop72;
				}
			}

			loop72:
				;

			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 53);
			LeaveRule("selector_expr", 53);
			LeaveRule_selector_expr();
			if (state.backtracking > 0) { Memoize(input, 53, selector_expr_StartIndex); }

		}
		DebugLocation(378, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:380:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 54);
		TraceIn("prefix_expr_op", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set205 = default(IToken);

		CommonTree set205_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(380, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// SugarCpp.g:380:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(380, 15);

			set205=(IToken)input.LT(1);
			if (input.LA(1)==56||input.LA(1)==61||input.LA(1)==65||(input.LA(1)>=67 && input.LA(1)<=68)||(input.LA(1)>=71 && input.LA(1)<=72)||input.LA(1)==119)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set205));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 54);
			LeaveRule("prefix_expr_op", 54);
			LeaveRule_prefix_expr_op();
			if (state.backtracking > 0) { Memoize(input, 54, prefix_expr_op_StartIndex); }

		}
		DebugLocation(380, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:381:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 55);
		TraceIn("prefix_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal208 = default(IToken);
		IToken char_literal210 = default(IToken);
		IToken char_literal212 = default(IToken);
		IToken char_literal213 = default(IToken);
		IToken char_literal215 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op206 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list211 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr216 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal208_tree = default(CommonTree);
		CommonTree char_literal210_tree = default(CommonTree);
		CommonTree char_literal212_tree = default(CommonTree);
		CommonTree char_literal213_tree = default(CommonTree);
		CommonTree char_literal215_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(381, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// SugarCpp.g:382:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt75=3;
			try { DebugEnterDecision(75, false);
			switch (input.LA(1))
			{
			case 56:
			case 61:
			case 65:
			case 67:
			case 68:
			case 71:
			case 72:
			case 119:
				{
				alt75 = 1;
				}
				break;
			case 110:
				{
				alt75 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 63:
				{
				alt75 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 75, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(75); }
			switch (alt75)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:382:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(382, 4);
				// SugarCpp.g:382:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:382:5: prefix_expr_op prefix_expr
				{
				DebugLocation(382, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2543);
				prefix_expr_op206=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op206.Tree);
				DebugLocation(382, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2545);
				prefix_expr207=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr207.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 382:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(382, 36);
					// SugarCpp.g:382:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(382, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(382, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(382, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:383:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(383, 4);
				string_literal208=(IToken)Match(input,110,Follow._110_in_prefix_expr2561); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_110.Add(string_literal208);

				DebugLocation(383, 10);
				PushFollow(Follow._type_name_in_prefix_expr2563);
				type_name209=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name209.Tree);
				DebugLocation(383, 20);
				// SugarCpp.g:383:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==63))
				{
					alt74 = 1;
				}
				else if ((LA74_0==95))
				{
					alt74 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:383:22: '(' ( expr_list )? ')'
					{
					DebugLocation(383, 22);
					char_literal210=(IToken)Match(input,63,Follow._63_in_prefix_expr2567); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal210);

					DebugLocation(383, 26);
					// SugarCpp.g:383:26: ( expr_list )?
					int alt73=2;
					try { DebugEnterSubRule(73);
					try { DebugEnterDecision(73, false);
					int LA73_0 = input.LA(1);

					if ((LA73_0==IDENT||LA73_0==NUMBER||LA73_0==STRING||LA73_0==56||LA73_0==61||LA73_0==63||LA73_0==65||(LA73_0>=67 && LA73_0<=68)||(LA73_0>=71 && LA73_0<=72)||LA73_0==96||LA73_0==110||LA73_0==119))
					{
						alt73 = 1;
					}
					} finally { DebugExitDecision(73); }
					switch (alt73)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:383:26: expr_list
						{
						DebugLocation(383, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2569);
						expr_list211=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list211.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(73); }

					DebugLocation(383, 37);
					char_literal212=(IToken)Match(input,64,Follow._64_in_prefix_expr2572); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_64.Add(char_literal212);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 383:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(383, 44);
						// SugarCpp.g:383:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(383, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(383, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(383, 70);
						// SugarCpp.g:383:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(383, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:384:10: '[' expr_list ']'
					{
					DebugLocation(384, 10);
					char_literal213=(IToken)Match(input,95,Follow._95_in_prefix_expr2594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal213);

					DebugLocation(384, 14);
					PushFollow(Follow._expr_list_in_prefix_expr2596);
					expr_list214=expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr_list.Add(expr_list214.Tree);
					DebugLocation(384, 24);
					char_literal215=(IToken)Match(input,97,Follow._97_in_prefix_expr2598); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal215);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 384:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(384, 31);
						// SugarCpp.g:384:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(384, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(384, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(384, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:385:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2614);
				suffix_expr216=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr216.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 55);
			LeaveRule("prefix_expr", 55);
			LeaveRule_prefix_expr();
			if (state.backtracking > 0) { Memoize(input, 55, prefix_expr_StartIndex); }

		}
		DebugLocation(386, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:388:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 56);
		TraceIn("expr_list", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal218 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr219 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal218_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(388, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// SugarCpp.g:389:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:389:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(389, 4);
			PushFollow(Follow._expr_in_expr_list2626);
			expr217=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr217.Tree);
			DebugLocation(389, 9);
			// SugarCpp.g:389:9: ( ',' ! expr )*
			try { DebugEnterSubRule(76);
			while (true)
			{
				int alt76=2;
				try { DebugEnterDecision(76, false);
				int LA76_0 = input.LA(1);

				if ((LA76_0==70))
				{
					alt76 = 1;
				}


				} finally { DebugExitDecision(76); }
				switch ( alt76 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:389:10: ',' ! expr
					{
					DebugLocation(389, 13);
					char_literal218=(IToken)Match(input,70,Follow._70_in_expr_list2629); if (state.failed) return retval;
					DebugLocation(389, 15);
					PushFollow(Follow._expr_in_expr_list2632);
					expr219=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr219.Tree);

					}
					break;

				default:
					goto loop76;
				}
			}

			loop76:
				;

			} finally { DebugExitSubRule(76); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 56);
			LeaveRule("expr_list", 56);
			LeaveRule_expr_list();
			if (state.backtracking > 0) { Memoize(input, 56, expr_list_StartIndex); }

		}
		DebugLocation(390, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:392:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 57);
		TraceIn("suffix_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int suffix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal220 = default(IToken);
		IToken string_literal221 = default(IToken);
		IToken char_literal222 = default(IToken);
		IToken string_literal224 = default(IToken);
		IToken char_literal227 = default(IToken);
		IToken char_literal229 = default(IToken);
		IToken char_literal230 = default(IToken);
		IToken char_literal232 = default(IToken);
		IToken char_literal233 = default(IToken);
		IToken char_literal235 = default(IToken);
		IToken char_literal237 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident223 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident225 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list228 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list236 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree string_literal221_tree = default(CommonTree);
		CommonTree char_literal222_tree = default(CommonTree);
		CommonTree string_literal224_tree = default(CommonTree);
		CommonTree char_literal227_tree = default(CommonTree);
		CommonTree char_literal229_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		CommonTree char_literal232_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree char_literal237_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(392, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// SugarCpp.g:393:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:393:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(393, 4);
			// SugarCpp.g:393:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:393:5: a= atom_expr
			{
			DebugLocation(393, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2648);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 393:17: -> $a
			{
				DebugLocation(393, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(393, 24);
			// SugarCpp.g:393:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(81);
			while (true)
			{
				int alt81=8;
				try { DebugEnterDecision(81, false);
				switch (input.LA(1))
				{
				case 84:
					{
					int LA81_10 = input.LA(2);

					if ((EvaluatePredicate(synpred135_SugarCpp_fragment)))
					{
						alt81 = 5;
					}


					}
					break;
				case 68:
					{
					alt81 = 1;
					}
					break;
				case 72:
					{
					alt81 = 2;
					}
					break;
				case 76:
					{
					alt81 = 3;
					}
					break;
				case 74:
					{
					alt81 = 4;
					}
					break;
				case 63:
					{
					alt81 = 5;
					}
					break;
				case 95:
					{
					alt81 = 6;
					}
					break;
				case 80:
					{
					alt81 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(81); }
				switch ( alt81 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:393:26: '++'
					{
					DebugLocation(393, 26);
					string_literal220=(IToken)Match(input,68,Follow._68_in_suffix_expr2658); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(string_literal220);



					{
					// AST REWRITE
					// elements: suffix_expr, 68
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(393, 34);
						// SugarCpp.g:393:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(393, 48);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(393, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:394:14: '--'
					{
					DebugLocation(394, 14);
					string_literal221=(IToken)Match(input,72,Follow._72_in_suffix_expr2684); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(string_literal221);



					{
					// AST REWRITE
					// elements: 72, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(394, 22);
						// SugarCpp.g:394:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(394, 36);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(394, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:395:11: '.' ident
					{
					DebugLocation(395, 11);
					char_literal222=(IToken)Match(input,76,Follow._76_in_suffix_expr2707); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal222);

					DebugLocation(395, 15);
					PushFollow(Follow._ident_in_suffix_expr2709);
					ident223=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident223.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 76
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(395, 24);
						// SugarCpp.g:395:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(395, 38);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(395, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(395, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:396:11: '->' ident
					{
					DebugLocation(396, 11);
					string_literal224=(IToken)Match(input,74,Follow._74_in_suffix_expr2734); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(string_literal224);

					DebugLocation(396, 16);
					PushFollow(Follow._ident_in_suffix_expr2736);
					ident225=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident225.Tree);


					{
					// AST REWRITE
					// elements: ident, suffix_expr, 74
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(396, 25);
						// SugarCpp.g:396:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(396, 39);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(396, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(396, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:397:11: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(397, 11);
					// SugarCpp.g:397:11: ( generic_parameter )?
					int alt77=2;
					try { DebugEnterSubRule(77);
					try { DebugEnterDecision(77, false);
					int LA77_0 = input.LA(1);

					if ((LA77_0==84))
					{
						alt77 = 1;
					}
					} finally { DebugExitDecision(77); }
					switch (alt77)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:397:11: generic_parameter
						{
						DebugLocation(397, 11);
						PushFollow(Follow._generic_parameter_in_suffix_expr2761);
						generic_parameter226=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter226.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(77); }

					DebugLocation(397, 30);
					char_literal227=(IToken)Match(input,63,Follow._63_in_suffix_expr2764); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal227);

					DebugLocation(397, 34);
					// SugarCpp.g:397:34: ( expr_list )?
					int alt78=2;
					try { DebugEnterSubRule(78);
					try { DebugEnterDecision(78, false);
					int LA78_0 = input.LA(1);

					if ((LA78_0==IDENT||LA78_0==NUMBER||LA78_0==STRING||LA78_0==56||LA78_0==61||LA78_0==63||LA78_0==65||(LA78_0>=67 && LA78_0<=68)||(LA78_0>=71 && LA78_0<=72)||LA78_0==96||LA78_0==110||LA78_0==119))
					{
						alt78 = 1;
					}
					} finally { DebugExitDecision(78); }
					switch (alt78)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:397:34: expr_list
						{
						DebugLocation(397, 34);
						PushFollow(Follow._expr_list_in_suffix_expr2766);
						expr_list228=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list228.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(78); }

					DebugLocation(397, 45);
					char_literal229=(IToken)Match(input,64,Follow._64_in_suffix_expr2769); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_64.Add(char_literal229);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:49: -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(397, 52);
						// SugarCpp.g:397:52: ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(397, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(397, 77);
						// SugarCpp.g:397:77: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(397, 77);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(397, 96);
						// SugarCpp.g:397:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(397, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:398:11: '[' ( expr_list )? ']'
					{
					DebugLocation(398, 11);
					char_literal230=(IToken)Match(input,95,Follow._95_in_suffix_expr2796); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal230);

					DebugLocation(398, 15);
					// SugarCpp.g:398:15: ( expr_list )?
					int alt79=2;
					try { DebugEnterSubRule(79);
					try { DebugEnterDecision(79, false);
					int LA79_0 = input.LA(1);

					if ((LA79_0==IDENT||LA79_0==NUMBER||LA79_0==STRING||LA79_0==56||LA79_0==61||LA79_0==63||LA79_0==65||(LA79_0>=67 && LA79_0<=68)||(LA79_0>=71 && LA79_0<=72)||LA79_0==96||LA79_0==110||LA79_0==119))
					{
						alt79 = 1;
					}
					} finally { DebugExitDecision(79); }
					switch (alt79)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:398:15: expr_list
						{
						DebugLocation(398, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2798);
						expr_list231=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list231.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(79); }

					DebugLocation(398, 26);
					char_literal232=(IToken)Match(input,97,Follow._97_in_suffix_expr2801); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal232);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 398:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(398, 33);
						// SugarCpp.g:398:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(398, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(398, 58);
						// SugarCpp.g:398:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(398, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:399:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(399, 11);
					char_literal233=(IToken)Match(input,80,Follow._80_in_suffix_expr2825); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_80.Add(char_literal233);

					DebugLocation(399, 15);
					PushFollow(Follow._ident_in_suffix_expr2827);
					ident234=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident234.Tree);
					DebugLocation(399, 21);
					char_literal235=(IToken)Match(input,63,Follow._63_in_suffix_expr2829); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal235);

					DebugLocation(399, 25);
					// SugarCpp.g:399:25: ( expr_list )?
					int alt80=2;
					try { DebugEnterSubRule(80);
					try { DebugEnterDecision(80, false);
					int LA80_0 = input.LA(1);

					if ((LA80_0==IDENT||LA80_0==NUMBER||LA80_0==STRING||LA80_0==56||LA80_0==61||LA80_0==63||LA80_0==65||(LA80_0>=67 && LA80_0<=68)||(LA80_0>=71 && LA80_0<=72)||LA80_0==96||LA80_0==110||LA80_0==119))
					{
						alt80 = 1;
					}
					} finally { DebugExitDecision(80); }
					switch (alt80)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:399:25: expr_list
						{
						DebugLocation(399, 25);
						PushFollow(Follow._expr_list_in_suffix_expr2831);
						expr_list236=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list236.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(80); }

					DebugLocation(399, 36);
					char_literal237=(IToken)Match(input,64,Follow._64_in_suffix_expr2834); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_64.Add(char_literal237);



					{
					// AST REWRITE
					// elements: ident, expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 399:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(399, 43);
						// SugarCpp.g:399:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(399, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(399, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(399, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(399, 79);
						// SugarCpp.g:399:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(399, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop81;
				}
			}

			loop81:
				;

			} finally { DebugExitSubRule(81); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 57);
			LeaveRule("suffix_expr", 57);
			LeaveRule_suffix_expr();
			if (state.backtracking > 0) { Memoize(input, 57, suffix_expr_StartIndex); }

		}
		DebugLocation(401, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:403:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 58);
		TraceIn("atom_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER238 = default(IToken);
		IToken STRING240 = default(IToken);
		IToken char_literal241 = default(IToken);
		IToken char_literal243 = default(IToken);
		IToken char_literal245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER238_tree = default(CommonTree);
		CommonTree STRING240_tree = default(CommonTree);
		CommonTree char_literal241_tree = default(CommonTree);
		CommonTree char_literal243_tree = default(CommonTree);
		CommonTree char_literal245_tree = default(CommonTree);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(403, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// SugarCpp.g:408:2: ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) )
			int alt83=4;
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt83 = 1;
				}
				break;
			case IDENT:
				{
				alt83 = 2;
				}
				break;
			case STRING:
				{
				alt83 = 3;
				}
				break;
			case 63:
				{
				alt83 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:408:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(408, 4);
				NUMBER238=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr2878); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER238_tree = (CommonTree)adaptor.Create(NUMBER238);
				adaptor.AddChild(root_0, NUMBER238_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:409:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(409, 4);
				PushFollow(Follow._ident_in_atom_expr2883);
				ident239=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident239.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:410:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(410, 4);
				STRING240=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr2888); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING240_tree = (CommonTree)adaptor.Create(STRING240);
				adaptor.AddChild(root_0, STRING240_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:411:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(411, 4);
				char_literal241=(IToken)Match(input,63,Follow._63_in_atom_expr2893); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_63.Add(char_literal241);

				DebugLocation(411, 8);
				PushFollow(Follow._expr_in_atom_expr2895);
				expr242=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr242.Tree);
				DebugLocation(411, 13);
				// SugarCpp.g:411:13: ( ',' expr )*
				try { DebugEnterSubRule(82);
				while (true)
				{
					int alt82=2;
					try { DebugEnterDecision(82, false);
					int LA82_0 = input.LA(1);

					if ((LA82_0==70))
					{
						alt82 = 1;
					}


					} finally { DebugExitDecision(82); }
					switch ( alt82 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:411:14: ',' expr
						{
						DebugLocation(411, 14);
						char_literal243=(IToken)Match(input,70,Follow._70_in_atom_expr2898); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_70.Add(char_literal243);

						DebugLocation(411, 18);
						PushFollow(Follow._expr_in_atom_expr2900);
						expr244=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr244.Tree);
						DebugLocation(411, 23);
						if (state.backtracking == 0)
						{
							 more_than_one = true; 
						}

						}
						break;

					default:
						goto loop82;
					}
				}

				loop82:
					;

				} finally { DebugExitSubRule(82); }

				DebugLocation(411, 52);
				char_literal245=(IToken)Match(input,64,Follow._64_in_atom_expr2907); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_64.Add(char_literal245);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 412:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(412, 25);
					// SugarCpp.g:412:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(412, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(412, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(412, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 413:3: -> ^( Expr_Bracket expr )
				{
					DebugLocation(413, 6);
					// SugarCpp.g:413:6: ^( Expr_Bracket expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(413, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

					DebugLocation(413, 21);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 58);
			LeaveRule("atom_expr", 58);
			LeaveRule_atom_expr();
			if (state.backtracking > 0) { Memoize(input, 58, atom_expr_StartIndex); }

		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:416:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 59);
		TraceIn("lvalue", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal246 = default(IToken);
		IToken string_literal247 = default(IToken);
		IToken char_literal248 = default(IToken);
		IToken string_literal250 = default(IToken);
		IToken char_literal253 = default(IToken);
		IToken char_literal255 = default(IToken);
		IToken char_literal256 = default(IToken);
		IToken char_literal258 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident251 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list257 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal246_tree = default(CommonTree);
		CommonTree string_literal247_tree = default(CommonTree);
		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree string_literal250_tree = default(CommonTree);
		CommonTree char_literal253_tree = default(CommonTree);
		CommonTree char_literal255_tree = default(CommonTree);
		CommonTree char_literal256_tree = default(CommonTree);
		CommonTree char_literal258_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_95=new RewriteRuleITokenStream(adaptor,"token 95");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(416, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// SugarCpp.g:417:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:417:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			{
			DebugLocation(417, 4);
			// SugarCpp.g:417:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:417:5: a= lvalue_atom
			{
			DebugLocation(417, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue2944);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 417:19: -> $a
			{
				DebugLocation(417, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(417, 26);
			// SugarCpp.g:417:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=7;
				try { DebugEnterDecision(87, false);
				switch (input.LA(1))
				{
				case 68:
					{
					alt87 = 1;
					}
					break;
				case 72:
					{
					alt87 = 2;
					}
					break;
				case 76:
					{
					alt87 = 3;
					}
					break;
				case 74:
					{
					alt87 = 4;
					}
					break;
				case 63:
				case 84:
					{
					alt87 = 5;
					}
					break;
				case 95:
					{
					alt87 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(87); }
				switch ( alt87 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:417:28: '++'
					{
					DebugLocation(417, 28);
					string_literal246=(IToken)Match(input,68,Follow._68_in_lvalue2954); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(string_literal246);



					{
					// AST REWRITE
					// elements: 68, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 417:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(417, 36);
						// SugarCpp.g:417:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(417, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(417, 50);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(417, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:418:16: '--'
					{
					DebugLocation(418, 16);
					string_literal247=(IToken)Match(input,72,Follow._72_in_lvalue2982); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(string_literal247);



					{
					// AST REWRITE
					// elements: lvalue, 72
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 418:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(418, 24);
						// SugarCpp.g:418:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(418, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(418, 38);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(418, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:419:13: '.' ident
					{
					DebugLocation(419, 13);
					char_literal248=(IToken)Match(input,76,Follow._76_in_lvalue3007); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal248);

					DebugLocation(419, 17);
					PushFollow(Follow._ident_in_lvalue3009);
					ident249=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident249.Tree);


					{
					// AST REWRITE
					// elements: 76, ident, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 419:23: -> ^( Expr_Access '.' $lvalue ident )
					{
						DebugLocation(419, 26);
						// SugarCpp.g:419:26: ^( Expr_Access '.' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(419, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(419, 40);
						adaptor.AddChild(root_1, stream_76.NextNode());
						DebugLocation(419, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(419, 52);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:420:13: '->' ident
					{
					DebugLocation(420, 13);
					string_literal250=(IToken)Match(input,74,Follow._74_in_lvalue3036); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(string_literal250);

					DebugLocation(420, 18);
					PushFollow(Follow._ident_in_lvalue3038);
					ident251=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident251.Tree);


					{
					// AST REWRITE
					// elements: lvalue, ident, 74
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 420:24: -> ^( Expr_Access '->' $lvalue ident )
					{
						DebugLocation(420, 27);
						// SugarCpp.g:420:27: ^( Expr_Access '->' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(420, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(420, 41);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(420, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(420, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:421:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(421, 13);
					// SugarCpp.g:421:13: ( generic_parameter )?
					int alt84=2;
					try { DebugEnterSubRule(84);
					try { DebugEnterDecision(84, false);
					int LA84_0 = input.LA(1);

					if ((LA84_0==84))
					{
						alt84 = 1;
					}
					} finally { DebugExitDecision(84); }
					switch (alt84)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:421:13: generic_parameter
						{
						DebugLocation(421, 13);
						PushFollow(Follow._generic_parameter_in_lvalue3065);
						generic_parameter252=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter252.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(84); }

					DebugLocation(421, 32);
					char_literal253=(IToken)Match(input,63,Follow._63_in_lvalue3068); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal253);

					DebugLocation(421, 36);
					// SugarCpp.g:421:36: ( expr_list )?
					int alt85=2;
					try { DebugEnterSubRule(85);
					try { DebugEnterDecision(85, false);
					int LA85_0 = input.LA(1);

					if ((LA85_0==IDENT||LA85_0==NUMBER||LA85_0==STRING||LA85_0==56||LA85_0==61||LA85_0==63||LA85_0==65||(LA85_0>=67 && LA85_0<=68)||(LA85_0>=71 && LA85_0<=72)||LA85_0==96||LA85_0==110||LA85_0==119))
					{
						alt85 = 1;
					}
					} finally { DebugExitDecision(85); }
					switch (alt85)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:421:36: expr_list
						{
						DebugLocation(421, 36);
						PushFollow(Follow._expr_list_in_lvalue3070);
						expr_list254=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list254.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(85); }

					DebugLocation(421, 47);
					char_literal255=(IToken)Match(input,64,Follow._64_in_lvalue3073); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_64.Add(char_literal255);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 421:51: -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(421, 54);
						// SugarCpp.g:421:54: ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(421, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(421, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(421, 74);
						// SugarCpp.g:421:74: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(421, 74);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(421, 93);
						// SugarCpp.g:421:93: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(421, 93);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:422:13: '[' ( expr_list )? ']'
					{
					DebugLocation(422, 13);
					char_literal256=(IToken)Match(input,95,Follow._95_in_lvalue3102); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_95.Add(char_literal256);

					DebugLocation(422, 17);
					// SugarCpp.g:422:17: ( expr_list )?
					int alt86=2;
					try { DebugEnterSubRule(86);
					try { DebugEnterDecision(86, false);
					int LA86_0 = input.LA(1);

					if ((LA86_0==IDENT||LA86_0==NUMBER||LA86_0==STRING||LA86_0==56||LA86_0==61||LA86_0==63||LA86_0==65||(LA86_0>=67 && LA86_0<=68)||(LA86_0>=71 && LA86_0<=72)||LA86_0==96||LA86_0==110||LA86_0==119))
					{
						alt86 = 1;
					}
					} finally { DebugExitDecision(86); }
					switch (alt86)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:422:17: expr_list
						{
						DebugLocation(422, 17);
						PushFollow(Follow._expr_list_in_lvalue3104);
						expr_list257=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list257.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(86); }

					DebugLocation(422, 28);
					char_literal258=(IToken)Match(input,97,Follow._97_in_lvalue3107); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_97.Add(char_literal258);



					{
					// AST REWRITE
					// elements: lvalue, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 422:32: -> ^( Expr_Dict $lvalue ( expr_list )? )
					{
						DebugLocation(422, 35);
						// SugarCpp.g:422:35: ^( Expr_Dict $lvalue ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(422, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(422, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(422, 55);
						// SugarCpp.g:422:55: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(422, 55);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop87;
				}
			}

			loop87:
				;

			} finally { DebugExitSubRule(87); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 59);
			LeaveRule("lvalue", 59);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 59, lvalue_StartIndex); }

		}
		DebugLocation(424, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:426:1: lvalue_atom : ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 60);
		TraceIn("lvalue_atom", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_atom_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal259 = default(IToken);
		IToken char_literal261 = default(IToken);
		IToken char_literal263 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue260 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue262 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident264 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal259_tree = default(CommonTree);
		CommonTree char_literal261_tree = default(CommonTree);
		CommonTree char_literal263_tree = default(CommonTree);
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(426, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 60)) { return retval; }

			// SugarCpp.g:427:2: ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident )
			int alt90=2;
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==63))
			{
				alt90 = 1;
			}
			else if ((LA90_0==IDENT))
			{
				alt90 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 90, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:427:4: '(' ( lvalue ( ',' lvalue )* )? ')'
				{
				DebugLocation(427, 4);
				char_literal259=(IToken)Match(input,63,Follow._63_in_lvalue_atom3146); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_63.Add(char_literal259);

				DebugLocation(427, 8);
				// SugarCpp.g:427:8: ( lvalue ( ',' lvalue )* )?
				int alt89=2;
				try { DebugEnterSubRule(89);
				try { DebugEnterDecision(89, false);
				int LA89_0 = input.LA(1);

				if ((LA89_0==IDENT||LA89_0==63))
				{
					alt89 = 1;
				}
				} finally { DebugExitDecision(89); }
				switch (alt89)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:427:9: lvalue ( ',' lvalue )*
					{
					DebugLocation(427, 9);
					PushFollow(Follow._lvalue_in_lvalue_atom3149);
					lvalue260=lvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lvalue.Add(lvalue260.Tree);
					DebugLocation(427, 16);
					// SugarCpp.g:427:16: ( ',' lvalue )*
					try { DebugEnterSubRule(88);
					while (true)
					{
						int alt88=2;
						try { DebugEnterDecision(88, false);
						int LA88_0 = input.LA(1);

						if ((LA88_0==70))
						{
							alt88 = 1;
						}


						} finally { DebugExitDecision(88); }
						switch ( alt88 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:427:17: ',' lvalue
							{
							DebugLocation(427, 17);
							char_literal261=(IToken)Match(input,70,Follow._70_in_lvalue_atom3152); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_70.Add(char_literal261);

							DebugLocation(427, 21);
							PushFollow(Follow._lvalue_in_lvalue_atom3154);
							lvalue262=lvalue();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_lvalue.Add(lvalue262.Tree);

							}
							break;

						default:
							goto loop88;
						}
					}

					loop88:
						;

					} finally { DebugExitSubRule(88); }


					}
					break;

				}
				} finally { DebugExitSubRule(89); }

				DebugLocation(427, 32);
				char_literal263=(IToken)Match(input,64,Follow._64_in_lvalue_atom3160); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_64.Add(char_literal263);



				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 427:36: -> ^( Match_Tuple ( lvalue )* )
				{
					DebugLocation(427, 39);
					// SugarCpp.g:427:39: ^( Match_Tuple ( lvalue )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(427, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(427, 53);
					// SugarCpp.g:427:53: ( lvalue )*
					while ( stream_lvalue.HasNext )
					{
						DebugLocation(427, 53);
						adaptor.AddChild(root_1, stream_lvalue.NextTree());

					}
					stream_lvalue.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:428:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(428, 4);
				PushFollow(Follow._ident_in_lvalue_atom3174);
				ident264=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident264.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 60);
			LeaveRule("lvalue_atom", 60);
			LeaveRule_lvalue_atom();
			if (state.backtracking > 0) { Memoize(input, 60, lvalue_atom_StartIndex); }

		}
		DebugLocation(429, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:431:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 61);
		TraceIn("ident", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT265 = default(IToken);
		IToken string_literal266 = default(IToken);
		IToken IDENT267 = default(IToken);

		CommonTree IDENT265_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		CommonTree IDENT267_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(431, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 61)) { return retval; }

			// SugarCpp.g:432:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:432:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(432, 4);
			IDENT265=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3185); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT265_tree = (CommonTree)adaptor.Create(IDENT265);
			adaptor.AddChild(root_0, IDENT265_tree);
			}
			DebugLocation(432, 10);
			// SugarCpp.g:432:10: ( '::' IDENT )*
			try { DebugEnterSubRule(91);
			while (true)
			{
				int alt91=2;
				try { DebugEnterDecision(91, false);
				int LA91_0 = input.LA(1);

				if ((LA91_0==81))
				{
					alt91 = 1;
				}


				} finally { DebugExitDecision(91); }
				switch ( alt91 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:432:11: '::' IDENT
					{
					DebugLocation(432, 11);
					string_literal266=(IToken)Match(input,81,Follow._81_in_ident3188); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal266_tree = (CommonTree)adaptor.Create(string_literal266);
					adaptor.AddChild(root_0, string_literal266_tree);
					}
					DebugLocation(432, 16);
					IDENT267=(IToken)Match(input,IDENT,Follow._IDENT_in_ident3190); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT267_tree = (CommonTree)adaptor.Create(IDENT267);
					adaptor.AddChild(root_0, IDENT267_tree);
					}

					}
					break;

				default:
					goto loop91;
				}
			}

			loop91:
				;

			} finally { DebugExitSubRule(91); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 61);
			LeaveRule("ident", 61);
			LeaveRule_ident();
			if (state.backtracking > 0) { Memoize(input, 61, ident_StartIndex); }

		}
		DebugLocation(433, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:435:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 62);
		TraceIn("infix_func", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal268 = default(IToken);
		IToken char_literal270 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident269 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal268_tree = default(CommonTree);
		CommonTree char_literal270_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(435, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 62)) { return retval; }

			// SugarCpp.g:436:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:436:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(436, 7);
			char_literal268=(IToken)Match(input,100,Follow._100_in_infix_func3203); if (state.failed) return retval;
			DebugLocation(436, 9);
			PushFollow(Follow._ident_in_infix_func3206);
			ident269=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident269.Tree);
			DebugLocation(436, 18);
			char_literal270=(IToken)Match(input,100,Follow._100_in_infix_func3208); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 62);
			LeaveRule("infix_func", 62);
			LeaveRule_infix_func();
			if (state.backtracking > 0) { Memoize(input, 62, infix_func_StartIndex); }

		}
		DebugLocation(437, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred135_SugarCpp_fragment();
	partial void LeaveRule_synpred135_SugarCpp_fragment();

	// $ANTLR start synpred135_SugarCpp
	public void synpred135_SugarCpp_fragment()
	{
		EnterRule_synpred135_SugarCpp_fragment();
		EnterRule("synpred135_SugarCpp_fragment", 197);
		TraceIn("synpred135_SugarCpp_fragment", 197);
		try
		{
			// SugarCpp.g:397:11: ( ( generic_parameter )? '(' ( expr_list )? ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:397:11: ( generic_parameter )? '(' ( expr_list )? ')'
			{
			DebugLocation(397, 11);
			// SugarCpp.g:397:11: ( generic_parameter )?
			int alt114=2;
			try { DebugEnterSubRule(114);
			try { DebugEnterDecision(114, false);
			int LA114_0 = input.LA(1);

			if ((LA114_0==84))
			{
				alt114 = 1;
			}
			} finally { DebugExitDecision(114); }
			switch (alt114)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:397:11: generic_parameter
				{
				DebugLocation(397, 11);
				PushFollow(Follow._generic_parameter_in_synpred135_SugarCpp2761);
				generic_parameter();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(114); }

			DebugLocation(397, 30);
			Match(input,63,Follow._63_in_synpred135_SugarCpp2764); if (state.failed) return;
			DebugLocation(397, 34);
			// SugarCpp.g:397:34: ( expr_list )?
			int alt115=2;
			try { DebugEnterSubRule(115);
			try { DebugEnterDecision(115, false);
			int LA115_0 = input.LA(1);

			if ((LA115_0==IDENT||LA115_0==NUMBER||LA115_0==STRING||LA115_0==56||LA115_0==61||LA115_0==63||LA115_0==65||(LA115_0>=67 && LA115_0<=68)||(LA115_0>=71 && LA115_0<=72)||LA115_0==96||LA115_0==110||LA115_0==119))
			{
				alt115 = 1;
			}
			} finally { DebugExitDecision(115); }
			switch (alt115)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:397:34: expr_list
				{
				DebugLocation(397, 34);
				PushFollow(Follow._expr_list_in_synpred135_SugarCpp2766);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(115); }

			DebugLocation(397, 45);
			Match(input,64,Follow._64_in_synpred135_SugarCpp2769); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred135_SugarCpp_fragment", 197);
			LeaveRule("synpred135_SugarCpp_fragment", 197);
			LeaveRule_synpred135_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred135_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA4 dfa4;
	private DFA14 dfa14;
	private DFA20 dfa20;
	private DFA37 dfa37;
	private DFA47 dfa47;
	private DFA55 dfa55;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa14 = new DFA14( this );
		dfa20 = new DFA20( this );
		dfa37 = new DFA37( this );
		dfa47 = new DFA47( this );
		dfa55 = new DFA55( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x30\xFFFF";
		private const string DFA4_eofS =
			"\x30\xFFFF";
		private const string DFA4_minS =
			"\x3\x1F\x7\xFFFF\x1\x3F\x1\x1F\x1\xFFFF\x3\x1F\x1\x26\x1\x1F\x1\x3F\x3"+
			"\x40\x1\x3F\x2\x1F\x1\x46\x3\x1F\x4\x40\x1\x3F\x3\x40\x2\x1F\x1\x46\x1"+
			"\x1F\x5\x40\x1\x1F\x1\x40";
		private const string DFA4_maxS =
			"\x1\x77\x1\x1F\x1\x77\x7\xFFFF\x1\x61\x1\x1F\x1\xFFFF\x1\x1F\x1\x2C\x1"+
			"\x1F\x1\x26\x1\x77\x1\x61\x2\x46\x1\x51\x1\x61\x1\x77\x1\x2C\x1\x61\x2"+
			"\x1F\x1\x2C\x2\x46\x2\x51\x1\x61\x2\x46\x1\x51\x1\x1F\x1\x2C\x1\x61\x1"+
			"\x1F\x1\x51\x2\x46\x2\x51\x1\x1F\x1\x51";
		private const string DFA4_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x2\xFFFF\x1\x4\x23"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\x30\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x2\x3F\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\xFFFF\x1\x5\x2\xFFFF\x1\x8"+
				"\x1\xFFFF\x1\x9\x3\xFFFF\x1\x7\x1\x6\x4\xFFFF\x1\x3",
				"\x1\xA",
				"\x1\x3\x1D\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x11",
				"",
				"\x1\x12",
				"\x1\x15\x7\xFFFF\x1\x13\x4\xFFFF\x1\x14",
				"\x1\x16",
				"\x1\x17",
				"\x1\x3\x1D\xFFFF\x1\x3\x1\xFFFF\x1\x3\x1\xFFFF\x1\x3\x4\xFFFF\x1\xC"+
				"\x9\xFFFF\x1\xC\x1\xB\x1\xC\x1\xFFFF\x1\x3\xA\xFFFF\x1\x3\x17\xFFFF"+
				"\x1\x3",
				"\x1\xE\x6\xFFFF\x1\xF\xA\xFFFF\x1\xD\xF\xFFFF\x1\x10",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x2\x6\xFFFF\x1\x17\x38\xFFFF\x1\x1\x6\xFFFF\x1\x4\x1\xFFFF\x1\x5"+
				"\xE\xFFFF\x1\x3",
				"\x1\x1F\x7\xFFFF\x1\x1D\x4\xFFFF\x1\x1E",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x20",
				"\x1\x21",
				"\x1\x24\x7\xFFFF\x1\x22\x4\xFFFF\x1\x23",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x1A",
				"\x1\x1C\x6\xFFFF\x1\xF\xA\xFFFF\x1\x1B\xF\xFFFF\x1\x10",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x29",
				"\x1\x2C\x7\xFFFF\x1\x2A\x4\xFFFF\x1\x2B",
				"\x1\xF\x1A\xFFFF\x1\x10",
				"\x1\x2D",
				"\x1\x19\x5\xFFFF\x1\x18\xA\xFFFF\x1\x25",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x28",
				"\x1\x2F",
				"\x1\x27\x5\xFFFF\x1\x26\xA\xFFFF\x1\x2E"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "163:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x2A\xFFFF";
		private const string DFA14_eofS =
			"\x2A\xFFFF";
		private const string DFA14_minS =
			"\x2\x1F\x1\x46\x1\x3F\x1\x1F\x2\xFFFF\x3\x1F\x1\x26\x1\x46\x1\x3F\x3"+
			"\x40\x1\x3F\x2\x1F\x1\x46\x3\x1F\x4\x40\x1\x3F\x3\x40\x2\x1F\x1\x46\x1"+
			"\x1F\x5\x40\x1\x1F\x1\x40";
		private const string DFA14_maxS =
			"\x1\x5F\x1\x1F\x1\x52\x1\x61\x1\x1F\x2\xFFFF\x1\x1F\x1\x2C\x1\x1F\x1"+
			"\x26\x1\x52\x1\x61\x2\x46\x1\x51\x1\x61\x1\x5F\x1\x2C\x1\x61\x2\x1F\x1"+
			"\x2C\x2\x46\x2\x51\x1\x61\x2\x46\x1\x51\x1\x1F\x1\x2C\x1\x61\x1\x1F\x1"+
			"\x51\x2\x46\x2\x51\x1\x1F\x1\x51";
		private const string DFA14_acceptS =
			"\x5\xFFFF\x1\x1\x1\x2\x23\xFFFF";
		private const string DFA14_specialS =
			"\x2A\xFFFF}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x1\x2\x3F\xFFFF\x1\x1",
				"\x1\x3",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\xB",
				"",
				"",
				"\x1\xC",
				"\x1\xF\x7\xFFFF\x1\xD\x4\xFFFF\x1\xE",
				"\x1\x10",
				"\x1\x11",
				"\x1\x5\x9\xFFFF\x1\x5\x1\x4\x1\x6",
				"\x1\x8\x6\xFFFF\x1\x9\xA\xFFFF\x1\x7\xF\xFFFF\x1\xA",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x2\x6\xFFFF\x1\x11\x38\xFFFF\x1\x1",
				"\x1\x19\x7\xFFFF\x1\x17\x4\xFFFF\x1\x18",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x1A",
				"\x1\x1B",
				"\x1\x1E\x7\xFFFF\x1\x1C\x4\xFFFF\x1\x1D",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x14",
				"\x1\x16\x6\xFFFF\x1\x9\xA\xFFFF\x1\x15\xF\xFFFF\x1\xA",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x23",
				"\x1\x26\x7\xFFFF\x1\x24\x4\xFFFF\x1\x25",
				"\x1\x9\x1A\xFFFF\x1\xA",
				"\x1\x27",
				"\x1\x13\x5\xFFFF\x1\x12\xA\xFFFF\x1\x1F",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x22",
				"\x1\x29",
				"\x1\x21\x5\xFFFF\x1\x20\xA\xFFFF\x1\x28"
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "188:1: global_alloc : ( ( attribute )? ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc ( attribute )? type_name ident_list ( expr )? ) | ( attribute )? ident ':=' modify_expr -> ^( ':=' ( attribute )? ident modify_expr ) );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA20 : DFA
	{
		private const string DFA20_eotS =
			"\x4\xFFFF";
		private const string DFA20_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA20_minS =
			"\x1\x26\x1\x8\x2\xFFFF";
		private const string DFA20_maxS =
			"\x1\x26\x1\x77\x2\xFFFF";
		private const string DFA20_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA20_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA20_transitionS =
			{
				"\x1\x1",
				"\x1\x2\x16\xFFFF\x1\x2\x1\x3\x5\xFFFF\x1\x1\x38\xFFFF\x1\x2\x6\xFFFF"+
				"\x1\x2\x1\xFFFF\x1\x2\x2\xFFFF\x1\x2\x1\xFFFF\x1\x2\x3\xFFFF\x2\x2\x4"+
				"\xFFFF\x1\x2",
				"",
				""
			};

		private static readonly short[] DFA20_eot = DFA.UnpackEncodedString(DFA20_eotS);
		private static readonly short[] DFA20_eof = DFA.UnpackEncodedString(DFA20_eofS);
		private static readonly char[] DFA20_min = DFA.UnpackEncodedStringToUnsignedChars(DFA20_minS);
		private static readonly char[] DFA20_max = DFA.UnpackEncodedStringToUnsignedChars(DFA20_maxS);
		private static readonly short[] DFA20_accept = DFA.UnpackEncodedString(DFA20_acceptS);
		private static readonly short[] DFA20_special = DFA.UnpackEncodedString(DFA20_specialS);
		private static readonly short[][] DFA20_transition;

		static DFA20()
		{
			int numStates = DFA20_transitionS.Length;
			DFA20_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA20_transition[i] = DFA.UnpackEncodedString(DFA20_transitionS[i]);
			}
		}

		public DFA20( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 20;
			this.eot = DFA20_eot;
			this.eof = DFA20_eof;
			this.min = DFA20_min;
			this.max = DFA20_max;
			this.accept = DFA20_accept;
			this.special = DFA20_special;
			this.transition = DFA20_transition;
		}

		public override string Description { get { return "202:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA37 : DFA
	{
		private const string DFA37_eotS =
			"\xF\xFFFF";
		private const string DFA37_eofS =
			"\xF\xFFFF";
		private const string DFA37_minS =
			"\x2\x1F\x1\xFFFF\x2\x1F\x1\xFFFF\x1\x1F\x1\x3D\x3\x1F\x2\x3D\x1\x1F\x1"+
			"\x3D";
		private const string DFA37_maxS =
			"\x2\x77\x1\xFFFF\x1\x1F\x1\x5B\x1\xFFFF\x1\x77\x1\x5F\x2\x1F\x1\x77\x2"+
			"\x5F\x1\x1F\x1\x5F";
		private const string DFA37_acceptS =
			"\x2\xFFFF\x1\x2\x2\xFFFF\x1\x1\x9\xFFFF";
		private const string DFA37_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA37_transitionS =
			{
				"\x1\x1\x57\xFFFF\x1\x2",
				"\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x17\xFFFF\x1\x5",
				"",
				"\x1\x6",
				"\x1\x7\x3B\xFFFF\x1\x5",
				"",
				"\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\xF\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x4\xA\xFFFF\x1\x5\x17\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xB",
				"\x1\xC",
				"\x1\x5\x1D\xFFFF\x1\x5\x1\xFFFF\x1\x2\x1\xFFFF\x1\x5\x1D\xFFFF\x1\x5"+
				"\x17\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5",
				"\x1\xE",
				"\x1\x5\x3\xFFFF\x1\x5\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x2\xFFFF\x1\x5"+
				"\x6\xFFFF\x1\xA\x3\xFFFF\x1\x5"
			};

		private static readonly short[] DFA37_eot = DFA.UnpackEncodedString(DFA37_eotS);
		private static readonly short[] DFA37_eof = DFA.UnpackEncodedString(DFA37_eofS);
		private static readonly char[] DFA37_min = DFA.UnpackEncodedStringToUnsignedChars(DFA37_minS);
		private static readonly char[] DFA37_max = DFA.UnpackEncodedStringToUnsignedChars(DFA37_maxS);
		private static readonly short[] DFA37_accept = DFA.UnpackEncodedString(DFA37_acceptS);
		private static readonly short[] DFA37_special = DFA.UnpackEncodedString(DFA37_specialS);
		private static readonly short[][] DFA37_transition;

		static DFA37()
		{
			int numStates = DFA37_transitionS.Length;
			DFA37_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA37_transition[i] = DFA.UnpackEncodedString(DFA37_transitionS[i]);
			}
		}

		public DFA37( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 37;
			this.eot = DFA37_eot;
			this.eof = DFA37_eof;
			this.min = DFA37_min;
			this.max = DFA37_max;
			this.accept = DFA37_accept;
			this.special = DFA37_special;
			this.transition = DFA37_transition;
		}

		public override string Description { get { return "231:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA47 : DFA
	{
		private const string DFA47_eotS =
			"\x9\xFFFF";
		private const string DFA47_eofS =
			"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5";
		private const string DFA47_minS =
			"\x1\x1F\x1\x26\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x26";
		private const string DFA47_maxS =
			"\x1\x72\x1\x75\x4\xFFFF\x1\x1F\x1\xFFFF\x1\x75";
		private const string DFA47_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA47_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA47_transitionS =
			{
				"\x1\x1\x1F\xFFFF\x1\x5\x2F\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\x3",
				"\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x11\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x2\x5\x3\xFFFF"+
				"\x1\x5\x11\xFFFF\x1\x5"
			};

		private static readonly short[] DFA47_eot = DFA.UnpackEncodedString(DFA47_eotS);
		private static readonly short[] DFA47_eof = DFA.UnpackEncodedString(DFA47_eofS);
		private static readonly char[] DFA47_min = DFA.UnpackEncodedStringToUnsignedChars(DFA47_minS);
		private static readonly char[] DFA47_max = DFA.UnpackEncodedStringToUnsignedChars(DFA47_maxS);
		private static readonly short[] DFA47_accept = DFA.UnpackEncodedString(DFA47_acceptS);
		private static readonly short[] DFA47_special = DFA.UnpackEncodedString(DFA47_specialS);
		private static readonly short[][] DFA47_transition;

		static DFA47()
		{
			int numStates = DFA47_transitionS.Length;
			DFA47_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA47_transition[i] = DFA.UnpackEncodedString(DFA47_transitionS[i]);
			}
		}

		public DFA47( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 47;
			this.eot = DFA47_eot;
			this.eof = DFA47_eof;
			this.min = DFA47_min;
			this.max = DFA47_max;
			this.accept = DFA47_accept;
			this.special = DFA47_special;
			this.transition = DFA47_transition;
		}

		public override string Description { get { return "247:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA55 : DFA
	{
		private const string DFA55_eotS =
			"\x6\xFFFF";
		private const string DFA55_eofS =
			"\x6\xFFFF";
		private const string DFA55_minS =
			"\x1\x1F\x1\x46\x1\x1F\x2\xFFFF\x1\x46";
		private const string DFA55_maxS =
			"\x1\x1F\x1\x52\x1\x1F\x2\xFFFF\x1\x52";
		private const string DFA55_acceptS =
			"\x3\xFFFF\x1\x1\x1\x2\x1\xFFFF";
		private const string DFA55_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA55_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4",
				"\x1\x5",
				"",
				"",
				"\x1\x3\x9\xFFFF\x1\x3\x1\x2\x1\x4"
			};

		private static readonly short[] DFA55_eot = DFA.UnpackEncodedString(DFA55_eotS);
		private static readonly short[] DFA55_eof = DFA.UnpackEncodedString(DFA55_eofS);
		private static readonly char[] DFA55_min = DFA.UnpackEncodedStringToUnsignedChars(DFA55_minS);
		private static readonly char[] DFA55_max = DFA.UnpackEncodedStringToUnsignedChars(DFA55_maxS);
		private static readonly short[] DFA55_accept = DFA.UnpackEncodedString(DFA55_acceptS);
		private static readonly short[] DFA55_special = DFA.UnpackEncodedString(DFA55_specialS);
		private static readonly short[][] DFA55_transition;

		static DFA55()
		{
			int numStates = DFA55_transitionS.Length;
			DFA55_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA55_transition[i] = DFA.UnpackEncodedString(DFA55_transitionS[i]);
			}
		}

		public DFA55( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 55;
			this.eot = DFA55_eot;
			this.eof = DFA55_eof;
			this.min = DFA55_min;
			this.max = DFA55_max;
			this.accept = DFA55_accept;
			this.special = DFA55_special;
			this.transition = DFA55_transition;
		}

		public override string Description { get { return "294:1: stmt_alloc : ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) | ident ':=' ^ modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root413 = new BitSet(new ulong[]{0x4080000000UL,0x86294080000000UL});
		public static readonly BitSet _global_block_in_root416 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block438 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block440 = new BitSet(new ulong[]{0x4080000002UL,0x86294080000000UL});
		public static readonly BitSet _func_def_in_node463 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node468 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node473 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node478 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node483 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node488 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node493 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node498 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args510 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args515 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args520 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item531 = new BitSet(new ulong[]{0x8000000000000002UL});
		public static readonly BitSet _63_in_attribute_item534 = new BitSet(new ulong[]{0x108080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item536 = new BitSet(new ulong[]{0x0UL,0x41UL});
		public static readonly BitSet _70_in_attribute_item539 = new BitSet(new ulong[]{0x108080000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item541 = new BitSet(new ulong[]{0x0UL,0x41UL});
		public static readonly BitSet _64_in_attribute_item545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_attribute570 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute572 = new BitSet(new ulong[]{0x0UL,0x200000040UL});
		public static readonly BitSet _70_in_attribute575 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _attribute_item_in_attribute577 = new BitSet(new ulong[]{0x0UL,0x200000040UL});
		public static readonly BitSet _97_in_attribute581 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute583 = new BitSet(new ulong[]{0x4000000002UL,0x80000000UL});
		public static readonly BitSet _attribute_in_global_alloc602 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_list_in_global_alloc605 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_global_alloc607 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_global_alloc609 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_global_alloc612 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_global_alloc614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_global_alloc637 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_global_alloc640 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_global_alloc642 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _modify_expr_in_global_alloc644 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_global_using668 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef679 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_import_def690 = new BitSet(new ulong[]{0x104000000002UL});
		public static readonly BitSet _STRING_in_import_def692 = new BitSet(new ulong[]{0x4000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def696 = new BitSet(new ulong[]{0x4100000000UL});
		public static readonly BitSet _INDENT_in_import_def699 = new BitSet(new ulong[]{0x104000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def701 = new BitSet(new ulong[]{0x104000000100UL});
		public static readonly BitSet _STRING_in_import_def706 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def708 = new BitSet(new ulong[]{0x104000000100UL});
		public static readonly BitSet _DEDENT_in_import_def713 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def735 = new BitSet(new ulong[]{0x0UL,0x10000000000UL});
		public static readonly BitSet _104_in_enum_def738 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def740 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_enum_def742 = new BitSet(new ulong[]{0x80000002UL});
		public static readonly BitSet _ident_in_enum_def745 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_enum_def748 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_enum_def750 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _109_in_namespace_def783 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_namespace_def785 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def787 = new BitSet(new ulong[]{0x4100000000UL});
		public static readonly BitSet _INDENT_in_namespace_def790 = new BitSet(new ulong[]{0x4080000100UL,0x86294080000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def792 = new BitSet(new ulong[]{0x4080000100UL,0x86294080000000UL});
		public static readonly BitSet _global_block_in_namespace_def795 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def819 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_class_def822 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_class_def824 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_class_def826 = new BitSet(new ulong[]{0x4100000000UL});
		public static readonly BitSet _INDENT_in_class_def829 = new BitSet(new ulong[]{0x4080000100UL,0x86294080000000UL});
		public static readonly BitSet _NEWLINE_in_class_def831 = new BitSet(new ulong[]{0x4080000100UL,0x86294080000000UL});
		public static readonly BitSet _global_block_in_class_def834 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def836 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _65_in_type_name_op858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_type_name_op862 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_type_name_op864 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_type_name_op868 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_type_name877 = new BitSet(new ulong[]{0x2000000000000002UL,0x80100002UL});
		public static readonly BitSet _84_in_type_name880 = new BitSet(new ulong[]{0x80000000UL,0x8000000UL});
		public static readonly BitSet _type_name_in_type_name883 = new BitSet(new ulong[]{0x0UL,0x8000040UL});
		public static readonly BitSet _70_in_type_name886 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_type_name888 = new BitSet(new ulong[]{0x0UL,0x8000040UL});
		public static readonly BitSet _91_in_type_name894 = new BitSet(new ulong[]{0x2000000000000002UL,0x80000002UL});
		public static readonly BitSet _type_name_op_in_type_name898 = new BitSet(new ulong[]{0x2000000000000002UL,0x80000002UL});
		public static readonly BitSet _84_in_generic_parameter932 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_generic_parameter934 = new BitSet(new ulong[]{0x0UL,0x8000040UL});
		public static readonly BitSet _70_in_generic_parameter937 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_generic_parameter939 = new BitSet(new ulong[]{0x0UL,0x8000040UL});
		public static readonly BitSet _91_in_generic_parameter943 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args963 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_func_args966 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args968 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _attribute_in_func_def990 = new BitSet(new ulong[]{0x80000000UL,0x80000000000000UL});
		public static readonly BitSet _type_name_in_func_def993 = new BitSet(new ulong[]{0x80000000UL,0x80000000000000UL});
		public static readonly BitSet _119_in_func_def996 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_func_def999 = new BitSet(new ulong[]{0x8000000000000000UL,0x100000UL});
		public static readonly BitSet _generic_parameter_in_func_def1001 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_func_def1004 = new BitSet(new ulong[]{0x80000000UL,0x1UL});
		public static readonly BitSet _func_args_in_func_def1006 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_func_def1009 = new BitSet(new ulong[]{0x4000000000UL,0x1000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1012 = new BitSet(new ulong[]{0x4100000000UL});
		public static readonly BitSet _stmt_block_in_func_def1015 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _88_in_func_def1064 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_func_def1066 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1107 = new BitSet(new ulong[]{0x8000004080000100UL,0xF860000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1109 = new BitSet(new ulong[]{0x8000004080000100UL,0xF860000000000UL});
		public static readonly BitSet _stmt_in_stmt_block1114 = new BitSet(new ulong[]{0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1116 = new BitSet(new ulong[]{0x8000004080000100UL,0xF860000000000UL});
		public static readonly BitSet _DEDENT_in_stmt_block1121 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1141 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1146 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1151 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1156 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1161 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr1172 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr1177 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr1182 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr1187 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr1192 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _113_in_stmt_typedef1203 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1205 = new BitSet(new ulong[]{0x0UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_typedef1207 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1209 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1228 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_stmt_using_item1232 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _114_in_stmt_using1240 = new BitSet(new ulong[]{0x80000002UL,0x200000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1242 = new BitSet(new ulong[]{0x80000002UL,0x200000000000UL});
		public static readonly BitSet _111_in_stmt_return1263 = new BitSet(new ulong[]{0xA100108080000002UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_return1265 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _106_in_stmt_if1286 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_stmt_if1288 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_if1290 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_stmt_if1292 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1294 = new BitSet(new ulong[]{0x2UL,0x8000000000UL});
		public static readonly BitSet _103_in_stmt_if1297 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1299 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _115_in_stmt_while1325 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_stmt_while1327 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_while1329 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_stmt_while1331 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1333 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_stmt_for1359 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_stmt_for1361 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_for1363 = new BitSet(new ulong[]{0x0UL,0x100000080000UL});
		public static readonly BitSet _83_in_stmt_for1366 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_for1368 = new BitSet(new ulong[]{0x0UL,0x80000UL});
		public static readonly BitSet _83_in_stmt_for1370 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_for1372 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _108_in_stmt_for1378 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_for1380 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_stmt_for1385 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_stmt_try1432 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1434 = new BitSet(new ulong[]{0x0UL,0x2000000000UL});
		public static readonly BitSet _101_in_stmt_try1436 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_stmt_try1438 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_try1440 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_stmt_try1442 = new BitSet(new ulong[]{0x100000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1467 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_ident_list1470 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_ident_list1472 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1494 = new BitSet(new ulong[]{0x0UL,0x10000UL});
		public static readonly BitSet _80_in_stmt_alloc1496 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1498 = new BitSet(new ulong[]{0x2UL,0x1000000UL});
		public static readonly BitSet _88_in_stmt_alloc1501 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_stmt_alloc1503 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_alloc1523 = new BitSet(new ulong[]{0x0UL,0x40000UL});
		public static readonly BitSet _82_in_stmt_alloc1525 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _modify_expr_in_stmt_alloc1528 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1539 = new BitSet(new ulong[]{0x4800000000000002UL,0x20000841408224UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1542 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _cond_expr_in_stmt_modify1545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1558 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_lambda_expr1569 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_lambda_expr1571 = new BitSet(new ulong[]{0x80000000UL,0x1UL});
		public static readonly BitSet _func_args_in_lambda_expr1573 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_lambda_expr1576 = new BitSet(new ulong[]{0x0UL,0x4000000UL});
		public static readonly BitSet _90_in_lambda_expr1578 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _lambda_expr_in_lambda_expr1580 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr1654 = new BitSet(new ulong[]{0x4800000000000002UL,0x20000841448224UL});
		public static readonly BitSet _set_in_modify_expr1657 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _modify_expr_in_modify_expr1706 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1717 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1729 = new BitSet(new ulong[]{0x2UL,0x40000000000UL});
		public static readonly BitSet _106_in_cond_expr1738 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1742 = new BitSet(new ulong[]{0x0UL,0x8000000000UL});
		public static readonly BitSet _103_in_cond_expr1744 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1779 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _118_in_or_expr1788 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _and_expr_in_or_expr1792 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _bit_or_in_and_expr1822 = new BitSet(new ulong[]{0x1000000000000002UL});
		public static readonly BitSet _60_in_and_expr1831 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _bit_or_in_and_expr1835 = new BitSet(new ulong[]{0x1000000000000002UL});
		public static readonly BitSet _bit_xor_in_bit_or1865 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _116_in_bit_or1874 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _bit_xor_in_bit_or1878 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor1908 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_bit_xor1917 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _bit_and_in_bit_xor1921 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1951 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _61_in_bit_and1960 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1964 = new BitSet(new ulong[]{0x2000000000000002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2005 = new BitSet(new ulong[]{0x200000000000002UL,0x2000000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr2014 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr2018 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr2068 = new BitSet(new ulong[]{0x2UL,0x18900000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr2077 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _shift_expr_in_cmp_expr2081 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr2122 = new BitSet(new ulong[]{0x2UL,0x20200000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr2131 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _add_expr_in_shift_expr2135 = new BitSet(new ulong[]{0x2UL,0x20200000UL});
		public static readonly BitSet _infix_expr_in_add_expr2165 = new BitSet(new ulong[]{0x2UL,0x88UL});
		public static readonly BitSet _67_in_add_expr2175 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _infix_expr_in_add_expr2179 = new BitSet(new ulong[]{0x2UL,0x88UL});
		public static readonly BitSet _71_in_add_expr2206 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _infix_expr_in_add_expr2210 = new BitSet(new ulong[]{0x2UL,0x88UL});
		public static readonly BitSet _mul_expr_in_infix_expr2250 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr2260 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _mul_expr_in_infix_expr2264 = new BitSet(new ulong[]{0x2UL,0x1000000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr2296 = new BitSet(new ulong[]{0x400000000000002UL,0x4002UL});
		public static readonly BitSet _65_in_mul_expr2306 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _selector_expr_in_mul_expr2310 = new BitSet(new ulong[]{0x400000000000002UL,0x4002UL});
		public static readonly BitSet _78_in_mul_expr2340 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _selector_expr_in_mul_expr2344 = new BitSet(new ulong[]{0x400000000000002UL,0x4002UL});
		public static readonly BitSet _58_in_mul_expr2374 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _selector_expr_in_mul_expr2378 = new BitSet(new ulong[]{0x400000000000002UL,0x4002UL});
		public static readonly BitSet _prefix_expr_in_selector_expr2421 = new BitSet(new ulong[]{0x2UL,0x2800UL});
		public static readonly BitSet _75_in_selector_expr2431 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr2435 = new BitSet(new ulong[]{0x2UL,0x2800UL});
		public static readonly BitSet _77_in_selector_expr2463 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_selector_expr2468 = new BitSet(new ulong[]{0x2UL,0x2800UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2543 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040000000019AUL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2545 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_prefix_expr2561 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _type_name_in_prefix_expr2563 = new BitSet(new ulong[]{0x8000000000000000UL,0x80000000UL});
		public static readonly BitSet _63_in_prefix_expr2567 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019BUL});
		public static readonly BitSet _expr_list_in_prefix_expr2569 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_prefix_expr2572 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _95_in_prefix_expr2594 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_list_in_prefix_expr2596 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_prefix_expr2598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2614 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2626 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _70_in_expr_list2629 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_expr_list2632 = new BitSet(new ulong[]{0x2UL,0x40UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2648 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _68_in_suffix_expr2658 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _72_in_suffix_expr2684 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _76_in_suffix_expr2707 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr2709 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _74_in_suffix_expr2734 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr2736 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr2761 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_suffix_expr2764 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019BUL});
		public static readonly BitSet _expr_list_in_suffix_expr2766 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_suffix_expr2769 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _95_in_suffix_expr2796 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040030000019AUL});
		public static readonly BitSet _expr_list_in_suffix_expr2798 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_suffix_expr2801 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _80_in_suffix_expr2825 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_suffix_expr2827 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_suffix_expr2829 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019BUL});
		public static readonly BitSet _expr_list_in_suffix_expr2831 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_suffix_expr2834 = new BitSet(new ulong[]{0x8000000000000002UL,0x80111510UL});
		public static readonly BitSet _NUMBER_in_atom_expr2878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr2883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr2888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _63_in_atom_expr2893 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_atom_expr2895 = new BitSet(new ulong[]{0x0UL,0x41UL});
		public static readonly BitSet _70_in_atom_expr2898 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019AUL});
		public static readonly BitSet _expr_in_atom_expr2900 = new BitSet(new ulong[]{0x0UL,0x41UL});
		public static readonly BitSet _64_in_atom_expr2907 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue2944 = new BitSet(new ulong[]{0x8000000000000002UL,0x80101510UL});
		public static readonly BitSet _68_in_lvalue2954 = new BitSet(new ulong[]{0x8000000000000002UL,0x80101510UL});
		public static readonly BitSet _72_in_lvalue2982 = new BitSet(new ulong[]{0x8000000000000002UL,0x80101510UL});
		public static readonly BitSet _76_in_lvalue3007 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue3009 = new BitSet(new ulong[]{0x8000000000000002UL,0x80101510UL});
		public static readonly BitSet _74_in_lvalue3036 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_lvalue3038 = new BitSet(new ulong[]{0x8000000000000002UL,0x80101510UL});
		public static readonly BitSet _generic_parameter_in_lvalue3065 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_lvalue3068 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019BUL});
		public static readonly BitSet _expr_list_in_lvalue3070 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_lvalue3073 = new BitSet(new ulong[]{0x8000000000000002UL,0x80101510UL});
		public static readonly BitSet _95_in_lvalue3102 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040030000019AUL});
		public static readonly BitSet _expr_list_in_lvalue3104 = new BitSet(new ulong[]{0x0UL,0x200000000UL});
		public static readonly BitSet _97_in_lvalue3107 = new BitSet(new ulong[]{0x8000000000000002UL,0x80101510UL});
		public static readonly BitSet _63_in_lvalue_atom3146 = new BitSet(new ulong[]{0x8000000080000000UL,0x1UL});
		public static readonly BitSet _lvalue_in_lvalue_atom3149 = new BitSet(new ulong[]{0x0UL,0x41UL});
		public static readonly BitSet _70_in_lvalue_atom3152 = new BitSet(new ulong[]{0x8000000080000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom3154 = new BitSet(new ulong[]{0x0UL,0x41UL});
		public static readonly BitSet _64_in_lvalue_atom3160 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_lvalue_atom3174 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident3185 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _81_in_ident3188 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _IDENT_in_ident3190 = new BitSet(new ulong[]{0x2UL,0x20000UL});
		public static readonly BitSet _100_in_infix_func3203 = new BitSet(new ulong[]{0x80000000UL});
		public static readonly BitSet _ident_in_infix_func3206 = new BitSet(new ulong[]{0x0UL,0x1000000000UL});
		public static readonly BitSet _100_in_infix_func3208 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_parameter_in_synpred135_SugarCpp2761 = new BitSet(new ulong[]{0x8000000000000000UL});
		public static readonly BitSet _63_in_synpred135_SugarCpp2764 = new BitSet(new ulong[]{0xA100108080000000UL,0x8040010000019BUL});
		public static readonly BitSet _expr_list_in_synpred135_SugarCpp2766 = new BitSet(new ulong[]{0x0UL,0x1UL});
		public static readonly BitSet _64_in_synpred135_SugarCpp2769 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
