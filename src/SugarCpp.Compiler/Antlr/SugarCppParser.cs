//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-10 19:47:10

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "Comment", "DEDENT", "DOT_DOT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc_Bracket", "Expr_Alloc_Equal", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cast", "Expr_Cond", "Expr_Cond_Not_Null", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Not_Null", "Expr_Prefix", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "Generic_Patameters", "Global_Block", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "LineComment", "Linq_From", "Linq_Let", "Linq_Prefix", "Linq_Where", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_Defer", "Stmt_Finally", "Stmt_ForEach", "Stmt_For_Down_To", "Stmt_For_To", "Stmt_If", "Stmt_Linq", "Stmt_Loop", "Stmt_Return", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "'<'", "'<-'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'?'", "'?='", "'@'", "'['", "']'", "'^'", "'^='", "'`'", "'and'", "'as'", "'by'", "'catch'", "'class'", "'const'", "'defer'", "'do'", "'downto'", "'else'", "'enum'", "'finally'", "'for'", "'from'", "'if'", "'import'", "'in'", "'is'", "'isnt'", "'let'", "'loop'", "'namespace'", "'new'", "'or'", "'return'", "'then'", "'to'", "'try'", "'typedef'", "'unsigned'", "'using'", "'where'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int T__115=115;
	public const int T__116=116;
	public const int T__117=117;
	public const int T__118=118;
	public const int T__119=119;
	public const int T__120=120;
	public const int T__121=121;
	public const int T__122=122;
	public const int T__123=123;
	public const int T__124=124;
	public const int T__125=125;
	public const int T__126=126;
	public const int T__127=127;
	public const int T__128=128;
	public const int T__129=129;
	public const int T__130=130;
	public const int T__131=131;
	public const int T__132=132;
	public const int T__133=133;
	public const int T__134=134;
	public const int T__135=135;
	public const int T__136=136;
	public const int T__137=137;
	public const int T__138=138;
	public const int T__139=139;
	public const int T__140=140;
	public const int T__141=141;
	public const int T__142=142;
	public const int T__143=143;
	public const int T__144=144;
	public const int T__145=145;
	public const int T__146=146;
	public const int T__147=147;
	public const int T__148=148;
	public const int T__149=149;
	public const int T__150=150;
	public const int T__151=151;
	public const int T__152=152;
	public const int T__153=153;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int Comment=7;
	public const int DEDENT=8;
	public const int DOT_DOT=9;
	public const int EXPONENT=10;
	public const int Enum=11;
	public const int Expr_Access=12;
	public const int Expr_Alloc_Bracket=13;
	public const int Expr_Alloc_Equal=14;
	public const int Expr_Bin=15;
	public const int Expr_Bracket=16;
	public const int Expr_Call=17;
	public const int Expr_Call_With=18;
	public const int Expr_Cast=19;
	public const int Expr_Cond=20;
	public const int Expr_Cond_Not_Null=21;
	public const int Expr_Dict=22;
	public const int Expr_Infix=23;
	public const int Expr_Lambda=24;
	public const int Expr_New_Array=25;
	public const int Expr_New_Type=26;
	public const int Expr_Not_Null=27;
	public const int Expr_Prefix=28;
	public const int Expr_Suffix=29;
	public const int Expr_Tuple=30;
	public const int Func_Args=31;
	public const int Func_Def=32;
	public const int Generic_Patameters=33;
	public const int Global_Block=34;
	public const int IDENT=35;
	public const int INDENT=36;
	public const int Ident_List=37;
	public const int Import=38;
	public const int Left_Bracket=39;
	public const int LineComment=40;
	public const int Linq_From=41;
	public const int Linq_Let=42;
	public const int Linq_Prefix=43;
	public const int Linq_Where=44;
	public const int Match_Tuple=45;
	public const int NEWLINE=46;
	public const int NUMBER=47;
	public const int Namespace=48;
	public const int Right_Bracket=49;
	public const int Root=50;
	public const int SP=51;
	public const int STRING=52;
	public const int Stmt_Block=53;
	public const int Stmt_Defer=54;
	public const int Stmt_Finally=55;
	public const int Stmt_ForEach=56;
	public const int Stmt_For_Down_To=57;
	public const int Stmt_For_To=58;
	public const int Stmt_If=59;
	public const int Stmt_Linq=60;
	public const int Stmt_Loop=61;
	public const int Stmt_Return=62;
	public const int Stmt_Try=63;
	public const int Stmt_Typedef=64;
	public const int Stmt_Using=65;
	public const int Stmt_While=66;
	public const int Type_IDENT=67;
	public const int Type_Ref=68;
	public const int Type_Tuple=69;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:171:8: public root : ( NEWLINE )* global_block EOF -> ^( Root global_block ) ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE1 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> global_block2 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE1_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_EOF=new RewriteRuleITokenStream(adaptor,"token EOF");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(171, 1);
		try
		{
			// SugarCpp.g:172:2: ( ( NEWLINE )* global_block EOF -> ^( Root global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:172:4: ( NEWLINE )* global_block EOF
			{
			DebugLocation(172, 4);
			// SugarCpp.g:172:4: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:172:4: NEWLINE
					{
					DebugLocation(172, 4);
					NEWLINE1=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root484);  
					stream_NEWLINE.Add(NEWLINE1);


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(172, 13);
			PushFollow(Follow._global_block_in_root487);
			global_block2=global_block();
			PopFollow();

			stream_global_block.Add(global_block2.Tree);
			DebugLocation(172, 26);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root489);  
			stream_EOF.Add(EOF3);



			{
			// AST REWRITE
			// elements: global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 172:30: -> ^( Root global_block )
			{
				DebugLocation(172, 33);
				// SugarCpp.g:172:33: ^( Root global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(172, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Root, "Root"), root_1);

				DebugLocation(172, 40);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
		}
		DebugLocation(173, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_global_block();
	partial void LeaveRule_global_block();

	// $ANTLR start "global_block"
	// SugarCpp.g:175:1: global_block : ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) ;
	[GrammarRule("global_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_block()
	{
		EnterRule_global_block();
		EnterRule("global_block", 2);
		TraceIn("global_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE5 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node4 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE5_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_node=new RewriteRuleSubtreeStream(adaptor,"rule node");
		try { DebugEnterRule(GrammarFileName, "global_block");
		DebugLocation(175, 1);
		try
		{
			// SugarCpp.g:176:2: ( ( node ( NEWLINE )+ )* -> ^( Global_Block ( node )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:176:4: ( node ( NEWLINE )+ )*
			{
			DebugLocation(176, 4);
			// SugarCpp.g:176:4: ( node ( NEWLINE )+ )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if ((LA3_0==IDENT||LA3_0==112||(LA3_0>=121 && LA3_0<=122)||LA3_0==127||LA3_0==132||LA3_0==138||(LA3_0>=145 && LA3_0<=147)||LA3_0==153))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:176:5: node ( NEWLINE )+
					{
					DebugLocation(176, 5);
					PushFollow(Follow._node_in_global_block509);
					node4=node();
					PopFollow();

					stream_node.Add(node4.Tree);
					DebugLocation(176, 10);
					// SugarCpp.g:176:10: ( NEWLINE )+
					int cnt2=0;
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch (alt2)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:176:10: NEWLINE
							{
							DebugLocation(176, 10);
							NEWLINE5=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_global_block511);  
							stream_NEWLINE.Add(NEWLINE5);


							}
							break;

						default:
							if (cnt2 >= 1)
								goto loop2;

							EarlyExitException eee2 = new EarlyExitException( 2, input );
							DebugRecognitionException(eee2);
							throw eee2;
						}
						cnt2++;
					}
					loop2:
						;

					} finally { DebugExitSubRule(2); }


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }



			{
			// AST REWRITE
			// elements: node
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 176:21: -> ^( Global_Block ( node )* )
			{
				DebugLocation(176, 24);
				// SugarCpp.g:176:24: ^( Global_Block ( node )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(176, 26);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Global_Block, "Global_Block"), root_1);

				DebugLocation(176, 39);
				// SugarCpp.g:176:39: ( node )*
				while ( stream_node.HasNext )
				{
					DebugLocation(176, 39);
					adaptor.AddChild(root_1, stream_node.NextTree());

				}
				stream_node.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_block", 2);
			LeaveRule("global_block", 2);
			LeaveRule_global_block();
		}
		DebugLocation(177, 1);
		} finally { DebugExitRule(GrammarFileName, "global_block"); }
		return retval;

	}
	// $ANTLR end "global_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:179:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_alloc9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_using10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_typedef11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(179, 1);
		try
		{
			// SugarCpp.g:180:2: ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:180:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(180, 4);
				PushFollow(Follow._func_def_in_node534);
				func_def6=func_def();
				PopFollow();

				adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:181:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(181, 4);
				PushFollow(Follow._class_def_in_node539);
				class_def7=class_def();
				PopFollow();

				adaptor.AddChild(root_0, class_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:182:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(182, 4);
				PushFollow(Follow._enum_def_in_node544);
				enum_def8=enum_def();
				PopFollow();

				adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:183:4: global_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(183, 4);
				PushFollow(Follow._global_alloc_in_node549);
				global_alloc9=global_alloc();
				PopFollow();

				adaptor.AddChild(root_0, global_alloc9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:184:4: global_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(184, 4);
				PushFollow(Follow._global_using_in_node554);
				global_using10=global_using();
				PopFollow();

				adaptor.AddChild(root_0, global_using10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:185:4: global_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(185, 4);
				PushFollow(Follow._global_typedef_in_node559);
				global_typedef11=global_typedef();
				PopFollow();

				adaptor.AddChild(root_0, global_typedef11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:186:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(186, 4);
				PushFollow(Follow._import_def_in_node564);
				import_def12=import_def();
				PopFollow();

				adaptor.AddChild(root_0, import_def12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:187:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(187, 4);
				PushFollow(Follow._namespace_def_in_node569);
				namespace_def13=namespace_def();
				PopFollow();

				adaptor.AddChild(root_0, namespace_def13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
		}
		DebugLocation(188, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_attribute_args();
	partial void LeaveRule_attribute_args();

	// $ANTLR start "attribute_args"
	// SugarCpp.g:190:1: attribute_args : ( NUMBER | STRING | ident );
	[GrammarRule("attribute_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_args()
	{
		EnterRule_attribute_args();
		EnterRule("attribute_args", 4);
		TraceIn("attribute_args", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER14 = default(IToken);
		IToken STRING15 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident16 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "attribute_args");
		DebugLocation(190, 1);
		try
		{
			// SugarCpp.g:191:2: ( NUMBER | STRING | ident )
			int alt5=3;
			try { DebugEnterDecision(5, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt5 = 1;
				}
				break;
			case STRING:
				{
				alt5 = 2;
				}
				break;
			case IDENT:
				{
				alt5 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:191:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(191, 4);
				NUMBER14=(IToken)Match(input,NUMBER,Follow._NUMBER_in_attribute_args581); 
				NUMBER14_tree = (CommonTree)adaptor.Create(NUMBER14);
				adaptor.AddChild(root_0, NUMBER14_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:192:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(192, 4);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_attribute_args586); 
				STRING15_tree = (CommonTree)adaptor.Create(STRING15);
				adaptor.AddChild(root_0, STRING15_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:193:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 4);
				PushFollow(Follow._ident_in_attribute_args591);
				ident16=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident16.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_args", 4);
			LeaveRule("attribute_args", 4);
			LeaveRule_attribute_args();
		}
		DebugLocation(194, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_args"); }
		return retval;

	}
	// $ANTLR end "attribute_args"

	partial void EnterRule_attribute_item();
	partial void LeaveRule_attribute_item();

	// $ANTLR start "attribute_item"
	// SugarCpp.g:196:1: attribute_item : ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) );
	[GrammarRule("attribute_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute_item()
	{
		EnterRule_attribute_item();
		EnterRule("attribute_item", 5);
		TraceIn("attribute_item", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal18 = default(IToken);
		IToken char_literal20 = default(IToken);
		IToken char_literal22 = default(IToken);
		IToken string_literal23 = default(IToken);
		IToken char_literal24 = default(IToken);
		IToken char_literal26 = default(IToken);
		IToken char_literal28 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident17 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args19 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args21 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args25 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_args27 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal18_tree = default(CommonTree);
		CommonTree char_literal20_tree = default(CommonTree);
		CommonTree char_literal22_tree = default(CommonTree);
		CommonTree string_literal23_tree = default(CommonTree);
		CommonTree char_literal24_tree = default(CommonTree);
		CommonTree char_literal26_tree = default(CommonTree);
		CommonTree char_literal28_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute_args=new RewriteRuleSubtreeStream(adaptor,"rule attribute_args");
		try { DebugEnterRule(GrammarFileName, "attribute_item");
		DebugLocation(196, 1);
		try
		{
			// SugarCpp.g:197:2: ( ident ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute ident ( attribute_args )* ) | 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )? -> ^( Attribute 'const' ( attribute_args )* ) )
			int alt10=2;
			try { DebugEnterDecision(10, false);
			int LA10_0 = input.LA(1);

			if ((LA10_0==IDENT))
			{
				alt10 = 1;
			}
			else if ((LA10_0==122))
			{
				alt10 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 10, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(10); }
			switch (alt10)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:197:4: ident ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(197, 4);
				PushFollow(Follow._ident_in_attribute_item602);
				ident17=ident();
				PopFollow();

				stream_ident.Add(ident17.Tree);
				DebugLocation(197, 10);
				// SugarCpp.g:197:10: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt7=2;
				try { DebugEnterSubRule(7);
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0==77))
				{
					alt7 = 1;
				}
				} finally { DebugExitDecision(7); }
				switch (alt7)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:197:11: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(197, 11);
					char_literal18=(IToken)Match(input,77,Follow._77_in_attribute_item605);  
					stream_77.Add(char_literal18);

					DebugLocation(197, 15);
					PushFollow(Follow._attribute_args_in_attribute_item607);
					attribute_args19=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args19.Tree);
					DebugLocation(197, 30);
					// SugarCpp.g:197:30: ( ',' attribute_args )*
					try { DebugEnterSubRule(6);
					while (true)
					{
						int alt6=2;
						try { DebugEnterDecision(6, false);
						int LA6_0 = input.LA(1);

						if ((LA6_0==84))
						{
							alt6 = 1;
						}


						} finally { DebugExitDecision(6); }
						switch ( alt6 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:197:31: ',' attribute_args
							{
							DebugLocation(197, 31);
							char_literal20=(IToken)Match(input,84,Follow._84_in_attribute_item610);  
							stream_84.Add(char_literal20);

							DebugLocation(197, 35);
							PushFollow(Follow._attribute_args_in_attribute_item612);
							attribute_args21=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args21.Tree);

							}
							break;

						default:
							goto loop6;
						}
					}

					loop6:
						;

					} finally { DebugExitSubRule(6); }

					DebugLocation(197, 52);
					char_literal22=(IToken)Match(input,78,Follow._78_in_attribute_item616);  
					stream_78.Add(char_literal22);


					}
					break;

				}
				} finally { DebugExitSubRule(7); }



				{
				// AST REWRITE
				// elements: attribute_args, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 197:58: -> ^( Attribute ident ( attribute_args )* )
				{
					DebugLocation(197, 61);
					// SugarCpp.g:197:61: ^( Attribute ident ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(197, 63);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(197, 73);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(197, 79);
					// SugarCpp.g:197:79: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(197, 79);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:198:4: 'const' ( '(' attribute_args ( ',' attribute_args )* ')' )?
				{
				DebugLocation(198, 4);
				string_literal23=(IToken)Match(input,122,Follow._122_in_attribute_item634);  
				stream_122.Add(string_literal23);

				DebugLocation(198, 12);
				// SugarCpp.g:198:12: ( '(' attribute_args ( ',' attribute_args )* ')' )?
				int alt9=2;
				try { DebugEnterSubRule(9);
				try { DebugEnterDecision(9, false);
				int LA9_0 = input.LA(1);

				if ((LA9_0==77))
				{
					alt9 = 1;
				}
				} finally { DebugExitDecision(9); }
				switch (alt9)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:198:13: '(' attribute_args ( ',' attribute_args )* ')'
					{
					DebugLocation(198, 13);
					char_literal24=(IToken)Match(input,77,Follow._77_in_attribute_item637);  
					stream_77.Add(char_literal24);

					DebugLocation(198, 17);
					PushFollow(Follow._attribute_args_in_attribute_item639);
					attribute_args25=attribute_args();
					PopFollow();

					stream_attribute_args.Add(attribute_args25.Tree);
					DebugLocation(198, 32);
					// SugarCpp.g:198:32: ( ',' attribute_args )*
					try { DebugEnterSubRule(8);
					while (true)
					{
						int alt8=2;
						try { DebugEnterDecision(8, false);
						int LA8_0 = input.LA(1);

						if ((LA8_0==84))
						{
							alt8 = 1;
						}


						} finally { DebugExitDecision(8); }
						switch ( alt8 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:198:33: ',' attribute_args
							{
							DebugLocation(198, 33);
							char_literal26=(IToken)Match(input,84,Follow._84_in_attribute_item642);  
							stream_84.Add(char_literal26);

							DebugLocation(198, 37);
							PushFollow(Follow._attribute_args_in_attribute_item644);
							attribute_args27=attribute_args();
							PopFollow();

							stream_attribute_args.Add(attribute_args27.Tree);

							}
							break;

						default:
							goto loop8;
						}
					}

					loop8:
						;

					} finally { DebugExitSubRule(8); }

					DebugLocation(198, 54);
					char_literal28=(IToken)Match(input,78,Follow._78_in_attribute_item648);  
					stream_78.Add(char_literal28);


					}
					break;

				}
				} finally { DebugExitSubRule(9); }



				{
				// AST REWRITE
				// elements: 122, attribute_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 198:60: -> ^( Attribute 'const' ( attribute_args )* )
				{
					DebugLocation(198, 63);
					// SugarCpp.g:198:63: ^( Attribute 'const' ( attribute_args )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(198, 65);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

					DebugLocation(198, 75);
					adaptor.AddChild(root_1, stream_122.NextNode());
					DebugLocation(198, 83);
					// SugarCpp.g:198:83: ( attribute_args )*
					while ( stream_attribute_args.HasNext )
					{
						DebugLocation(198, 83);
						adaptor.AddChild(root_1, stream_attribute_args.NextTree());

					}
					stream_attribute_args.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute_item", 5);
			LeaveRule("attribute_item", 5);
			LeaveRule_attribute_item();
		}
		DebugLocation(199, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute_item"); }
		return retval;

	}
	// $ANTLR end "attribute_item"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:201:1: attribute : ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 6);
		TraceIn("attribute", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal29 = default(IToken);
		IToken char_literal31 = default(IToken);
		IToken char_literal33 = default(IToken);
		IToken NEWLINE34 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item30 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> attribute_item32 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal29_tree = default(CommonTree);
		CommonTree char_literal31_tree = default(CommonTree);
		CommonTree char_literal33_tree = default(CommonTree);
		CommonTree NEWLINE34_tree = default(CommonTree);
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_attribute_item=new RewriteRuleSubtreeStream(adaptor,"rule attribute_item");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(201, 1);
		try
		{
			// SugarCpp.g:202:2: ( ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+ -> ( attribute_item )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:202:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			{
			DebugLocation(202, 4);
			// SugarCpp.g:202:4: ( '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+ )+
			int cnt13=0;
			try { DebugEnterSubRule(13);
			while (true)
			{
				int alt13=2;
				try { DebugEnterDecision(13, false);
				int LA13_0 = input.LA(1);

				if ((LA13_0==112))
				{
					alt13 = 1;
				}


				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:202:5: '[' attribute_item ( ',' attribute_item )* ']' ( NEWLINE )+
					{
					DebugLocation(202, 5);
					char_literal29=(IToken)Match(input,112,Follow._112_in_attribute673);  
					stream_112.Add(char_literal29);

					DebugLocation(202, 9);
					PushFollow(Follow._attribute_item_in_attribute675);
					attribute_item30=attribute_item();
					PopFollow();

					stream_attribute_item.Add(attribute_item30.Tree);
					DebugLocation(202, 24);
					// SugarCpp.g:202:24: ( ',' attribute_item )*
					try { DebugEnterSubRule(11);
					while (true)
					{
						int alt11=2;
						try { DebugEnterDecision(11, false);
						int LA11_0 = input.LA(1);

						if ((LA11_0==84))
						{
							alt11 = 1;
						}


						} finally { DebugExitDecision(11); }
						switch ( alt11 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:202:25: ',' attribute_item
							{
							DebugLocation(202, 25);
							char_literal31=(IToken)Match(input,84,Follow._84_in_attribute678);  
							stream_84.Add(char_literal31);

							DebugLocation(202, 29);
							PushFollow(Follow._attribute_item_in_attribute680);
							attribute_item32=attribute_item();
							PopFollow();

							stream_attribute_item.Add(attribute_item32.Tree);

							}
							break;

						default:
							goto loop11;
						}
					}

					loop11:
						;

					} finally { DebugExitSubRule(11); }

					DebugLocation(202, 46);
					char_literal33=(IToken)Match(input,113,Follow._113_in_attribute684);  
					stream_113.Add(char_literal33);

					DebugLocation(202, 50);
					// SugarCpp.g:202:50: ( NEWLINE )+
					int cnt12=0;
					try { DebugEnterSubRule(12);
					while (true)
					{
						int alt12=2;
						try { DebugEnterDecision(12, false);
						int LA12_0 = input.LA(1);

						if ((LA12_0==NEWLINE))
						{
							alt12 = 1;
						}


						} finally { DebugExitDecision(12); }
						switch (alt12)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:202:50: NEWLINE
							{
							DebugLocation(202, 50);
							NEWLINE34=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_attribute686);  
							stream_NEWLINE.Add(NEWLINE34);


							}
							break;

						default:
							if (cnt12 >= 1)
								goto loop12;

							EarlyExitException eee12 = new EarlyExitException( 12, input );
							DebugRecognitionException(eee12);
							throw eee12;
						}
						cnt12++;
					}
					loop12:
						;

					} finally { DebugExitSubRule(12); }


					}
					break;

				default:
					if (cnt13 >= 1)
						goto loop13;

					EarlyExitException eee13 = new EarlyExitException( 13, input );
					DebugRecognitionException(eee13);
					throw eee13;
				}
				cnt13++;
			}
			loop13:
				;

			} finally { DebugExitSubRule(13); }



			{
			// AST REWRITE
			// elements: attribute_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 202:61: -> ( attribute_item )+
			{
				DebugLocation(202, 64);
				if (!(stream_attribute_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_attribute_item.HasNext )
				{
					DebugLocation(202, 64);
					adaptor.AddChild(root_0, stream_attribute_item.NextTree());

				}
				stream_attribute_item.Reset();

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 6);
			LeaveRule("attribute", 6);
			LeaveRule_attribute();
		}
		DebugLocation(203, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_global_alloc();
	partial void LeaveRule_global_alloc();

	// $ANTLR start "global_alloc"
	// SugarCpp.g:205:1: global_alloc : ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) ;
	[GrammarRule("global_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_alloc()
	{
		EnterRule_global_alloc();
		EnterRule("global_alloc", 7);
		TraceIn("global_alloc", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal37 = default(IToken);
		IToken char_literal39 = default(IToken);
		IToken string_literal40 = default(IToken);
		IToken char_literal42 = default(IToken);
		IToken char_literal44 = default(IToken);
		IToken string_literal45 = default(IToken);
		IToken char_literal47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute35 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list36 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name38 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr41 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list43 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal37_tree = default(CommonTree);
		CommonTree char_literal39_tree = default(CommonTree);
		CommonTree string_literal40_tree = default(CommonTree);
		CommonTree char_literal42_tree = default(CommonTree);
		CommonTree char_literal44_tree = default(CommonTree);
		CommonTree string_literal45_tree = default(CommonTree);
		CommonTree char_literal47_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "global_alloc");
		DebugLocation(205, 1);
		try
		{
			// SugarCpp.g:206:2: ( ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:206:4: ( attribute )? ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			{
			DebugLocation(206, 4);
			// SugarCpp.g:206:4: ( attribute )?
			int alt14=2;
			try { DebugEnterSubRule(14);
			try { DebugEnterDecision(14, false);
			int LA14_0 = input.LA(1);

			if ((LA14_0==112))
			{
				alt14 = 1;
			}
			} finally { DebugExitDecision(14); }
			switch (alt14)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:4: attribute
				{
				DebugLocation(206, 4);
				PushFollow(Follow._attribute_in_global_alloc705);
				attribute35=attribute();
				PopFollow();

				stream_attribute.Add(attribute35.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(14); }

			DebugLocation(206, 15);
			PushFollow(Follow._ident_list_in_global_alloc708);
			ident_list36=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list36.Tree);
			DebugLocation(206, 26);
			// SugarCpp.g:206:26: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) ) | ':=' ( modify_expr ( ',' modify_expr )* ) -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ ) )
			int alt19=2;
			try { DebugEnterSubRule(19);
			try { DebugEnterDecision(19, false);
			int LA19_0 = input.LA(1);

			if ((LA19_0==94))
			{
				alt19 = 1;
			}
			else if ((LA19_0==96))
			{
				alt19 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 19, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(19); }
			switch (alt19)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:206:28: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				{
				DebugLocation(206, 28);
				char_literal37=(IToken)Match(input,94,Follow._94_in_global_alloc712);  
				stream_94.Add(char_literal37);

				DebugLocation(206, 32);
				PushFollow(Follow._type_name_in_global_alloc714);
				type_name38=type_name();
				PopFollow();

				stream_type_name.Add(type_name38.Tree);
				DebugLocation(206, 42);
				// SugarCpp.g:206:42: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ) )
				int alt17=3;
				try { DebugEnterSubRule(17);
				try { DebugEnterDecision(17, false);
				switch (input.LA(1))
				{
				case 96:
				case 102:
					{
					alt17 = 1;
					}
					break;
				case 77:
					{
					alt17 = 2;
					}
					break;
				case NEWLINE:
					{
					alt17 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 17, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(17); }
				switch (alt17)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:206:44: ( '=' | ':=' ) expr
					{
					DebugLocation(206, 44);
					// SugarCpp.g:206:44: ( '=' | ':=' )
					int alt15=2;
					try { DebugEnterSubRule(15);
					try { DebugEnterDecision(15, false);
					int LA15_0 = input.LA(1);

					if ((LA15_0==102))
					{
						alt15 = 1;
					}
					else if ((LA15_0==96))
					{
						alt15 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 15, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(15); }
					switch (alt15)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:206:45: '='
						{
						DebugLocation(206, 45);
						char_literal39=(IToken)Match(input,102,Follow._102_in_global_alloc719);  
						stream_102.Add(char_literal39);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:206:51: ':='
						{
						DebugLocation(206, 51);
						string_literal40=(IToken)Match(input,96,Follow._96_in_global_alloc723);  
						stream_96.Add(string_literal40);


						}
						break;

					}
					} finally { DebugExitSubRule(15); }

					DebugLocation(206, 57);
					PushFollow(Follow._expr_in_global_alloc726);
					expr41=expr();
					PopFollow();

					stream_expr.Add(expr41.Tree);


					{
					// AST REWRITE
					// elements: ident_list, attribute, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 206:62: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
					{
						DebugLocation(206, 65);
						// SugarCpp.g:206:65: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(206, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(206, 84);
						// SugarCpp.g:206:84: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(206, 84);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(206, 95);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(206, 105);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(206, 116);
						// SugarCpp.g:206:116: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(206, 116);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:207:43: '(' ( expr_list )? ')'
					{
					DebugLocation(207, 43);
					char_literal42=(IToken)Match(input,77,Follow._77_in_global_alloc786);  
					stream_77.Add(char_literal42);

					DebugLocation(207, 47);
					// SugarCpp.g:207:47: ( expr_list )?
					int alt16=2;
					try { DebugEnterSubRule(16);
					try { DebugEnterDecision(16, false);
					int LA16_0 = input.LA(1);

					if ((LA16_0==IDENT||LA16_0==NUMBER||LA16_0==STRING||LA16_0==70||LA16_0==75||LA16_0==77||LA16_0==79||(LA16_0>=81 && LA16_0<=82)||(LA16_0>=85 && LA16_0<=86)||LA16_0==111||LA16_0==139||LA16_0==153))
					{
						alt16 = 1;
					}
					} finally { DebugExitDecision(16); }
					switch (alt16)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:207:47: expr_list
						{
						DebugLocation(207, 47);
						PushFollow(Follow._expr_list_in_global_alloc788);
						expr_list43=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list43.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(16); }

					DebugLocation(207, 58);
					char_literal44=(IToken)Match(input,78,Follow._78_in_global_alloc791);  
					stream_78.Add(char_literal44);



					{
					// AST REWRITE
					// elements: ident_list, type_name, expr_list, attribute
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 207:62: -> ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
					{
						DebugLocation(207, 65);
						// SugarCpp.g:207:65: ^( Expr_Alloc_Bracket ( attribute )? type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(207, 67);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(207, 86);
						// SugarCpp.g:207:86: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(207, 86);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(207, 97);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(207, 107);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(207, 118);
						// SugarCpp.g:207:118: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(207, 118);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:208:17: 
					{

					{
					// AST REWRITE
					// elements: attribute, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 208:17: -> ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
					{
						DebugLocation(208, 20);
						// SugarCpp.g:208:20: ^( Expr_Alloc_Equal ( attribute )? type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(208, 22);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(208, 39);
						// SugarCpp.g:208:39: ( attribute )?
						if (stream_attribute.HasNext)
						{
							DebugLocation(208, 39);
							adaptor.AddChild(root_1, stream_attribute.NextTree());

						}
						stream_attribute.Reset();
						DebugLocation(208, 50);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(208, 60);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(17); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:210:10: ':=' ( modify_expr ( ',' modify_expr )* )
				{
				DebugLocation(210, 10);
				string_literal45=(IToken)Match(input,96,Follow._96_in_global_alloc864);  
				stream_96.Add(string_literal45);

				DebugLocation(210, 15);
				// SugarCpp.g:210:15: ( modify_expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:210:16: modify_expr ( ',' modify_expr )*
				{
				DebugLocation(210, 16);
				PushFollow(Follow._modify_expr_in_global_alloc867);
				modify_expr46=modify_expr();
				PopFollow();

				stream_modify_expr.Add(modify_expr46.Tree);
				DebugLocation(210, 28);
				// SugarCpp.g:210:28: ( ',' modify_expr )*
				try { DebugEnterSubRule(18);
				while (true)
				{
					int alt18=2;
					try { DebugEnterDecision(18, false);
					int LA18_0 = input.LA(1);

					if ((LA18_0==84))
					{
						alt18 = 1;
					}


					} finally { DebugExitDecision(18); }
					switch ( alt18 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:210:29: ',' modify_expr
						{
						DebugLocation(210, 29);
						char_literal47=(IToken)Match(input,84,Follow._84_in_global_alloc870);  
						stream_84.Add(char_literal47);

						DebugLocation(210, 33);
						PushFollow(Follow._modify_expr_in_global_alloc872);
						modify_expr48=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr48.Tree);

						}
						break;

					default:
						goto loop18;
					}
				}

				loop18:
					;

				} finally { DebugExitSubRule(18); }


				}



				{
				// AST REWRITE
				// elements: 96, ident_list, attribute, modify_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 210:48: -> ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
				{
					DebugLocation(210, 51);
					// SugarCpp.g:210:51: ^( ':=' ( attribute )? ident_list ( modify_expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(210, 53);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_96.NextNode(), root_1);

					DebugLocation(210, 58);
					// SugarCpp.g:210:58: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(210, 58);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(210, 69);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(210, 80);
					if (!(stream_modify_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(210, 80);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(19); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_alloc", 7);
			LeaveRule("global_alloc", 7);
			LeaveRule_global_alloc();
		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "global_alloc"); }
		return retval;

	}
	// $ANTLR end "global_alloc"

	partial void EnterRule_global_using();
	partial void LeaveRule_global_using();

	// $ANTLR start "global_using"
	// SugarCpp.g:214:1: global_using : stmt_using ;
	[GrammarRule("global_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_using()
	{
		EnterRule_global_using();
		EnterRule("global_using", 8);
		TraceIn("global_using", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_using49 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_using");
		DebugLocation(214, 1);
		try
		{
			// SugarCpp.g:215:2: ( stmt_using )
			DebugEnterAlt(1);
			// SugarCpp.g:215:4: stmt_using
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(215, 4);
			PushFollow(Follow._stmt_using_in_global_using909);
			stmt_using49=stmt_using();
			PopFollow();

			adaptor.AddChild(root_0, stmt_using49.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_using", 8);
			LeaveRule("global_using", 8);
			LeaveRule_global_using();
		}
		DebugLocation(216, 1);
		} finally { DebugExitRule(GrammarFileName, "global_using"); }
		return retval;

	}
	// $ANTLR end "global_using"

	partial void EnterRule_global_typedef();
	partial void LeaveRule_global_typedef();

	// $ANTLR start "global_typedef"
	// SugarCpp.g:218:1: global_typedef : stmt_typedef ;
	[GrammarRule("global_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> global_typedef()
	{
		EnterRule_global_typedef();
		EnterRule("global_typedef", 9);
		TraceIn("global_typedef", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef50 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "global_typedef");
		DebugLocation(218, 1);
		try
		{
			// SugarCpp.g:219:2: ( stmt_typedef )
			DebugEnterAlt(1);
			// SugarCpp.g:219:4: stmt_typedef
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(219, 4);
			PushFollow(Follow._stmt_typedef_in_global_typedef920);
			stmt_typedef50=stmt_typedef();
			PopFollow();

			adaptor.AddChild(root_0, stmt_typedef50.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("global_typedef", 9);
			LeaveRule("global_typedef", 9);
			LeaveRule_global_typedef();
		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "global_typedef"); }
		return retval;

	}
	// $ANTLR end "global_typedef"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:222:1: import_def : 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 10);
		TraceIn("import_def", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal51 = default(IToken);
		IToken STRING52 = default(IToken);
		IToken NEWLINE53 = default(IToken);
		IToken INDENT54 = default(IToken);
		IToken NEWLINE55 = default(IToken);
		IToken STRING56 = default(IToken);
		IToken NEWLINE57 = default(IToken);
		IToken DEDENT58 = default(IToken);

		CommonTree string_literal51_tree = default(CommonTree);
		CommonTree STRING52_tree = default(CommonTree);
		CommonTree NEWLINE53_tree = default(CommonTree);
		CommonTree INDENT54_tree = default(CommonTree);
		CommonTree NEWLINE55_tree = default(CommonTree);
		CommonTree STRING56_tree = default(CommonTree);
		CommonTree NEWLINE57_tree = default(CommonTree);
		CommonTree DEDENT58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_132=new RewriteRuleITokenStream(adaptor,"token 132");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(222, 1);
		try
		{
			// SugarCpp.g:223:2: ( 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:223:4: 'import' ( STRING )? ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			{
			DebugLocation(223, 4);
			string_literal51=(IToken)Match(input,132,Follow._132_in_import_def931);  
			stream_132.Add(string_literal51);

			DebugLocation(223, 13);
			// SugarCpp.g:223:13: ( STRING )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_0 = input.LA(1);

			if ((LA20_0==STRING))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:13: STRING
				{
				DebugLocation(223, 13);
				STRING52=(IToken)Match(input,STRING,Follow._STRING_in_import_def933);  
				stream_STRING.Add(STRING52);


				}
				break;

			}
			} finally { DebugExitSubRule(20); }

			DebugLocation(223, 21);
			// SugarCpp.g:223:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			try
			{
				alt25 = dfa25.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:22: ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT
				{
				DebugLocation(223, 22);
				// SugarCpp.g:223:22: ( NEWLINE )+
				int cnt21=0;
				try { DebugEnterSubRule(21);
				while (true)
				{
					int alt21=2;
					try { DebugEnterDecision(21, false);
					int LA21_0 = input.LA(1);

					if ((LA21_0==NEWLINE))
					{
						alt21 = 1;
					}


					} finally { DebugExitDecision(21); }
					switch (alt21)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:223:22: NEWLINE
						{
						DebugLocation(223, 22);
						NEWLINE53=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def937);  
						stream_NEWLINE.Add(NEWLINE53);


						}
						break;

					default:
						if (cnt21 >= 1)
							goto loop21;

						EarlyExitException eee21 = new EarlyExitException( 21, input );
						DebugRecognitionException(eee21);
						throw eee21;
					}
					cnt21++;
				}
				loop21:
					;

				} finally { DebugExitSubRule(21); }

				DebugLocation(223, 31);
				INDENT54=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def940);  
				stream_INDENT.Add(INDENT54);

				DebugLocation(223, 38);
				// SugarCpp.g:223:38: ( NEWLINE )*
				try { DebugEnterSubRule(22);
				while (true)
				{
					int alt22=2;
					try { DebugEnterDecision(22, false);
					int LA22_0 = input.LA(1);

					if ((LA22_0==NEWLINE))
					{
						alt22 = 1;
					}


					} finally { DebugExitDecision(22); }
					switch ( alt22 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:223:38: NEWLINE
						{
						DebugLocation(223, 38);
						NEWLINE55=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def942);  
						stream_NEWLINE.Add(NEWLINE55);


						}
						break;

					default:
						goto loop22;
					}
				}

				loop22:
					;

				} finally { DebugExitSubRule(22); }

				DebugLocation(223, 48);
				// SugarCpp.g:223:48: ( STRING ( NEWLINE )+ )*
				try { DebugEnterSubRule(24);
				while (true)
				{
					int alt24=2;
					try { DebugEnterDecision(24, false);
					int LA24_0 = input.LA(1);

					if ((LA24_0==STRING))
					{
						alt24 = 1;
					}


					} finally { DebugExitDecision(24); }
					switch ( alt24 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:223:49: STRING ( NEWLINE )+
						{
						DebugLocation(223, 49);
						STRING56=(IToken)Match(input,STRING,Follow._STRING_in_import_def947);  
						stream_STRING.Add(STRING56);

						DebugLocation(223, 56);
						// SugarCpp.g:223:56: ( NEWLINE )+
						int cnt23=0;
						try { DebugEnterSubRule(23);
						while (true)
						{
							int alt23=2;
							try { DebugEnterDecision(23, false);
							int LA23_0 = input.LA(1);

							if ((LA23_0==NEWLINE))
							{
								alt23 = 1;
							}


							} finally { DebugExitDecision(23); }
							switch (alt23)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:223:56: NEWLINE
								{
								DebugLocation(223, 56);
								NEWLINE57=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def949);  
								stream_NEWLINE.Add(NEWLINE57);


								}
								break;

							default:
								if (cnt23 >= 1)
									goto loop23;

								EarlyExitException eee23 = new EarlyExitException( 23, input );
								DebugRecognitionException(eee23);
								throw eee23;
							}
							cnt23++;
						}
						loop23:
							;

						} finally { DebugExitSubRule(23); }


						}
						break;

					default:
						goto loop24;
					}
				}

				loop24:
					;

				} finally { DebugExitSubRule(24); }

				DebugLocation(223, 67);
				DEDENT58=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def954);  
				stream_DEDENT.Add(DEDENT58);


				}
				break;

			}
			} finally { DebugExitSubRule(25); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 223:76: -> ^( Import ( STRING )* )
			{
				DebugLocation(223, 79);
				// SugarCpp.g:223:79: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(223, 81);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(223, 88);
				// SugarCpp.g:223:88: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(223, 88);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 10);
			LeaveRule("import_def", 10);
			LeaveRule_import_def();
		}
		DebugLocation(224, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:226:1: enum_def : ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 11);
		TraceIn("enum_def", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute59 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident65 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleITokenStream stream_127=new RewriteRuleITokenStream(adaptor,"token 127");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(226, 1);
		try
		{
			// SugarCpp.g:227:2: ( ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )? -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:227:4: ( attribute )? 'enum' ident '=' ( ident ( '|' ident )* )?
			{
			DebugLocation(227, 4);
			// SugarCpp.g:227:4: ( attribute )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==112))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:4: attribute
				{
				DebugLocation(227, 4);
				PushFollow(Follow._attribute_in_enum_def976);
				attribute59=attribute();
				PopFollow();

				stream_attribute.Add(attribute59.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(227, 15);
			string_literal60=(IToken)Match(input,127,Follow._127_in_enum_def979);  
			stream_127.Add(string_literal60);

			DebugLocation(227, 22);
			PushFollow(Follow._ident_in_enum_def981);
			ident61=ident();
			PopFollow();

			stream_ident.Add(ident61.Tree);
			DebugLocation(227, 28);
			char_literal62=(IToken)Match(input,102,Follow._102_in_enum_def983);  
			stream_102.Add(char_literal62);

			DebugLocation(227, 32);
			// SugarCpp.g:227:32: ( ident ( '|' ident )* )?
			int alt28=2;
			try { DebugEnterSubRule(28);
			try { DebugEnterDecision(28, false);
			int LA28_0 = input.LA(1);

			if ((LA28_0==IDENT))
			{
				alt28 = 1;
			}
			} finally { DebugExitDecision(28); }
			switch (alt28)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:227:33: ident ( '|' ident )*
				{
				DebugLocation(227, 33);
				PushFollow(Follow._ident_in_enum_def986);
				ident63=ident();
				PopFollow();

				stream_ident.Add(ident63.Tree);
				DebugLocation(227, 39);
				// SugarCpp.g:227:39: ( '|' ident )*
				try { DebugEnterSubRule(27);
				while (true)
				{
					int alt27=2;
					try { DebugEnterDecision(27, false);
					int LA27_0 = input.LA(1);

					if ((LA27_0==150))
					{
						alt27 = 1;
					}


					} finally { DebugExitDecision(27); }
					switch ( alt27 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:227:40: '|' ident
						{
						DebugLocation(227, 40);
						char_literal64=(IToken)Match(input,150,Follow._150_in_enum_def989);  
						stream_150.Add(char_literal64);

						DebugLocation(227, 44);
						PushFollow(Follow._ident_in_enum_def991);
						ident65=ident();
						PopFollow();

						stream_ident.Add(ident65.Tree);

						}
						break;

					default:
						goto loop27;
					}
				}

				loop27:
					;

				} finally { DebugExitSubRule(27); }


				}
				break;

			}
			} finally { DebugExitSubRule(28); }



			{
			// AST REWRITE
			// elements: ident, ident, attribute
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 227:54: -> ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
			{
				DebugLocation(227, 57);
				// SugarCpp.g:227:57: ^( Enum ( attribute )? ident ^( Ident_List ( ident )* ) )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(227, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(227, 64);
				// SugarCpp.g:227:64: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(227, 64);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(227, 75);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(227, 81);
				// SugarCpp.g:227:81: ^( Ident_List ( ident )* )
				{
				CommonTree root_2 = (CommonTree)adaptor.Nil();
				DebugLocation(227, 83);
				root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

				DebugLocation(227, 94);
				// SugarCpp.g:227:94: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(227, 94);
					adaptor.AddChild(root_2, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_1, root_2);
				}

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 11);
			LeaveRule("enum_def", 11);
			LeaveRule_enum_def();
		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:230:1: namespace_def : 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 12);
		TraceIn("namespace_def", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal66 = default(IToken);
		IToken NEWLINE68 = default(IToken);
		IToken INDENT69 = default(IToken);
		IToken NEWLINE70 = default(IToken);
		IToken DEDENT72 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident67 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block71 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal66_tree = default(CommonTree);
		CommonTree NEWLINE68_tree = default(CommonTree);
		CommonTree INDENT69_tree = default(CommonTree);
		CommonTree NEWLINE70_tree = default(CommonTree);
		CommonTree DEDENT72_tree = default(CommonTree);
		RewriteRuleITokenStream stream_138=new RewriteRuleITokenStream(adaptor,"token 138");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(230, 1);
		try
		{
			// SugarCpp.g:231:2: ( 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT -> ^( Namespace ident global_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: 'namespace' ident ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
			{
			DebugLocation(231, 4);
			string_literal66=(IToken)Match(input,138,Follow._138_in_namespace_def1024);  
			stream_138.Add(string_literal66);

			DebugLocation(231, 16);
			PushFollow(Follow._ident_in_namespace_def1026);
			ident67=ident();
			PopFollow();

			stream_ident.Add(ident67.Tree);
			DebugLocation(231, 22);
			// SugarCpp.g:231:22: ( NEWLINE )+
			int cnt29=0;
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				int LA29_0 = input.LA(1);

				if ((LA29_0==NEWLINE))
				{
					alt29 = 1;
				}


				} finally { DebugExitDecision(29); }
				switch (alt29)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:22: NEWLINE
					{
					DebugLocation(231, 22);
					NEWLINE68=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1028);  
					stream_NEWLINE.Add(NEWLINE68);


					}
					break;

				default:
					if (cnt29 >= 1)
						goto loop29;

					EarlyExitException eee29 = new EarlyExitException( 29, input );
					DebugRecognitionException(eee29);
					throw eee29;
				}
				cnt29++;
			}
			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(231, 31);
			INDENT69=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def1031);  
			stream_INDENT.Add(INDENT69);

			DebugLocation(231, 38);
			// SugarCpp.g:231:38: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:231:38: NEWLINE
					{
					DebugLocation(231, 38);
					NEWLINE70=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def1033);  
					stream_NEWLINE.Add(NEWLINE70);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(231, 47);
			PushFollow(Follow._global_block_in_namespace_def1036);
			global_block71=global_block();
			PopFollow();

			stream_global_block.Add(global_block71.Tree);
			DebugLocation(231, 60);
			DEDENT72=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def1038);  
			stream_DEDENT.Add(DEDENT72);



			{
			// AST REWRITE
			// elements: global_block, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:67: -> ^( Namespace ident global_block )
			{
				DebugLocation(231, 70);
				// SugarCpp.g:231:70: ^( Namespace ident global_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(231, 72);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(231, 82);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(231, 88);
				adaptor.AddChild(root_1, stream_global_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 12);
			LeaveRule("namespace_def", 12);
			LeaveRule_namespace_def();
		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:234:1: class_def : ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 13);
		TraceIn("class_def", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal74 = default(IToken);
		IToken char_literal77 = default(IToken);
		IToken char_literal79 = default(IToken);
		IToken char_literal80 = default(IToken);
		IToken char_literal82 = default(IToken);
		IToken NEWLINE84 = default(IToken);
		IToken INDENT85 = default(IToken);
		IToken NEWLINE86 = default(IToken);
		IToken DEDENT88 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute73 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident75 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter76 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args78 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident81 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> global_block87 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal74_tree = default(CommonTree);
		CommonTree char_literal77_tree = default(CommonTree);
		CommonTree char_literal79_tree = default(CommonTree);
		CommonTree char_literal80_tree = default(CommonTree);
		CommonTree char_literal82_tree = default(CommonTree);
		CommonTree NEWLINE84_tree = default(CommonTree);
		CommonTree INDENT85_tree = default(CommonTree);
		CommonTree NEWLINE86_tree = default(CommonTree);
		CommonTree DEDENT88_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_121=new RewriteRuleITokenStream(adaptor,"token 121");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_global_block=new RewriteRuleSubtreeStream(adaptor,"rule global_block");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(234, 1);
		try
		{
			// SugarCpp.g:235:2: ( ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )? -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:235:5: ( attribute )? 'class' ident ( generic_parameter )? ( '(' func_args ')' )? ( ':' ident ( ',' ident )* )? ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			{
			DebugLocation(235, 5);
			// SugarCpp.g:235:5: ( attribute )?
			int alt31=2;
			try { DebugEnterSubRule(31);
			try { DebugEnterDecision(31, false);
			int LA31_0 = input.LA(1);

			if ((LA31_0==112))
			{
				alt31 = 1;
			}
			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:5: attribute
				{
				DebugLocation(235, 5);
				PushFollow(Follow._attribute_in_class_def1060);
				attribute73=attribute();
				PopFollow();

				stream_attribute.Add(attribute73.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(31); }

			DebugLocation(235, 16);
			string_literal74=(IToken)Match(input,121,Follow._121_in_class_def1063);  
			stream_121.Add(string_literal74);

			DebugLocation(235, 24);
			PushFollow(Follow._ident_in_class_def1065);
			ident75=ident();
			PopFollow();

			stream_ident.Add(ident75.Tree);
			DebugLocation(235, 30);
			// SugarCpp.g:235:30: ( generic_parameter )?
			int alt32=2;
			try { DebugEnterSubRule(32);
			try { DebugEnterDecision(32, false);
			int LA32_0 = input.LA(1);

			if ((LA32_0==97))
			{
				alt32 = 1;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:31: generic_parameter
				{
				DebugLocation(235, 31);
				PushFollow(Follow._generic_parameter_in_class_def1068);
				generic_parameter76=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(32); }

			DebugLocation(235, 51);
			// SugarCpp.g:235:51: ( '(' func_args ')' )?
			int alt33=2;
			try { DebugEnterSubRule(33);
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==77))
			{
				alt33 = 1;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:52: '(' func_args ')'
				{
				DebugLocation(235, 52);
				char_literal77=(IToken)Match(input,77,Follow._77_in_class_def1073);  
				stream_77.Add(char_literal77);

				DebugLocation(235, 56);
				PushFollow(Follow._func_args_in_class_def1075);
				func_args78=func_args();
				PopFollow();

				stream_func_args.Add(func_args78.Tree);
				DebugLocation(235, 66);
				char_literal79=(IToken)Match(input,78,Follow._78_in_class_def1077);  
				stream_78.Add(char_literal79);


				}
				break;

			}
			} finally { DebugExitSubRule(33); }

			DebugLocation(235, 72);
			// SugarCpp.g:235:72: ( ':' ident ( ',' ident )* )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==94))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:73: ':' ident ( ',' ident )*
				{
				DebugLocation(235, 73);
				char_literal80=(IToken)Match(input,94,Follow._94_in_class_def1082);  
				stream_94.Add(char_literal80);

				DebugLocation(235, 77);
				PushFollow(Follow._ident_in_class_def1084);
				ident81=ident();
				PopFollow();

				stream_ident.Add(ident81.Tree);
				DebugLocation(235, 83);
				// SugarCpp.g:235:83: ( ',' ident )*
				try { DebugEnterSubRule(34);
				while (true)
				{
					int alt34=2;
					try { DebugEnterDecision(34, false);
					int LA34_0 = input.LA(1);

					if ((LA34_0==84))
					{
						alt34 = 1;
					}


					} finally { DebugExitDecision(34); }
					switch ( alt34 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:235:84: ',' ident
						{
						DebugLocation(235, 84);
						char_literal82=(IToken)Match(input,84,Follow._84_in_class_def1087);  
						stream_84.Add(char_literal82);

						DebugLocation(235, 88);
						PushFollow(Follow._ident_in_class_def1089);
						ident83=ident();
						PopFollow();

						stream_ident.Add(ident83.Tree);

						}
						break;

					default:
						goto loop34;
					}
				}

				loop34:
					;

				} finally { DebugExitSubRule(34); }


				}
				break;

			}
			} finally { DebugExitSubRule(35); }

			DebugLocation(235, 98);
			// SugarCpp.g:235:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?
			int alt38=2;
			try { DebugEnterSubRule(38);
			try { DebugEnterDecision(38, false);
			try
			{
				alt38 = dfa38.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(38); }
			switch (alt38)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:235:99: ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT
				{
				DebugLocation(235, 99);
				// SugarCpp.g:235:99: ( NEWLINE )+
				int cnt36=0;
				try { DebugEnterSubRule(36);
				while (true)
				{
					int alt36=2;
					try { DebugEnterDecision(36, false);
					int LA36_0 = input.LA(1);

					if ((LA36_0==NEWLINE))
					{
						alt36 = 1;
					}


					} finally { DebugExitDecision(36); }
					switch (alt36)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:235:99: NEWLINE
						{
						DebugLocation(235, 99);
						NEWLINE84=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1096);  
						stream_NEWLINE.Add(NEWLINE84);


						}
						break;

					default:
						if (cnt36 >= 1)
							goto loop36;

						EarlyExitException eee36 = new EarlyExitException( 36, input );
						DebugRecognitionException(eee36);
						throw eee36;
					}
					cnt36++;
				}
				loop36:
					;

				} finally { DebugExitSubRule(36); }

				DebugLocation(235, 108);
				INDENT85=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def1099);  
				stream_INDENT.Add(INDENT85);

				DebugLocation(235, 115);
				// SugarCpp.g:235:115: ( NEWLINE )*
				try { DebugEnterSubRule(37);
				while (true)
				{
					int alt37=2;
					try { DebugEnterDecision(37, false);
					int LA37_0 = input.LA(1);

					if ((LA37_0==NEWLINE))
					{
						alt37 = 1;
					}


					} finally { DebugExitDecision(37); }
					switch ( alt37 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:235:115: NEWLINE
						{
						DebugLocation(235, 115);
						NEWLINE86=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def1101);  
						stream_NEWLINE.Add(NEWLINE86);


						}
						break;

					default:
						goto loop37;
					}
				}

				loop37:
					;

				} finally { DebugExitSubRule(37); }

				DebugLocation(235, 124);
				PushFollow(Follow._global_block_in_class_def1104);
				global_block87=global_block();
				PopFollow();

				stream_global_block.Add(global_block87.Tree);
				DebugLocation(235, 137);
				DEDENT88=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def1106);  
				stream_DEDENT.Add(DEDENT88);


				}
				break;

			}
			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: func_args, generic_parameter, attribute, ident, ident, global_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 235:146: -> ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
			{
				DebugLocation(235, 149);
				// SugarCpp.g:235:149: ^( Class ( attribute )? ident ( generic_parameter )? ( func_args )? ( ^( Ident_List ( ident )* ) )? ( global_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(235, 151);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(235, 157);
				// SugarCpp.g:235:157: ( attribute )?
				if (stream_attribute.HasNext)
				{
					DebugLocation(235, 157);
					adaptor.AddChild(root_1, stream_attribute.NextTree());

				}
				stream_attribute.Reset();
				DebugLocation(235, 168);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(235, 174);
				// SugarCpp.g:235:174: ( generic_parameter )?
				if (stream_generic_parameter.HasNext)
				{
					DebugLocation(235, 174);
					adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

				}
				stream_generic_parameter.Reset();
				DebugLocation(235, 193);
				// SugarCpp.g:235:193: ( func_args )?
				if (stream_func_args.HasNext)
				{
					DebugLocation(235, 193);
					adaptor.AddChild(root_1, stream_func_args.NextTree());

				}
				stream_func_args.Reset();
				DebugLocation(235, 204);
				// SugarCpp.g:235:204: ( ^( Ident_List ( ident )* ) )?
				if (stream_ident.HasNext)
				{
					DebugLocation(235, 205);
					// SugarCpp.g:235:205: ^( Ident_List ( ident )* )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(235, 207);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_2);

					DebugLocation(235, 218);
					// SugarCpp.g:235:218: ( ident )*
					while ( stream_ident.HasNext )
					{
						DebugLocation(235, 218);
						adaptor.AddChild(root_2, stream_ident.NextTree());

					}
					stream_ident.Reset();

					adaptor.AddChild(root_1, root_2);
					}

				}
				stream_ident.Reset();
				DebugLocation(235, 228);
				// SugarCpp.g:235:228: ( global_block )?
				if (stream_global_block.HasNext)
				{
					DebugLocation(235, 228);
					adaptor.AddChild(root_1, stream_global_block.NextTree());

				}
				stream_global_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 13);
			LeaveRule("class_def", 13);
			LeaveRule_class_def();
		}
		DebugLocation(236, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:238:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 14);
		TraceIn("type_name_op", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal89 = default(IToken);
		IToken char_literal90 = default(IToken);
		IToken char_literal91 = default(IToken);
		IToken char_literal92 = default(IToken);

		CommonTree char_literal89_tree = default(CommonTree);
		CommonTree char_literal90_tree = default(CommonTree);
		CommonTree char_literal91_tree = default(CommonTree);
		CommonTree char_literal92_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(238, 34);
		try
		{
			// SugarCpp.g:238:13: ( '*' | '[' ']' | '&' )
			int alt39=3;
			try { DebugEnterDecision(39, false);
			switch (input.LA(1))
			{
			case 79:
				{
				alt39 = 1;
				}
				break;
			case 112:
				{
				alt39 = 2;
				}
				break;
			case 75:
				{
				alt39 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 39, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:238:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(238, 15);
				char_literal89=(IToken)Match(input,79,Follow._79_in_type_name_op1147); 
				char_literal89_tree = (CommonTree)adaptor.Create(char_literal89);
				adaptor.AddChild(root_0, char_literal89_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:238:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(238, 21);
				char_literal90=(IToken)Match(input,112,Follow._112_in_type_name_op1151); 
				char_literal90_tree = (CommonTree)adaptor.Create(char_literal90);
				adaptor.AddChild(root_0, char_literal90_tree);
				DebugLocation(238, 25);
				char_literal91=(IToken)Match(input,113,Follow._113_in_type_name_op1153); 
				char_literal91_tree = (CommonTree)adaptor.Create(char_literal91);
				adaptor.AddChild(root_0, char_literal91_tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:238:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(238, 31);
				char_literal92=(IToken)Match(input,75,Follow._75_in_type_name_op1157); 
				char_literal92_tree = (CommonTree)adaptor.Create(char_literal92);
				adaptor.AddChild(root_0, char_literal92_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 14);
			LeaveRule("type_name_op", 14);
			LeaveRule_type_name_op();
		}
		DebugLocation(238, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:239:1: type_name : ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 15);
		TraceIn("type_name", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal93 = default(IToken);
		IToken string_literal94 = default(IToken);
		IToken char_literal96 = default(IToken);
		IToken char_literal98 = default(IToken);
		IToken char_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident95 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name97 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name99 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal93_tree = default(CommonTree);
		CommonTree string_literal94_tree = default(CommonTree);
		CommonTree char_literal96_tree = default(CommonTree);
		CommonTree char_literal98_tree = default(CommonTree);
		CommonTree char_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_146=new RewriteRuleITokenStream(adaptor,"token 146");
		RewriteRuleITokenStream stream_122=new RewriteRuleITokenStream(adaptor,"token 122");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(239, 1);
		try
		{
			// SugarCpp.g:240:2: ( ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(240, 4);
			// SugarCpp.g:240:4: ( 'const' )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==122))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:4: 'const'
				{
				DebugLocation(240, 4);
				string_literal93=(IToken)Match(input,122,Follow._122_in_type_name1166);  
				stream_122.Add(string_literal93);


				}
				break;

			}
			} finally { DebugExitSubRule(40); }

			DebugLocation(240, 13);
			// SugarCpp.g:240:13: ( 'unsigned' )?
			int alt41=2;
			try { DebugEnterSubRule(41);
			try { DebugEnterDecision(41, false);
			int LA41_0 = input.LA(1);

			if ((LA41_0==146))
			{
				alt41 = 1;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:13: 'unsigned'
				{
				DebugLocation(240, 13);
				string_literal94=(IToken)Match(input,146,Follow._146_in_type_name1169);  
				stream_146.Add(string_literal94);


				}
				break;

			}
			} finally { DebugExitSubRule(41); }

			DebugLocation(240, 25);
			PushFollow(Follow._ident_in_type_name1172);
			ident95=ident();
			PopFollow();

			stream_ident.Add(ident95.Tree);
			DebugLocation(240, 31);
			// SugarCpp.g:240:31: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt44=2;
			try { DebugEnterSubRule(44);
			try { DebugEnterDecision(44, false);
			int LA44_0 = input.LA(1);

			if ((LA44_0==97))
			{
				alt44 = 1;
			}
			} finally { DebugExitDecision(44); }
			switch (alt44)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:32: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(240, 32);
				char_literal96=(IToken)Match(input,97,Follow._97_in_type_name1175);  
				stream_97.Add(char_literal96);

				DebugLocation(240, 36);
				// SugarCpp.g:240:36: ( type_name ( ',' type_name )* )?
				int alt43=2;
				try { DebugEnterSubRule(43);
				try { DebugEnterDecision(43, false);
				int LA43_0 = input.LA(1);

				if ((LA43_0==IDENT||LA43_0==122||LA43_0==146))
				{
					alt43 = 1;
				}
				} finally { DebugExitDecision(43); }
				switch (alt43)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:37: type_name ( ',' type_name )*
					{
					DebugLocation(240, 37);
					PushFollow(Follow._type_name_in_type_name1178);
					type_name97=type_name();
					PopFollow();

					stream_type_name.Add(type_name97.Tree);
					DebugLocation(240, 47);
					// SugarCpp.g:240:47: ( ',' type_name )*
					try { DebugEnterSubRule(42);
					while (true)
					{
						int alt42=2;
						try { DebugEnterDecision(42, false);
						int LA42_0 = input.LA(1);

						if ((LA42_0==84))
						{
							alt42 = 1;
						}


						} finally { DebugExitDecision(42); }
						switch ( alt42 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:240:48: ',' type_name
							{
							DebugLocation(240, 48);
							char_literal98=(IToken)Match(input,84,Follow._84_in_type_name1181);  
							stream_84.Add(char_literal98);

							DebugLocation(240, 52);
							PushFollow(Follow._type_name_in_type_name1183);
							type_name99=type_name();
							PopFollow();

							stream_type_name.Add(type_name99.Tree);

							}
							break;

						default:
							goto loop42;
						}
					}

					loop42:
						;

					} finally { DebugExitSubRule(42); }


					}
					break;

				}
				} finally { DebugExitSubRule(43); }

				DebugLocation(240, 66);
				char_literal100=(IToken)Match(input,105,Follow._105_in_type_name1189);  
				stream_105.Add(char_literal100);


				}
				break;

			}
			} finally { DebugExitSubRule(44); }

			DebugLocation(240, 72);
			// SugarCpp.g:240:72: ( type_name_op )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==112))
				{
					int LA45_2 = input.LA(2);

					if ((LA45_2==113))
					{
						alt45 = 1;
					}


				}
				else if ((LA45_0==75||LA45_0==79))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:240:72: type_name_op
					{
					DebugLocation(240, 72);
					PushFollow(Follow._type_name_op_in_type_name1193);
					type_name_op101=type_name_op();
					PopFollow();

					stream_type_name_op.Add(type_name_op101.Tree);

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }



			{
			// AST REWRITE
			// elements: 146, 105, 122, ident, 97, type_name_op, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:86: -> ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(240, 89);
				// SugarCpp.g:240:89: ^( Type_IDENT ( 'const' )? ( 'unsigned' )? ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(240, 91);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(240, 102);
				// SugarCpp.g:240:102: ( 'const' )?
				if (stream_122.HasNext)
				{
					DebugLocation(240, 102);
					adaptor.AddChild(root_1, stream_122.NextNode());

				}
				stream_122.Reset();
				DebugLocation(240, 111);
				// SugarCpp.g:240:111: ( 'unsigned' )?
				if (stream_146.HasNext)
				{
					DebugLocation(240, 111);
					adaptor.AddChild(root_1, stream_146.NextNode());

				}
				stream_146.Reset();
				DebugLocation(240, 123);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(240, 129);
				// SugarCpp.g:240:129: ( '<' ( type_name )* '>' )?
				if (stream_105.HasNext||stream_97.HasNext||stream_type_name.HasNext)
				{
					DebugLocation(240, 130);
					adaptor.AddChild(root_1, stream_97.NextNode());
					DebugLocation(240, 134);
					// SugarCpp.g:240:134: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(240, 134);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(240, 145);
					adaptor.AddChild(root_1, stream_105.NextNode());

				}
				stream_105.Reset();
				stream_97.Reset();
				stream_type_name.Reset();
				DebugLocation(240, 152);
				// SugarCpp.g:240:152: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(240, 152);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 15);
			LeaveRule("type_name", 15);
			LeaveRule_type_name();
		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter_inside();
	partial void LeaveRule_generic_parameter_inside();

	// $ANTLR start "generic_parameter_inside"
	// SugarCpp.g:243:1: generic_parameter_inside : ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) ;
	[GrammarRule("generic_parameter_inside")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside()
	{
		EnterRule_generic_parameter_inside();
		EnterRule("generic_parameter_inside", 16);
		TraceIn("generic_parameter_inside", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal103 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident102 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident104 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal103_tree = default(CommonTree);
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "generic_parameter_inside");
		DebugLocation(243, 1);
		try
		{
			// SugarCpp.g:244:2: ( ident ( ',' ident )* -> ^( Generic_Patameters ( ident )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: ident ( ',' ident )*
			{
			DebugLocation(244, 4);
			PushFollow(Follow._ident_in_generic_parameter_inside1233);
			ident102=ident();
			PopFollow();

			stream_ident.Add(ident102.Tree);
			DebugLocation(244, 10);
			// SugarCpp.g:244:10: ( ',' ident )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==84))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:244:11: ',' ident
					{
					DebugLocation(244, 11);
					char_literal103=(IToken)Match(input,84,Follow._84_in_generic_parameter_inside1236);  
					stream_84.Add(char_literal103);

					DebugLocation(244, 15);
					PushFollow(Follow._ident_in_generic_parameter_inside1238);
					ident104=ident();
					PopFollow();

					stream_ident.Add(ident104.Tree);

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:23: -> ^( Generic_Patameters ( ident )* )
			{
				DebugLocation(244, 26);
				// SugarCpp.g:244:26: ^( Generic_Patameters ( ident )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(244, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_1);

				DebugLocation(244, 47);
				// SugarCpp.g:244:47: ( ident )*
				while ( stream_ident.HasNext )
				{
					DebugLocation(244, 47);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter_inside", 16);
			LeaveRule("generic_parameter_inside", 16);
			LeaveRule_generic_parameter_inside();
		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter_inside"); }
		return retval;

	}
	// $ANTLR end "generic_parameter_inside"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:247:1: generic_parameter : '<' generic_parameter_inside '>' -> generic_parameter_inside ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 17);
		TraceIn("generic_parameter", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal105 = default(IToken);
		IToken char_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter_inside106 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree char_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleSubtreeStream stream_generic_parameter_inside=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter_inside");
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(247, 1);
		try
		{
			// SugarCpp.g:248:2: ( '<' generic_parameter_inside '>' -> generic_parameter_inside )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: '<' generic_parameter_inside '>'
			{
			DebugLocation(248, 4);
			char_literal105=(IToken)Match(input,97,Follow._97_in_generic_parameter1260);  
			stream_97.Add(char_literal105);

			DebugLocation(248, 8);
			PushFollow(Follow._generic_parameter_inside_in_generic_parameter1262);
			generic_parameter_inside106=generic_parameter_inside();
			PopFollow();

			stream_generic_parameter_inside.Add(generic_parameter_inside106.Tree);
			DebugLocation(248, 33);
			char_literal107=(IToken)Match(input,105,Follow._105_in_generic_parameter1264);  
			stream_105.Add(char_literal107);



			{
			// AST REWRITE
			// elements: generic_parameter_inside
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:37: -> generic_parameter_inside
			{
				DebugLocation(248, 40);
				adaptor.AddChild(root_0, stream_generic_parameter_inside.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 17);
			LeaveRule("generic_parameter", 17);
			LeaveRule_generic_parameter();
		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:251:1: func_args : func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 18);
		TraceIn("func_args", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal109 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item108 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args_item110 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal109_tree = default(CommonTree);
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_func_args_item=new RewriteRuleSubtreeStream(adaptor,"rule func_args_item");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(251, 1);
		try
		{
			// SugarCpp.g:252:2: ( func_args_item ( ',' func_args_item )* -> ^( Func_Args ( func_args_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:252:4: func_args_item ( ',' func_args_item )*
			{
			DebugLocation(252, 4);
			PushFollow(Follow._func_args_item_in_func_args1279);
			func_args_item108=func_args_item();
			PopFollow();

			stream_func_args_item.Add(func_args_item108.Tree);
			DebugLocation(252, 19);
			// SugarCpp.g:252:19: ( ',' func_args_item )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==84))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:252:20: ',' func_args_item
					{
					DebugLocation(252, 20);
					char_literal109=(IToken)Match(input,84,Follow._84_in_func_args1282);  
					stream_84.Add(char_literal109);

					DebugLocation(252, 24);
					PushFollow(Follow._func_args_item_in_func_args1284);
					func_args_item110=func_args_item();
					PopFollow();

					stream_func_args_item.Add(func_args_item110.Tree);

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }



			{
			// AST REWRITE
			// elements: func_args_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 252:41: -> ^( Func_Args ( func_args_item )* )
			{
				DebugLocation(252, 44);
				// SugarCpp.g:252:44: ^( Func_Args ( func_args_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(252, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(252, 56);
				// SugarCpp.g:252:56: ( func_args_item )*
				while ( stream_func_args_item.HasNext )
				{
					DebugLocation(252, 56);
					adaptor.AddChild(root_1, stream_func_args_item.NextTree());

				}
				stream_func_args_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 18);
			LeaveRule("func_args", 18);
			LeaveRule_func_args();
		}
		DebugLocation(253, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_args_item();
	partial void LeaveRule_func_args_item();

	// $ANTLR start "func_args_item"
	// SugarCpp.g:255:1: func_args_item : ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr );
	[GrammarRule("func_args_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args_item()
	{
		EnterRule_func_args_item();
		EnterRule("func_args_item", 19);
		TraceIn("func_args_item", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal112 = default(IToken);
		IToken char_literal114 = default(IToken);
		IToken string_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal120 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name113 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr121 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal112_tree = default(CommonTree);
		CommonTree char_literal114_tree = default(CommonTree);
		CommonTree string_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal120_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "func_args_item");
		DebugLocation(255, 1);
		try
		{
			// SugarCpp.g:256:2: ( ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ^ modify_expr )
			int alt51=2;
			try { DebugEnterDecision(51, false);
			int LA51_0 = input.LA(1);

			if ((LA51_0==IDENT))
			{
				alt51 = 1;
			}
			else if ((LA51_0==96))
			{
				alt51 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 51, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(51); }
			switch (alt51)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:4: ident_list ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(256, 4);
				PushFollow(Follow._ident_list_in_func_args_item1306);
				ident_list111=ident_list();
				PopFollow();

				stream_ident_list.Add(ident_list111.Tree);
				DebugLocation(256, 15);
				char_literal112=(IToken)Match(input,94,Follow._94_in_func_args_item1308);  
				stream_94.Add(char_literal112);

				DebugLocation(256, 19);
				PushFollow(Follow._type_name_in_func_args_item1310);
				type_name113=type_name();
				PopFollow();

				stream_type_name.Add(type_name113.Tree);
				DebugLocation(256, 29);
				// SugarCpp.g:256:29: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt50=3;
				try { DebugEnterSubRule(50);
				try { DebugEnterDecision(50, false);
				switch (input.LA(1))
				{
				case 96:
				case 102:
					{
					alt50 = 1;
					}
					break;
				case 77:
					{
					alt50 = 2;
					}
					break;
				case 78:
				case 84:
					{
					alt50 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 50, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(50); }
				switch (alt50)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:256:31: ( '=' | ':=' ) expr
					{
					DebugLocation(256, 31);
					// SugarCpp.g:256:31: ( '=' | ':=' )
					int alt48=2;
					try { DebugEnterSubRule(48);
					try { DebugEnterDecision(48, false);
					int LA48_0 = input.LA(1);

					if ((LA48_0==102))
					{
						alt48 = 1;
					}
					else if ((LA48_0==96))
					{
						alt48 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 48, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(48); }
					switch (alt48)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:256:32: '='
						{
						DebugLocation(256, 32);
						char_literal114=(IToken)Match(input,102,Follow._102_in_func_args_item1315);  
						stream_102.Add(char_literal114);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:256:38: ':='
						{
						DebugLocation(256, 38);
						string_literal115=(IToken)Match(input,96,Follow._96_in_func_args_item1319);  
						stream_96.Add(string_literal115);


						}
						break;

					}
					} finally { DebugExitSubRule(48); }

					DebugLocation(256, 44);
					PushFollow(Follow._expr_in_func_args_item1322);
					expr116=expr();
					PopFollow();

					stream_expr.Add(expr116.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 256:50: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(256, 53);
						// SugarCpp.g:256:53: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(256, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(256, 72);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(256, 82);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(256, 93);
						// SugarCpp.g:256:93: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(256, 93);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:257:33: '(' ( expr_list )? ')'
					{
					DebugLocation(257, 33);
					char_literal117=(IToken)Match(input,77,Follow._77_in_func_args_item1370);  
					stream_77.Add(char_literal117);

					DebugLocation(257, 37);
					// SugarCpp.g:257:37: ( expr_list )?
					int alt49=2;
					try { DebugEnterSubRule(49);
					try { DebugEnterDecision(49, false);
					int LA49_0 = input.LA(1);

					if ((LA49_0==IDENT||LA49_0==NUMBER||LA49_0==STRING||LA49_0==70||LA49_0==75||LA49_0==77||LA49_0==79||(LA49_0>=81 && LA49_0<=82)||(LA49_0>=85 && LA49_0<=86)||LA49_0==111||LA49_0==139||LA49_0==153))
					{
						alt49 = 1;
					}
					} finally { DebugExitDecision(49); }
					switch (alt49)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:257:37: expr_list
						{
						DebugLocation(257, 37);
						PushFollow(Follow._expr_list_in_func_args_item1372);
						expr_list118=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list118.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(49); }

					DebugLocation(257, 48);
					char_literal119=(IToken)Match(input,78,Follow._78_in_func_args_item1375);  
					stream_78.Add(char_literal119);



					{
					// AST REWRITE
					// elements: expr_list, type_name, ident_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 257:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(257, 56);
						// SugarCpp.g:257:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(257, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(257, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(257, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(257, 98);
						// SugarCpp.g:257:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(257, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:258:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 258:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(258, 18);
						// SugarCpp.g:258:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(258, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(258, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(258, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(50); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:260:4: ':=' ^ modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(260, 8);
				string_literal120=(IToken)Match(input,96,Follow._96_in_func_args_item1432); 
				string_literal120_tree = (CommonTree)adaptor.Create(string_literal120);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal120_tree, root_0);
				DebugLocation(260, 11);
				PushFollow(Follow._modify_expr_in_func_args_item1436);
				modify_expr121=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr121.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args_item", 19);
			LeaveRule("func_args_item", 19);
			LeaveRule_func_args_item();
		}
		DebugLocation(261, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args_item"); }
		return retval;

	}
	// $ANTLR end "func_args_item"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:263:1: func_def : ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 20);
		TraceIn("func_def", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal124 = default(IToken);
		IToken char_literal127 = default(IToken);
		IToken char_literal129 = default(IToken);
		IToken NEWLINE130 = default(IToken);
		IToken char_literal132 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name123 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident125 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args128 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr133 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal124_tree = default(CommonTree);
		CommonTree char_literal127_tree = default(CommonTree);
		CommonTree char_literal129_tree = default(CommonTree);
		CommonTree NEWLINE130_tree = default(CommonTree);
		CommonTree char_literal132_tree = default(CommonTree);
		RewriteRuleITokenStream stream_153=new RewriteRuleITokenStream(adaptor,"token 153");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_attribute=new RewriteRuleSubtreeStream(adaptor,"rule attribute");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(263, 4);
		try
		{
			// SugarCpp.g:264:2: ( ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:264:4: ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? '(' ( func_args )? ')' ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			{
			DebugLocation(264, 4);
			// SugarCpp.g:264:4: ( attribute )?
			int alt52=2;
			try { DebugEnterSubRule(52);
			try { DebugEnterDecision(52, false);
			int LA52_0 = input.LA(1);

			if ((LA52_0==112))
			{
				alt52 = 1;
			}
			} finally { DebugExitDecision(52); }
			switch (alt52)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:4: attribute
				{
				DebugLocation(264, 4);
				PushFollow(Follow._attribute_in_func_def1447);
				attribute122=attribute();
				PopFollow();

				stream_attribute.Add(attribute122.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(52); }

			DebugLocation(264, 15);
			// SugarCpp.g:264:15: ( type_name )?
			int alt53=2;
			try { DebugEnterSubRule(53);
			try { DebugEnterDecision(53, false);
			try
			{
				alt53 = dfa53.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(53); }
			switch (alt53)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:15: type_name
				{
				DebugLocation(264, 15);
				PushFollow(Follow._type_name_in_func_def1450);
				type_name123=type_name();
				PopFollow();

				stream_type_name.Add(type_name123.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(53); }

			DebugLocation(264, 26);
			// SugarCpp.g:264:26: ( '~' )?
			int alt54=2;
			try { DebugEnterSubRule(54);
			try { DebugEnterDecision(54, false);
			int LA54_0 = input.LA(1);

			if ((LA54_0==153))
			{
				alt54 = 1;
			}
			} finally { DebugExitDecision(54); }
			switch (alt54)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:26: '~'
				{
				DebugLocation(264, 26);
				char_literal124=(IToken)Match(input,153,Follow._153_in_func_def1453);  
				stream_153.Add(char_literal124);


				}
				break;

			}
			} finally { DebugExitSubRule(54); }

			DebugLocation(264, 31);
			PushFollow(Follow._ident_in_func_def1456);
			ident125=ident();
			PopFollow();

			stream_ident.Add(ident125.Tree);
			DebugLocation(264, 37);
			// SugarCpp.g:264:37: ( generic_parameter )?
			int alt55=2;
			try { DebugEnterSubRule(55);
			try { DebugEnterDecision(55, false);
			int LA55_0 = input.LA(1);

			if ((LA55_0==97))
			{
				alt55 = 1;
			}
			} finally { DebugExitDecision(55); }
			switch (alt55)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:37: generic_parameter
				{
				DebugLocation(264, 37);
				PushFollow(Follow._generic_parameter_in_func_def1458);
				generic_parameter126=generic_parameter();
				PopFollow();

				stream_generic_parameter.Add(generic_parameter126.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(55); }

			DebugLocation(264, 56);
			char_literal127=(IToken)Match(input,77,Follow._77_in_func_def1461);  
			stream_77.Add(char_literal127);

			DebugLocation(264, 60);
			// SugarCpp.g:264:60: ( func_args )?
			int alt56=2;
			try { DebugEnterSubRule(56);
			try { DebugEnterDecision(56, false);
			int LA56_0 = input.LA(1);

			if ((LA56_0==IDENT||LA56_0==96))
			{
				alt56 = 1;
			}
			} finally { DebugExitDecision(56); }
			switch (alt56)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:60: func_args
				{
				DebugLocation(264, 60);
				PushFollow(Follow._func_args_in_func_def1463);
				func_args128=func_args();
				PopFollow();

				stream_func_args.Add(func_args128.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(56); }

			DebugLocation(264, 71);
			char_literal129=(IToken)Match(input,78,Follow._78_in_func_def1466);  
			stream_78.Add(char_literal129);

			DebugLocation(264, 75);
			// SugarCpp.g:264:75: ( ( NEWLINE )+ stmt_block -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block ) | '=' expr -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr ) )
			int alt58=2;
			try { DebugEnterSubRule(58);
			try { DebugEnterDecision(58, false);
			int LA58_0 = input.LA(1);

			if ((LA58_0==NEWLINE))
			{
				alt58 = 1;
			}
			else if ((LA58_0==102))
			{
				alt58 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:264:76: ( NEWLINE )+ stmt_block
				{
				DebugLocation(264, 76);
				// SugarCpp.g:264:76: ( NEWLINE )+
				int cnt57=0;
				try { DebugEnterSubRule(57);
				while (true)
				{
					int alt57=2;
					try { DebugEnterDecision(57, false);
					int LA57_0 = input.LA(1);

					if ((LA57_0==NEWLINE))
					{
						alt57 = 1;
					}


					} finally { DebugExitDecision(57); }
					switch (alt57)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:264:76: NEWLINE
						{
						DebugLocation(264, 76);
						NEWLINE130=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_func_def1469);  
						stream_NEWLINE.Add(NEWLINE130);


						}
						break;

					default:
						if (cnt57 >= 1)
							goto loop57;

						EarlyExitException eee57 = new EarlyExitException( 57, input );
						DebugRecognitionException(eee57);
						throw eee57;
					}
					cnt57++;
				}
				loop57:
					;

				} finally { DebugExitSubRule(57); }

				DebugLocation(264, 85);
				PushFollow(Follow._stmt_block_in_func_def1472);
				stmt_block131=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block131.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, attribute, func_args, ident, type_name, 153, generic_parameter
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 264:96: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
				{
					DebugLocation(264, 99);
					// SugarCpp.g:264:99: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(264, 101);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(264, 110);
					// SugarCpp.g:264:110: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(264, 110);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(264, 121);
					// SugarCpp.g:264:121: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(264, 121);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(264, 132);
					// SugarCpp.g:264:132: ( '~' )?
					if (stream_153.HasNext)
					{
						DebugLocation(264, 132);
						adaptor.AddChild(root_1, stream_153.NextNode());

					}
					stream_153.Reset();
					DebugLocation(264, 137);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(264, 143);
					// SugarCpp.g:264:143: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(264, 143);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(264, 162);
					// SugarCpp.g:264:162: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(264, 162);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(264, 173);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:265:23: '=' expr
				{
				DebugLocation(265, 23);
				char_literal132=(IToken)Match(input,102,Follow._102_in_func_def1521);  
				stream_102.Add(char_literal132);

				DebugLocation(265, 27);
				PushFollow(Follow._expr_in_func_def1523);
				expr133=expr();
				PopFollow();

				stream_expr.Add(expr133.Tree);


				{
				// AST REWRITE
				// elements: ident, generic_parameter, expr, func_args, type_name, attribute, 153
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 265:33: -> ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
				{
					DebugLocation(265, 36);
					// SugarCpp.g:265:36: ^( Func_Def ( attribute )? ( type_name )? ( '~' )? ident ( generic_parameter )? ( func_args )? expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(265, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Def, "Func_Def"), root_1);

					DebugLocation(265, 47);
					// SugarCpp.g:265:47: ( attribute )?
					if (stream_attribute.HasNext)
					{
						DebugLocation(265, 47);
						adaptor.AddChild(root_1, stream_attribute.NextTree());

					}
					stream_attribute.Reset();
					DebugLocation(265, 58);
					// SugarCpp.g:265:58: ( type_name )?
					if (stream_type_name.HasNext)
					{
						DebugLocation(265, 58);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(265, 69);
					// SugarCpp.g:265:69: ( '~' )?
					if (stream_153.HasNext)
					{
						DebugLocation(265, 69);
						adaptor.AddChild(root_1, stream_153.NextNode());

					}
					stream_153.Reset();
					DebugLocation(265, 74);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(265, 80);
					// SugarCpp.g:265:80: ( generic_parameter )?
					if (stream_generic_parameter.HasNext)
					{
						DebugLocation(265, 80);
						adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

					}
					stream_generic_parameter.Reset();
					DebugLocation(265, 99);
					// SugarCpp.g:265:99: ( func_args )?
					if (stream_func_args.HasNext)
					{
						DebugLocation(265, 99);
						adaptor.AddChild(root_1, stream_func_args.NextTree());

					}
					stream_func_args.Reset();
					DebugLocation(265, 110);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(58); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 20);
			LeaveRule("func_def", 20);
			LeaveRule_func_def();
		}
		DebugLocation(266, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:268:1: stmt_block : INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 21);
		TraceIn("stmt_block", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken INDENT134 = default(IToken);
		IToken NEWLINE135 = default(IToken);
		IToken NEWLINE137 = default(IToken);
		IToken DEDENT138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt136 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT134_tree = default(CommonTree);
		CommonTree NEWLINE135_tree = default(CommonTree);
		CommonTree NEWLINE137_tree = default(CommonTree);
		CommonTree DEDENT138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(268, 1);
		try
		{
			// SugarCpp.g:269:2: ( INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:269:4: INDENT ( NEWLINE )* ( stmt ( NEWLINE )+ )* DEDENT
			{
			DebugLocation(269, 4);
			INDENT134=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block1564);  
			stream_INDENT.Add(INDENT134);

			DebugLocation(269, 11);
			// SugarCpp.g:269:11: ( NEWLINE )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==NEWLINE))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:269:11: NEWLINE
					{
					DebugLocation(269, 11);
					NEWLINE135=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1566);  
					stream_NEWLINE.Add(NEWLINE135);


					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }

			DebugLocation(269, 21);
			// SugarCpp.g:269:21: ( stmt ( NEWLINE )+ )*
			try { DebugEnterSubRule(61);
			while (true)
			{
				int alt61=2;
				try { DebugEnterDecision(61, false);
				int LA61_0 = input.LA(1);

				if ((LA61_0==IDENT||LA61_0==77||LA61_0==111||LA61_0==123||(LA61_0>=128 && LA61_0<=131)||(LA61_0>=136 && LA61_0<=137)||LA61_0==141||(LA61_0>=144 && LA61_0<=145)||(LA61_0>=147 && LA61_0<=149)))
				{
					alt61 = 1;
				}


				} finally { DebugExitDecision(61); }
				switch ( alt61 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:269:22: stmt ( NEWLINE )+
					{
					DebugLocation(269, 22);
					PushFollow(Follow._stmt_in_stmt_block1571);
					stmt136=stmt();
					PopFollow();

					stream_stmt.Add(stmt136.Tree);
					DebugLocation(269, 27);
					// SugarCpp.g:269:27: ( NEWLINE )+
					int cnt60=0;
					try { DebugEnterSubRule(60);
					while (true)
					{
						int alt60=2;
						try { DebugEnterDecision(60, false);
						int LA60_0 = input.LA(1);

						if ((LA60_0==NEWLINE))
						{
							alt60 = 1;
						}


						} finally { DebugExitDecision(60); }
						switch (alt60)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:269:27: NEWLINE
							{
							DebugLocation(269, 27);
							NEWLINE137=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block1573);  
							stream_NEWLINE.Add(NEWLINE137);


							}
							break;

						default:
							if (cnt60 >= 1)
								goto loop60;

							EarlyExitException eee60 = new EarlyExitException( 60, input );
							DebugRecognitionException(eee60);
							throw eee60;
						}
						cnt60++;
					}
					loop60:
						;

					} finally { DebugExitSubRule(60); }


					}
					break;

				default:
					goto loop61;
				}
			}

			loop61:
				;

			} finally { DebugExitSubRule(61); }

			DebugLocation(269, 38);
			DEDENT138=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block1578);  
			stream_DEDENT.Add(DEDENT138);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 269:45: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(269, 48);
				// SugarCpp.g:269:48: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(269, 50);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(269, 61);
				// SugarCpp.g:269:61: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(269, 61);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 21);
			LeaveRule("stmt_block", 21);
			LeaveRule_stmt_block();
		}
		DebugLocation(270, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:272:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 22);
		TraceIn("stmt", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while142 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try143 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_linq144 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_defer145 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(272, 1);
		try
		{
			// SugarCpp.g:273:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try | stmt_linq | stmt_defer )
			int alt62=7;
			try { DebugEnterDecision(62, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 77:
			case 111:
			case 141:
			case 145:
			case 147:
				{
				alt62 = 1;
				}
				break;
			case 131:
				{
				alt62 = 2;
				}
				break;
			case 129:
				{
				alt62 = 3;
				}
				break;
			case 137:
			case 149:
				{
				alt62 = 4;
				}
				break;
			case 144:
				{
				alt62 = 5;
				}
				break;
			case 130:
			case 136:
			case 148:
				{
				alt62 = 6;
				}
				break;
			case 123:
			case 128:
				{
				alt62 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 62, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(62); }
			switch (alt62)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:273:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(273, 4);
				PushFollow(Follow._stmt_expr_in_stmt1598);
				stmt_expr139=stmt_expr();
				PopFollow();

				adaptor.AddChild(root_0, stmt_expr139.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:274:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(274, 4);
				PushFollow(Follow._stmt_if_in_stmt1603);
				stmt_if140=stmt_if();
				PopFollow();

				adaptor.AddChild(root_0, stmt_if140.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:275:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(275, 4);
				PushFollow(Follow._stmt_for_in_stmt1608);
				stmt_for141=stmt_for();
				PopFollow();

				adaptor.AddChild(root_0, stmt_for141.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:276:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(276, 4);
				PushFollow(Follow._stmt_while_in_stmt1613);
				stmt_while142=stmt_while();
				PopFollow();

				adaptor.AddChild(root_0, stmt_while142.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:277:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(277, 4);
				PushFollow(Follow._stmt_try_in_stmt1618);
				stmt_try143=stmt_try();
				PopFollow();

				adaptor.AddChild(root_0, stmt_try143.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:278:4: stmt_linq
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(278, 4);
				PushFollow(Follow._stmt_linq_in_stmt1623);
				stmt_linq144=stmt_linq();
				PopFollow();

				adaptor.AddChild(root_0, stmt_linq144.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:279:4: stmt_defer
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(279, 4);
				PushFollow(Follow._stmt_defer_in_stmt1628);
				stmt_defer145=stmt_defer();
				PopFollow();

				adaptor.AddChild(root_0, stmt_defer145.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 22);
			LeaveRule("stmt", 22);
			LeaveRule_stmt();
		}
		DebugLocation(280, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:282:1: stmt_expr : (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? ;
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 23);
		TraceIn("stmt_expr", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal146 = default(IToken);
		IToken string_literal148 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr147 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal146_tree = default(CommonTree);
		CommonTree string_literal148_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_stmt_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_expr_item");
		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(282, 1);
		try
		{
			// SugarCpp.g:283:2: ( (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:283:4: (a= stmt_expr_item -> $a) ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			{
			DebugLocation(283, 4);
			// SugarCpp.g:283:4: (a= stmt_expr_item -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:283:5: a= stmt_expr_item
			{
			DebugLocation(283, 6);
			PushFollow(Follow._stmt_expr_item_in_stmt_expr1642);
			a=stmt_expr_item();
			PopFollow();

			stream_stmt_expr_item.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 283:22: -> $a
			{
				DebugLocation(283, 26);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(283, 29);
			// SugarCpp.g:283:29: ( 'if' expr -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) ) | 'while' expr -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) ) )?
			int alt63=3;
			try { DebugEnterSubRule(63);
			try { DebugEnterDecision(63, false);
			int LA63_0 = input.LA(1);

			if ((LA63_0==131))
			{
				alt63 = 1;
			}
			else if ((LA63_0==149))
			{
				alt63 = 2;
			}
			} finally { DebugExitDecision(63); }
			switch (alt63)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:283:31: 'if' expr
				{
				DebugLocation(283, 31);
				string_literal146=(IToken)Match(input,131,Follow._131_in_stmt_expr1652);  
				stream_131.Add(string_literal146);

				DebugLocation(283, 36);
				PushFollow(Follow._expr_in_stmt_expr1654);
				expr147=expr();
				PopFollow();

				stream_expr.Add(expr147.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 283:41: -> ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(283, 44);
					// SugarCpp.g:283:44: ^( Stmt_If expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(283, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(283, 54);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(283, 59);
					// SugarCpp.g:283:59: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(283, 61);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(283, 73);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:284:13: 'while' expr
				{
				DebugLocation(284, 13);
				string_literal148=(IToken)Match(input,149,Follow._149_in_stmt_expr1683);  
				stream_149.Add(string_literal148);

				DebugLocation(284, 21);
				PushFollow(Follow._expr_in_stmt_expr1685);
				expr149=expr();
				PopFollow();

				stream_expr.Add(expr149.Tree);


				{
				// AST REWRITE
				// elements: expr, stmt_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 284:26: -> ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
				{
					DebugLocation(284, 29);
					// SugarCpp.g:284:29: ^( Stmt_While expr ^( Stmt_Block $stmt_expr) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

					DebugLocation(284, 42);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(284, 47);
					// SugarCpp.g:284:47: ^( Stmt_Block $stmt_expr)
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(284, 49);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(284, 61);
					adaptor.AddChild(root_2, stream_retval.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(63); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 23);
			LeaveRule("stmt_expr", 23);
			LeaveRule_stmt_expr();
		}
		DebugLocation(286, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_expr_item();
	partial void LeaveRule_stmt_expr_item();

	// $ANTLR start "stmt_expr_item"
	// SugarCpp.g:288:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr_item()
	{
		EnterRule_stmt_expr_item();
		EnterRule("stmt_expr_item", 24);
		TraceIn("stmt_expr_item", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc150 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef153 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr_item");
		DebugLocation(288, 1);
		try
		{
			// SugarCpp.g:289:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt64=5;
			try { DebugEnterDecision(64, false);
			try
			{
				alt64 = dfa64.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(64); }
			switch (alt64)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:289:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(289, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr_item1724);
				stmt_alloc150=stmt_alloc();
				PopFollow();

				adaptor.AddChild(root_0, stmt_alloc150.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:290:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(290, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr_item1729);
				stmt_return151=stmt_return();
				PopFollow();

				adaptor.AddChild(root_0, stmt_return151.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:291:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(291, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr_item1734);
				stmt_using152=stmt_using();
				PopFollow();

				adaptor.AddChild(root_0, stmt_using152.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:292:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(292, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr_item1739);
				stmt_typedef153=stmt_typedef();
				PopFollow();

				adaptor.AddChild(root_0, stmt_typedef153.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:293:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(293, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr_item1744);
				stmt_modify154=stmt_modify();
				PopFollow();

				adaptor.AddChild(root_0, stmt_modify154.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr_item", 24);
			LeaveRule("stmt_expr_item", 24);
			LeaveRule_stmt_expr_item();
		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr_item"); }
		return retval;

	}
	// $ANTLR end "stmt_expr_item"

	partial void EnterRule_stmt_defer();
	partial void LeaveRule_stmt_defer();

	// $ANTLR start "stmt_defer"
	// SugarCpp.g:296:1: stmt_defer : ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) );
	[GrammarRule("stmt_defer")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_defer()
	{
		EnterRule_stmt_defer();
		EnterRule("stmt_defer", 25);
		TraceIn("stmt_defer", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal155 = default(IToken);
		IToken string_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt156 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt158 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal155_tree = default(CommonTree);
		CommonTree string_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_128=new RewriteRuleITokenStream(adaptor,"token 128");
		RewriteRuleITokenStream stream_123=new RewriteRuleITokenStream(adaptor,"token 123");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_defer");
		DebugLocation(296, 1);
		try
		{
			// SugarCpp.g:297:2: ( 'defer' stmt -> ^( Stmt_Defer stmt ) | 'finally' stmt -> ^( Stmt_Finally stmt ) )
			int alt65=2;
			try { DebugEnterDecision(65, false);
			int LA65_0 = input.LA(1);

			if ((LA65_0==123))
			{
				alt65 = 1;
			}
			else if ((LA65_0==128))
			{
				alt65 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 65, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(65); }
			switch (alt65)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:297:4: 'defer' stmt
				{
				DebugLocation(297, 4);
				string_literal155=(IToken)Match(input,123,Follow._123_in_stmt_defer1755);  
				stream_123.Add(string_literal155);

				DebugLocation(297, 12);
				PushFollow(Follow._stmt_in_stmt_defer1757);
				stmt156=stmt();
				PopFollow();

				stream_stmt.Add(stmt156.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 297:17: -> ^( Stmt_Defer stmt )
				{
					DebugLocation(297, 20);
					// SugarCpp.g:297:20: ^( Stmt_Defer stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(297, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Defer, "Stmt_Defer"), root_1);

					DebugLocation(297, 33);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:298:4: 'finally' stmt
				{
				DebugLocation(298, 4);
				string_literal157=(IToken)Match(input,128,Follow._128_in_stmt_defer1770);  
				stream_128.Add(string_literal157);

				DebugLocation(298, 14);
				PushFollow(Follow._stmt_in_stmt_defer1772);
				stmt158=stmt();
				PopFollow();

				stream_stmt.Add(stmt158.Tree);


				{
				// AST REWRITE
				// elements: stmt
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 298:19: -> ^( Stmt_Finally stmt )
				{
					DebugLocation(298, 22);
					// SugarCpp.g:298:22: ^( Stmt_Finally stmt )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(298, 24);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Finally, "Stmt_Finally"), root_1);

					DebugLocation(298, 37);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_defer", 25);
			LeaveRule("stmt_defer", 25);
			LeaveRule_stmt_defer();
		}
		DebugLocation(299, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_defer"); }
		return retval;

	}
	// $ANTLR end "stmt_defer"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:301:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 26);
		TraceIn("stmt_typedef", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal159 = default(IToken);
		IToken char_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident160 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name162 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal159_tree = default(CommonTree);
		CommonTree char_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_145=new RewriteRuleITokenStream(adaptor,"token 145");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(301, 1);
		try
		{
			// SugarCpp.g:302:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:302:4: 'typedef' ident '=' type_name
			{
			DebugLocation(302, 4);
			string_literal159=(IToken)Match(input,145,Follow._145_in_stmt_typedef1791);  
			stream_145.Add(string_literal159);

			DebugLocation(302, 14);
			PushFollow(Follow._ident_in_stmt_typedef1793);
			ident160=ident();
			PopFollow();

			stream_ident.Add(ident160.Tree);
			DebugLocation(302, 20);
			char_literal161=(IToken)Match(input,102,Follow._102_in_stmt_typedef1795);  
			stream_102.Add(char_literal161);

			DebugLocation(302, 24);
			PushFollow(Follow._type_name_in_stmt_typedef1797);
			type_name162=type_name();
			PopFollow();

			stream_type_name.Add(type_name162.Tree);


			{
			// AST REWRITE
			// elements: ident, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 302:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(302, 37);
				// SugarCpp.g:302:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(302, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(302, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(302, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 26);
			LeaveRule("stmt_typedef", 26);
			LeaveRule_stmt_typedef();
		}
		DebugLocation(303, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:305:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 27);
		TraceIn("stmt_using_item", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal164 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(305, 36);
		try
		{
			// SugarCpp.g:305:16: ( ident | 'namespace' )
			int alt66=2;
			try { DebugEnterDecision(66, false);
			int LA66_0 = input.LA(1);

			if ((LA66_0==IDENT))
			{
				alt66 = 1;
			}
			else if ((LA66_0==138))
			{
				alt66 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:305:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(305, 18);
				PushFollow(Follow._ident_in_stmt_using_item1816);
				ident163=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident163.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:305:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(305, 26);
				string_literal164=(IToken)Match(input,138,Follow._138_in_stmt_using_item1820); 
				string_literal164_tree = (CommonTree)adaptor.Create(string_literal164);
				adaptor.AddChild(root_0, string_literal164_tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 27);
			LeaveRule("stmt_using_item", 27);
			LeaveRule_stmt_using_item();
		}
		DebugLocation(305, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:306:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 28);
		TraceIn("stmt_using", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal165 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item166 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal165_tree = default(CommonTree);
		RewriteRuleITokenStream stream_147=new RewriteRuleITokenStream(adaptor,"token 147");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(306, 1);
		try
		{
			// SugarCpp.g:307:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:307:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(307, 4);
			string_literal165=(IToken)Match(input,147,Follow._147_in_stmt_using1828);  
			stream_147.Add(string_literal165);

			DebugLocation(307, 12);
			// SugarCpp.g:307:12: ( stmt_using_item )*
			try { DebugEnterSubRule(67);
			while (true)
			{
				int alt67=2;
				try { DebugEnterDecision(67, false);
				int LA67_0 = input.LA(1);

				if ((LA67_0==IDENT||LA67_0==138))
				{
					alt67 = 1;
				}


				} finally { DebugExitDecision(67); }
				switch ( alt67 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:307:12: stmt_using_item
					{
					DebugLocation(307, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using1830);
					stmt_using_item166=stmt_using_item();
					PopFollow();

					stream_stmt_using_item.Add(stmt_using_item166.Tree);

					}
					break;

				default:
					goto loop67;
				}
			}

			loop67:
				;

			} finally { DebugExitSubRule(67); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 307:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(307, 32);
				// SugarCpp.g:307:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(307, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(307, 45);
				// SugarCpp.g:307:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(307, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 28);
			LeaveRule("stmt_using", 28);
			LeaveRule_stmt_using();
		}
		DebugLocation(308, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:310:1: stmt_return : 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 29);
		TraceIn("stmt_return", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal167 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr168 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal167_tree = default(CommonTree);
		RewriteRuleITokenStream stream_141=new RewriteRuleITokenStream(adaptor,"token 141");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(310, 1);
		try
		{
			// SugarCpp.g:311:2: ( 'return' ( expr )? -> ^( Stmt_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:311:4: 'return' ( expr )?
			{
			DebugLocation(311, 4);
			string_literal167=(IToken)Match(input,141,Follow._141_in_stmt_return1851);  
			stream_141.Add(string_literal167);

			DebugLocation(311, 13);
			// SugarCpp.g:311:13: ( expr )?
			int alt68=2;
			try { DebugEnterSubRule(68);
			try { DebugEnterDecision(68, false);
			int LA68_0 = input.LA(1);

			if ((LA68_0==IDENT||LA68_0==NUMBER||LA68_0==STRING||LA68_0==70||LA68_0==75||LA68_0==77||LA68_0==79||(LA68_0>=81 && LA68_0<=82)||(LA68_0>=85 && LA68_0<=86)||LA68_0==111||LA68_0==139||LA68_0==153))
			{
				alt68 = 1;
			}
			} finally { DebugExitDecision(68); }
			switch (alt68)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:311:13: expr
				{
				DebugLocation(311, 13);
				PushFollow(Follow._expr_in_stmt_return1853);
				expr168=expr();
				PopFollow();

				stream_expr.Add(expr168.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(68); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 311:19: -> ^( Stmt_Return ( expr )? )
			{
				DebugLocation(311, 22);
				// SugarCpp.g:311:22: ^( Stmt_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(311, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Return, "Stmt_Return"), root_1);

				DebugLocation(311, 36);
				// SugarCpp.g:311:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(311, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 29);
			LeaveRule("stmt_return", 29);
			LeaveRule_stmt_return();
		}
		DebugLocation(312, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:314:1: stmt_if : 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 30);
		TraceIn("stmt_if", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal169 = default(IToken);
		IToken NEWLINE171 = default(IToken);
		IToken NEWLINE173 = default(IToken);
		IToken string_literal174 = default(IToken);
		IToken string_literal176 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr170 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block172 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block175 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt177 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal169_tree = default(CommonTree);
		CommonTree NEWLINE171_tree = default(CommonTree);
		CommonTree NEWLINE173_tree = default(CommonTree);
		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal176_tree = default(CommonTree);
		RewriteRuleITokenStream stream_126=new RewriteRuleITokenStream(adaptor,"token 126");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_131=new RewriteRuleITokenStream(adaptor,"token 131");
		RewriteRuleITokenStream stream_142=new RewriteRuleITokenStream(adaptor,"token 142");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(314, 1);
		try
		{
			// SugarCpp.g:315:2: ( 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:315:4: 'if' expr ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
			{
			DebugLocation(315, 4);
			string_literal169=(IToken)Match(input,131,Follow._131_in_stmt_if1874);  
			stream_131.Add(string_literal169);

			DebugLocation(315, 9);
			PushFollow(Follow._expr_in_stmt_if1876);
			expr170=expr();
			PopFollow();

			stream_expr.Add(expr170.Tree);
			DebugLocation(315, 14);
			// SugarCpp.g:315:14: ( ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) | 'then' stmt -> ^( Stmt_If expr ^( Stmt_Block stmt ) ) )
			int alt72=2;
			try { DebugEnterSubRule(72);
			try { DebugEnterDecision(72, false);
			int LA72_0 = input.LA(1);

			if ((LA72_0==NEWLINE))
			{
				alt72 = 1;
			}
			else if ((LA72_0==142))
			{
				alt72 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 72, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(72); }
			switch (alt72)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:315:15: ( NEWLINE )+ stmt_block ( ( NEWLINE )* 'else' stmt_block )?
				{
				DebugLocation(315, 15);
				// SugarCpp.g:315:15: ( NEWLINE )+
				int cnt69=0;
				try { DebugEnterSubRule(69);
				while (true)
				{
					int alt69=2;
					try { DebugEnterDecision(69, false);
					int LA69_0 = input.LA(1);

					if ((LA69_0==NEWLINE))
					{
						alt69 = 1;
					}


					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:315:15: NEWLINE
						{
						DebugLocation(315, 15);
						NEWLINE171=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1879);  
						stream_NEWLINE.Add(NEWLINE171);


						}
						break;

					default:
						if (cnt69 >= 1)
							goto loop69;

						EarlyExitException eee69 = new EarlyExitException( 69, input );
						DebugRecognitionException(eee69);
						throw eee69;
					}
					cnt69++;
				}
				loop69:
					;

				} finally { DebugExitSubRule(69); }

				DebugLocation(315, 24);
				PushFollow(Follow._stmt_block_in_stmt_if1882);
				stmt_block172=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block172.Tree);
				DebugLocation(315, 35);
				// SugarCpp.g:315:35: ( ( NEWLINE )* 'else' stmt_block )?
				int alt71=2;
				try { DebugEnterSubRule(71);
				try { DebugEnterDecision(71, false);
				try
				{
					alt71 = dfa71.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(71); }
				switch (alt71)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:315:36: ( NEWLINE )* 'else' stmt_block
					{
					DebugLocation(315, 36);
					// SugarCpp.g:315:36: ( NEWLINE )*
					try { DebugEnterSubRule(70);
					while (true)
					{
						int alt70=2;
						try { DebugEnterDecision(70, false);
						int LA70_0 = input.LA(1);

						if ((LA70_0==NEWLINE))
						{
							alt70 = 1;
						}


						} finally { DebugExitDecision(70); }
						switch ( alt70 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:315:36: NEWLINE
							{
							DebugLocation(315, 36);
							NEWLINE173=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_if1885);  
							stream_NEWLINE.Add(NEWLINE173);


							}
							break;

						default:
							goto loop70;
						}
					}

					loop70:
						;

					} finally { DebugExitSubRule(70); }

					DebugLocation(315, 45);
					string_literal174=(IToken)Match(input,126,Follow._126_in_stmt_if1888);  
					stream_126.Add(string_literal174);

					DebugLocation(315, 52);
					PushFollow(Follow._stmt_block_in_stmt_if1890);
					stmt_block175=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block175.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(71); }



				{
				// AST REWRITE
				// elements: stmt_block, stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 315:65: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
					DebugLocation(315, 68);
					// SugarCpp.g:315:68: ^( Stmt_If expr stmt_block ( stmt_block )? )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(315, 70);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(315, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(315, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());
					DebugLocation(315, 94);
					// SugarCpp.g:315:94: ( stmt_block )?
					if (stream_stmt_block.HasNext)
					{
						DebugLocation(315, 94);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					}
					stream_stmt_block.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:316:16: 'then' stmt
				{
				DebugLocation(316, 16);
				string_literal176=(IToken)Match(input,142,Follow._142_in_stmt_if1922);  
				stream_142.Add(string_literal176);

				DebugLocation(316, 23);
				PushFollow(Follow._stmt_in_stmt_if1924);
				stmt177=stmt();
				PopFollow();

				stream_stmt.Add(stmt177.Tree);


				{
				// AST REWRITE
				// elements: stmt, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 316:28: -> ^( Stmt_If expr ^( Stmt_Block stmt ) )
				{
					DebugLocation(316, 31);
					// SugarCpp.g:316:31: ^( Stmt_If expr ^( Stmt_Block stmt ) )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(316, 33);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

					DebugLocation(316, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(316, 46);
					// SugarCpp.g:316:46: ^( Stmt_Block stmt )
					{
					CommonTree root_2 = (CommonTree)adaptor.Nil();
					DebugLocation(316, 48);
					root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

					DebugLocation(316, 59);
					adaptor.AddChild(root_2, stream_stmt.NextTree());

					adaptor.AddChild(root_1, root_2);
					}

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(72); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 30);
			LeaveRule("stmt_if", 30);
			LeaveRule_stmt_if();
		}
		DebugLocation(318, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:320:1: stmt_while : ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) );
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 31);
		TraceIn("stmt_while", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal178 = default(IToken);
		IToken NEWLINE180 = default(IToken);
		IToken string_literal182 = default(IToken);
		IToken string_literal184 = default(IToken);
		IToken NEWLINE185 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr179 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block181 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt183 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block186 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal178_tree = default(CommonTree);
		CommonTree NEWLINE180_tree = default(CommonTree);
		CommonTree string_literal182_tree = default(CommonTree);
		CommonTree string_literal184_tree = default(CommonTree);
		CommonTree NEWLINE185_tree = default(CommonTree);
		RewriteRuleITokenStream stream_149=new RewriteRuleITokenStream(adaptor,"token 149");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_137=new RewriteRuleITokenStream(adaptor,"token 137");
		RewriteRuleITokenStream stream_124=new RewriteRuleITokenStream(adaptor,"token 124");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(320, 1);
		try
		{
			// SugarCpp.g:321:2: ( 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) ) | 'loop' ( NEWLINE )+ stmt_block -> ^( Stmt_Loop stmt_block ) )
			int alt76=2;
			try { DebugEnterDecision(76, false);
			int LA76_0 = input.LA(1);

			if ((LA76_0==149))
			{
				alt76 = 1;
			}
			else if ((LA76_0==137))
			{
				alt76 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 76, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(76); }
			switch (alt76)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:321:4: 'while' expr ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				{
				DebugLocation(321, 4);
				string_literal178=(IToken)Match(input,149,Follow._149_in_stmt_while1955);  
				stream_149.Add(string_literal178);

				DebugLocation(321, 12);
				PushFollow(Follow._expr_in_stmt_while1957);
				expr179=expr();
				PopFollow();

				stream_expr.Add(expr179.Tree);
				DebugLocation(321, 17);
				// SugarCpp.g:321:17: ( ( NEWLINE )+ stmt_block -> ^( Stmt_While expr stmt_block ) | 'do' stmt -> ^( Stmt_While expr ^( Stmt_Block stmt ) ) )
				int alt74=2;
				try { DebugEnterSubRule(74);
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==NEWLINE))
				{
					alt74 = 1;
				}
				else if ((LA74_0==124))
				{
					alt74 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 74, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(74); }
				switch (alt74)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:321:19: ( NEWLINE )+ stmt_block
					{
					DebugLocation(321, 19);
					// SugarCpp.g:321:19: ( NEWLINE )+
					int cnt73=0;
					try { DebugEnterSubRule(73);
					while (true)
					{
						int alt73=2;
						try { DebugEnterDecision(73, false);
						int LA73_0 = input.LA(1);

						if ((LA73_0==NEWLINE))
						{
							alt73 = 1;
						}


						} finally { DebugExitDecision(73); }
						switch (alt73)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:321:19: NEWLINE
							{
							DebugLocation(321, 19);
							NEWLINE180=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while1961);  
							stream_NEWLINE.Add(NEWLINE180);


							}
							break;

						default:
							if (cnt73 >= 1)
								goto loop73;

							EarlyExitException eee73 = new EarlyExitException( 73, input );
							DebugRecognitionException(eee73);
							throw eee73;
						}
						cnt73++;
					}
					loop73:
						;

					} finally { DebugExitSubRule(73); }

					DebugLocation(321, 28);
					PushFollow(Follow._stmt_block_in_stmt_while1964);
					stmt_block181=stmt_block();
					PopFollow();

					stream_stmt_block.Add(stmt_block181.Tree);


					{
					// AST REWRITE
					// elements: expr, stmt_block
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 321:39: -> ^( Stmt_While expr stmt_block )
					{
						DebugLocation(321, 42);
						// SugarCpp.g:321:42: ^( Stmt_While expr stmt_block )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(321, 44);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(321, 55);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(321, 60);
						adaptor.AddChild(root_1, stream_stmt_block.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:322:13: 'do' stmt
					{
					DebugLocation(322, 13);
					string_literal182=(IToken)Match(input,124,Follow._124_in_stmt_while1988);  
					stream_124.Add(string_literal182);

					DebugLocation(322, 18);
					PushFollow(Follow._stmt_in_stmt_while1990);
					stmt183=stmt();
					PopFollow();

					stream_stmt.Add(stmt183.Tree);


					{
					// AST REWRITE
					// elements: stmt, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 322:23: -> ^( Stmt_While expr ^( Stmt_Block stmt ) )
					{
						DebugLocation(322, 26);
						// SugarCpp.g:322:26: ^( Stmt_While expr ^( Stmt_Block stmt ) )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(322, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

						DebugLocation(322, 39);
						adaptor.AddChild(root_1, stream_expr.NextTree());
						DebugLocation(322, 44);
						// SugarCpp.g:322:44: ^( Stmt_Block stmt )
						{
						CommonTree root_2 = (CommonTree)adaptor.Nil();
						DebugLocation(322, 46);
						root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_2);

						DebugLocation(322, 57);
						adaptor.AddChild(root_2, stream_stmt.NextTree());

						adaptor.AddChild(root_1, root_2);
						}

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(74); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:324:4: 'loop' ( NEWLINE )+ stmt_block
				{
				DebugLocation(324, 4);
				string_literal184=(IToken)Match(input,137,Follow._137_in_stmt_while2018);  
				stream_137.Add(string_literal184);

				DebugLocation(324, 11);
				// SugarCpp.g:324:11: ( NEWLINE )+
				int cnt75=0;
				try { DebugEnterSubRule(75);
				while (true)
				{
					int alt75=2;
					try { DebugEnterDecision(75, false);
					int LA75_0 = input.LA(1);

					if ((LA75_0==NEWLINE))
					{
						alt75 = 1;
					}


					} finally { DebugExitDecision(75); }
					switch (alt75)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:324:11: NEWLINE
						{
						DebugLocation(324, 11);
						NEWLINE185=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_while2020);  
						stream_NEWLINE.Add(NEWLINE185);


						}
						break;

					default:
						if (cnt75 >= 1)
							goto loop75;

						EarlyExitException eee75 = new EarlyExitException( 75, input );
						DebugRecognitionException(eee75);
						throw eee75;
					}
					cnt75++;
				}
				loop75:
					;

				} finally { DebugExitSubRule(75); }

				DebugLocation(324, 20);
				PushFollow(Follow._stmt_block_in_stmt_while2023);
				stmt_block186=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block186.Tree);


				{
				// AST REWRITE
				// elements: stmt_block
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 324:31: -> ^( Stmt_Loop stmt_block )
				{
					DebugLocation(324, 34);
					// SugarCpp.g:324:34: ^( Stmt_Loop stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(324, 36);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Loop, "Stmt_Loop"), root_1);

					DebugLocation(324, 46);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 31);
			LeaveRule("stmt_while", 31);
			LeaveRule_stmt_while();
		}
		DebugLocation(325, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:327:1: stmt_for : 'for' ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 32);
		TraceIn("stmt_for", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal187 = default(IToken);
		IToken char_literal188 = default(IToken);
		IToken string_literal190 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken string_literal194 = default(IToken);
		IToken NEWLINE196 = default(IToken);
		IToken string_literal198 = default(IToken);
		IToken string_literal200 = default(IToken);
		IToken NEWLINE202 = default(IToken);
		IToken NEWLINE204 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident189 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr191 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr193 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr195 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block197 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block203 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block205 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal187_tree = default(CommonTree);
		CommonTree char_literal188_tree = default(CommonTree);
		CommonTree string_literal190_tree = default(CommonTree);
		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree string_literal194_tree = default(CommonTree);
		CommonTree NEWLINE196_tree = default(CommonTree);
		CommonTree string_literal198_tree = default(CommonTree);
		CommonTree string_literal200_tree = default(CommonTree);
		CommonTree NEWLINE202_tree = default(CommonTree);
		CommonTree NEWLINE204_tree = default(CommonTree);
		RewriteRuleITokenStream stream_143=new RewriteRuleITokenStream(adaptor,"token 143");
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_125=new RewriteRuleITokenStream(adaptor,"token 125");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_129=new RewriteRuleITokenStream(adaptor,"token 129");
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleITokenStream stream_119=new RewriteRuleITokenStream(adaptor,"token 119");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(327, 1);
		try
		{
			// SugarCpp.g:328:2: ( 'for' ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:328:4: 'for' ( '&' )? ident '<-' expr ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
			{
			DebugLocation(328, 4);
			string_literal187=(IToken)Match(input,129,Follow._129_in_stmt_for2042);  
			stream_129.Add(string_literal187);

			DebugLocation(328, 10);
			// SugarCpp.g:328:10: ( '&' )?
			int alt77=2;
			try { DebugEnterSubRule(77);
			try { DebugEnterDecision(77, false);
			int LA77_0 = input.LA(1);

			if ((LA77_0==75))
			{
				alt77 = 1;
			}
			} finally { DebugExitDecision(77); }
			switch (alt77)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:328:10: '&'
				{
				DebugLocation(328, 10);
				char_literal188=(IToken)Match(input,75,Follow._75_in_stmt_for2044);  
				stream_75.Add(char_literal188);


				}
				break;

			}
			} finally { DebugExitSubRule(77); }

			DebugLocation(328, 15);
			PushFollow(Follow._ident_in_stmt_for2047);
			ident189=ident();
			PopFollow();

			stream_ident.Add(ident189.Tree);
			DebugLocation(328, 21);
			string_literal190=(IToken)Match(input,98,Follow._98_in_stmt_for2049);  
			stream_98.Add(string_literal190);

			DebugLocation(328, 26);
			PushFollow(Follow._expr_in_stmt_for2051);
			expr191=expr();
			PopFollow();

			stream_expr.Add(expr191.Tree);
			DebugLocation(328, 31);
			// SugarCpp.g:328:31: ( 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block ) | 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block ) | ( NEWLINE )+ stmt_block -> ^( Stmt_ForEach '&' ident expr stmt_block ) )
			int alt83=3;
			try { DebugEnterSubRule(83);
			try { DebugEnterDecision(83, false);
			switch (input.LA(1))
			{
			case 143:
				{
				alt83 = 1;
				}
				break;
			case 125:
				{
				alt83 = 2;
				}
				break;
			case NEWLINE:
				{
				alt83 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 83, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(83); }
			switch (alt83)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:328:33: 'to' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(328, 33);
				string_literal192=(IToken)Match(input,143,Follow._143_in_stmt_for2055);  
				stream_143.Add(string_literal192);

				DebugLocation(328, 38);
				PushFollow(Follow._expr_in_stmt_for2057);
				expr193=expr();
				PopFollow();

				stream_expr.Add(expr193.Tree);
				DebugLocation(328, 43);
				// SugarCpp.g:328:43: ( 'by' expr )?
				int alt78=2;
				try { DebugEnterSubRule(78);
				try { DebugEnterDecision(78, false);
				int LA78_0 = input.LA(1);

				if ((LA78_0==119))
				{
					alt78 = 1;
				}
				} finally { DebugExitDecision(78); }
				switch (alt78)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:328:44: 'by' expr
					{
					DebugLocation(328, 44);
					string_literal194=(IToken)Match(input,119,Follow._119_in_stmt_for2060);  
					stream_119.Add(string_literal194);

					DebugLocation(328, 49);
					PushFollow(Follow._expr_in_stmt_for2062);
					expr195=expr();
					PopFollow();

					stream_expr.Add(expr195.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(78); }

				DebugLocation(328, 56);
				// SugarCpp.g:328:56: ( NEWLINE )+
				int cnt79=0;
				try { DebugEnterSubRule(79);
				while (true)
				{
					int alt79=2;
					try { DebugEnterDecision(79, false);
					int LA79_0 = input.LA(1);

					if ((LA79_0==NEWLINE))
					{
						alt79 = 1;
					}


					} finally { DebugExitDecision(79); }
					switch (alt79)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:328:56: NEWLINE
						{
						DebugLocation(328, 56);
						NEWLINE196=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2066);  
						stream_NEWLINE.Add(NEWLINE196);


						}
						break;

					default:
						if (cnt79 >= 1)
							goto loop79;

						EarlyExitException eee79 = new EarlyExitException( 79, input );
						DebugRecognitionException(eee79);
						throw eee79;
					}
					cnt79++;
				}
				loop79:
					;

				} finally { DebugExitSubRule(79); }

				DebugLocation(328, 65);
				PushFollow(Follow._stmt_block_in_stmt_for2069);
				stmt_block197=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block197.Tree);


				{
				// AST REWRITE
				// elements: expr, expr, ident, stmt_block, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 328:76: -> ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
				{
					DebugLocation(328, 79);
					// SugarCpp.g:328:79: ^( Stmt_For_To ident expr expr ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(328, 81);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_To, "Stmt_For_To"), root_1);

					DebugLocation(328, 93);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(328, 99);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(328, 104);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(328, 109);
					// SugarCpp.g:328:109: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(328, 109);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(328, 115);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:329:33: 'downto' expr ( 'by' expr )? ( NEWLINE )+ stmt_block
				{
				DebugLocation(329, 33);
				string_literal198=(IToken)Match(input,125,Follow._125_in_stmt_for2120);  
				stream_125.Add(string_literal198);

				DebugLocation(329, 42);
				PushFollow(Follow._expr_in_stmt_for2122);
				expr199=expr();
				PopFollow();

				stream_expr.Add(expr199.Tree);
				DebugLocation(329, 47);
				// SugarCpp.g:329:47: ( 'by' expr )?
				int alt80=2;
				try { DebugEnterSubRule(80);
				try { DebugEnterDecision(80, false);
				int LA80_0 = input.LA(1);

				if ((LA80_0==119))
				{
					alt80 = 1;
				}
				} finally { DebugExitDecision(80); }
				switch (alt80)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:329:48: 'by' expr
					{
					DebugLocation(329, 48);
					string_literal200=(IToken)Match(input,119,Follow._119_in_stmt_for2125);  
					stream_119.Add(string_literal200);

					DebugLocation(329, 53);
					PushFollow(Follow._expr_in_stmt_for2127);
					expr201=expr();
					PopFollow();

					stream_expr.Add(expr201.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(80); }

				DebugLocation(329, 60);
				// SugarCpp.g:329:60: ( NEWLINE )+
				int cnt81=0;
				try { DebugEnterSubRule(81);
				while (true)
				{
					int alt81=2;
					try { DebugEnterDecision(81, false);
					int LA81_0 = input.LA(1);

					if ((LA81_0==NEWLINE))
					{
						alt81 = 1;
					}


					} finally { DebugExitDecision(81); }
					switch (alt81)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:329:60: NEWLINE
						{
						DebugLocation(329, 60);
						NEWLINE202=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2131);  
						stream_NEWLINE.Add(NEWLINE202);


						}
						break;

					default:
						if (cnt81 >= 1)
							goto loop81;

						EarlyExitException eee81 = new EarlyExitException( 81, input );
						DebugRecognitionException(eee81);
						throw eee81;
					}
					cnt81++;
				}
				loop81:
					;

				} finally { DebugExitSubRule(81); }

				DebugLocation(329, 69);
				PushFollow(Follow._stmt_block_in_stmt_for2134);
				stmt_block203=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block203.Tree);


				{
				// AST REWRITE
				// elements: stmt_block, expr, ident, expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 329:80: -> ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
				{
					DebugLocation(329, 83);
					// SugarCpp.g:329:83: ^( Stmt_For_Down_To ident expr expr ( expr )? stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(329, 85);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For_Down_To, "Stmt_For_Down_To"), root_1);

					DebugLocation(329, 102);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(329, 108);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(329, 113);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(329, 118);
					// SugarCpp.g:329:118: ( expr )?
					if (stream_expr.HasNext)
					{
						DebugLocation(329, 118);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();
					DebugLocation(329, 124);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:330:33: ( NEWLINE )+ stmt_block
				{
				DebugLocation(330, 33);
				// SugarCpp.g:330:33: ( NEWLINE )+
				int cnt82=0;
				try { DebugEnterSubRule(82);
				while (true)
				{
					int alt82=2;
					try { DebugEnterDecision(82, false);
					int LA82_0 = input.LA(1);

					if ((LA82_0==NEWLINE))
					{
						alt82 = 1;
					}


					} finally { DebugExitDecision(82); }
					switch (alt82)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:330:33: NEWLINE
						{
						DebugLocation(330, 33);
						NEWLINE204=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_for2185);  
						stream_NEWLINE.Add(NEWLINE204);


						}
						break;

					default:
						if (cnt82 >= 1)
							goto loop82;

						EarlyExitException eee82 = new EarlyExitException( 82, input );
						DebugRecognitionException(eee82);
						throw eee82;
					}
					cnt82++;
				}
				loop82:
					;

				} finally { DebugExitSubRule(82); }

				DebugLocation(330, 42);
				PushFollow(Follow._stmt_block_in_stmt_for2188);
				stmt_block205=stmt_block();
				PopFollow();

				stream_stmt_block.Add(stmt_block205.Tree);


				{
				// AST REWRITE
				// elements: 75, expr, stmt_block, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 330:53: -> ^( Stmt_ForEach '&' ident expr stmt_block )
				{
					DebugLocation(330, 56);
					// SugarCpp.g:330:56: ^( Stmt_ForEach '&' ident expr stmt_block )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(330, 58);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

					DebugLocation(330, 71);
					adaptor.AddChild(root_1, stream_75.NextNode());
					DebugLocation(330, 75);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(330, 81);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(330, 86);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(83); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 32);
			LeaveRule("stmt_for", 32);
			LeaveRule_stmt_for();
		}
		DebugLocation(332, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:334:1: stmt_try : 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 33);
		TraceIn("stmt_try", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal206 = default(IToken);
		IToken string_literal208 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc209 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block210 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal206_tree = default(CommonTree);
		CommonTree string_literal208_tree = default(CommonTree);
		RewriteRuleITokenStream stream_144=new RewriteRuleITokenStream(adaptor,"token 144");
		RewriteRuleITokenStream stream_120=new RewriteRuleITokenStream(adaptor,"token 120");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(334, 1);
		try
		{
			// SugarCpp.g:335:2: ( 'try' stmt_block 'catch' stmt_alloc stmt_block -> ^( Stmt_Try stmt_block stmt_alloc stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:335:4: 'try' stmt_block 'catch' stmt_alloc stmt_block
			{
			DebugLocation(335, 4);
			string_literal206=(IToken)Match(input,144,Follow._144_in_stmt_try2227);  
			stream_144.Add(string_literal206);

			DebugLocation(335, 10);
			PushFollow(Follow._stmt_block_in_stmt_try2229);
			stmt_block207=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block207.Tree);
			DebugLocation(335, 21);
			string_literal208=(IToken)Match(input,120,Follow._120_in_stmt_try2231);  
			stream_120.Add(string_literal208);

			DebugLocation(335, 29);
			PushFollow(Follow._stmt_alloc_in_stmt_try2233);
			stmt_alloc209=stmt_alloc();
			PopFollow();

			stream_stmt_alloc.Add(stmt_alloc209.Tree);
			DebugLocation(335, 40);
			PushFollow(Follow._stmt_block_in_stmt_try2235);
			stmt_block210=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block210.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, stmt_alloc, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 335:51: -> ^( Stmt_Try stmt_block stmt_alloc stmt_block )
			{
				DebugLocation(335, 54);
				// SugarCpp.g:335:54: ^( Stmt_Try stmt_block stmt_alloc stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(335, 56);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(335, 65);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(335, 76);
				adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());
				DebugLocation(335, 87);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 33);
			LeaveRule("stmt_try", 33);
			LeaveRule_stmt_try();
		}
		DebugLocation(336, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_linq_item();
	partial void LeaveRule_linq_item();

	// $ANTLR start "linq_item"
	// SugarCpp.g:338:1: linq_item : ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) );
	[GrammarRule("linq_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_item()
	{
		EnterRule_linq_item();
		EnterRule("linq_item", 34);
		TraceIn("linq_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal211 = default(IToken);
		IToken string_literal213 = default(IToken);
		IToken string_literal215 = default(IToken);
		IToken char_literal217 = default(IToken);
		IToken string_literal219 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr214 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident216 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr218 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr220 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal211_tree = default(CommonTree);
		CommonTree string_literal213_tree = default(CommonTree);
		CommonTree string_literal215_tree = default(CommonTree);
		CommonTree char_literal217_tree = default(CommonTree);
		CommonTree string_literal219_tree = default(CommonTree);
		RewriteRuleITokenStream stream_133=new RewriteRuleITokenStream(adaptor,"token 133");
		RewriteRuleITokenStream stream_148=new RewriteRuleITokenStream(adaptor,"token 148");
		RewriteRuleITokenStream stream_136=new RewriteRuleITokenStream(adaptor,"token 136");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_130=new RewriteRuleITokenStream(adaptor,"token 130");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "linq_item");
		DebugLocation(338, 1);
		try
		{
			// SugarCpp.g:339:2: ( 'from' expr 'in' expr -> ^( Linq_From expr expr ) | 'let' ident '=' expr -> ^( Linq_Let ident expr ) | 'where' expr -> ^( Linq_Where expr ) )
			int alt84=3;
			try { DebugEnterDecision(84, false);
			switch (input.LA(1))
			{
			case 130:
				{
				alt84 = 1;
				}
				break;
			case 136:
				{
				alt84 = 2;
				}
				break;
			case 148:
				{
				alt84 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 84, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(84); }
			switch (alt84)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:339:4: 'from' expr 'in' expr
				{
				DebugLocation(339, 4);
				string_literal211=(IToken)Match(input,130,Follow._130_in_linq_item2258);  
				stream_130.Add(string_literal211);

				DebugLocation(339, 11);
				PushFollow(Follow._expr_in_linq_item2260);
				expr212=expr();
				PopFollow();

				stream_expr.Add(expr212.Tree);
				DebugLocation(339, 16);
				string_literal213=(IToken)Match(input,133,Follow._133_in_linq_item2262);  
				stream_133.Add(string_literal213);

				DebugLocation(339, 21);
				PushFollow(Follow._expr_in_linq_item2264);
				expr214=expr();
				PopFollow();

				stream_expr.Add(expr214.Tree);


				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 339:26: -> ^( Linq_From expr expr )
				{
					DebugLocation(339, 29);
					// SugarCpp.g:339:29: ^( Linq_From expr expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(339, 31);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_From, "Linq_From"), root_1);

					DebugLocation(339, 41);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(339, 46);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:340:4: 'let' ident '=' expr
				{
				DebugLocation(340, 4);
				string_literal215=(IToken)Match(input,136,Follow._136_in_linq_item2279);  
				stream_136.Add(string_literal215);

				DebugLocation(340, 10);
				PushFollow(Follow._ident_in_linq_item2281);
				ident216=ident();
				PopFollow();

				stream_ident.Add(ident216.Tree);
				DebugLocation(340, 16);
				char_literal217=(IToken)Match(input,102,Follow._102_in_linq_item2283);  
				stream_102.Add(char_literal217);

				DebugLocation(340, 20);
				PushFollow(Follow._expr_in_linq_item2285);
				expr218=expr();
				PopFollow();

				stream_expr.Add(expr218.Tree);


				{
				// AST REWRITE
				// elements: expr, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 340:25: -> ^( Linq_Let ident expr )
				{
					DebugLocation(340, 28);
					// SugarCpp.g:340:28: ^( Linq_Let ident expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(340, 30);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Let, "Linq_Let"), root_1);

					DebugLocation(340, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());
					DebugLocation(340, 45);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:341:4: 'where' expr
				{
				DebugLocation(341, 4);
				string_literal219=(IToken)Match(input,148,Follow._148_in_linq_item2300);  
				stream_148.Add(string_literal219);

				DebugLocation(341, 12);
				PushFollow(Follow._expr_in_linq_item2302);
				expr220=expr();
				PopFollow();

				stream_expr.Add(expr220.Tree);


				{
				// AST REWRITE
				// elements: expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 341:17: -> ^( Linq_Where expr )
				{
					DebugLocation(341, 20);
					// SugarCpp.g:341:20: ^( Linq_Where expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(341, 22);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Where, "Linq_Where"), root_1);

					DebugLocation(341, 33);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_item", 34);
			LeaveRule("linq_item", 34);
			LeaveRule_linq_item();
		}
		DebugLocation(342, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_item"); }
		return retval;

	}
	// $ANTLR end "linq_item"

	partial void EnterRule_linq_prefix();
	partial void LeaveRule_linq_prefix();

	// $ANTLR start "linq_prefix"
	// SugarCpp.g:344:1: linq_prefix : ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) ;
	[GrammarRule("linq_prefix")]
	private AstParserRuleReturnScope<CommonTree, IToken> linq_prefix()
	{
		EnterRule_linq_prefix();
		EnterRule("linq_prefix", 35);
		TraceIn("linq_prefix", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE223 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item221 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> linq_item222 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE223_tree = default(CommonTree);
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleSubtreeStream stream_linq_item=new RewriteRuleSubtreeStream(adaptor,"rule linq_item");
		try { DebugEnterRule(GrammarFileName, "linq_prefix");
		DebugLocation(344, 1);
		try
		{
			// SugarCpp.g:345:2: ( ( linq_item ( linq_item )* ( NEWLINE )+ )+ -> ^( Linq_Prefix ( linq_item )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:345:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			{
			DebugLocation(345, 4);
			// SugarCpp.g:345:4: ( linq_item ( linq_item )* ( NEWLINE )+ )+
			int cnt87=0;
			try { DebugEnterSubRule(87);
			while (true)
			{
				int alt87=2;
				try { DebugEnterDecision(87, false);
				int LA87_0 = input.LA(1);

				if ((LA87_0==130||LA87_0==136||LA87_0==148))
				{
					alt87 = 1;
				}


				} finally { DebugExitDecision(87); }
				switch (alt87)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:345:5: linq_item ( linq_item )* ( NEWLINE )+
					{
					DebugLocation(345, 5);
					PushFollow(Follow._linq_item_in_linq_prefix2322);
					linq_item221=linq_item();
					PopFollow();

					stream_linq_item.Add(linq_item221.Tree);
					DebugLocation(345, 15);
					// SugarCpp.g:345:15: ( linq_item )*
					try { DebugEnterSubRule(85);
					while (true)
					{
						int alt85=2;
						try { DebugEnterDecision(85, false);
						int LA85_0 = input.LA(1);

						if ((LA85_0==130||LA85_0==136||LA85_0==148))
						{
							alt85 = 1;
						}


						} finally { DebugExitDecision(85); }
						switch ( alt85 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:345:15: linq_item
							{
							DebugLocation(345, 15);
							PushFollow(Follow._linq_item_in_linq_prefix2324);
							linq_item222=linq_item();
							PopFollow();

							stream_linq_item.Add(linq_item222.Tree);

							}
							break;

						default:
							goto loop85;
						}
					}

					loop85:
						;

					} finally { DebugExitSubRule(85); }

					DebugLocation(345, 26);
					// SugarCpp.g:345:26: ( NEWLINE )+
					int cnt86=0;
					try { DebugEnterSubRule(86);
					while (true)
					{
						int alt86=2;
						try { DebugEnterDecision(86, false);
						int LA86_0 = input.LA(1);

						if ((LA86_0==NEWLINE))
						{
							alt86 = 1;
						}


						} finally { DebugExitDecision(86); }
						switch (alt86)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:345:26: NEWLINE
							{
							DebugLocation(345, 26);
							NEWLINE223=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_linq_prefix2327);  
							stream_NEWLINE.Add(NEWLINE223);


							}
							break;

						default:
							if (cnt86 >= 1)
								goto loop86;

							EarlyExitException eee86 = new EarlyExitException( 86, input );
							DebugRecognitionException(eee86);
							throw eee86;
						}
						cnt86++;
					}
					loop86:
						;

					} finally { DebugExitSubRule(86); }


					}
					break;

				default:
					if (cnt87 >= 1)
						goto loop87;

					EarlyExitException eee87 = new EarlyExitException( 87, input );
					DebugRecognitionException(eee87);
					throw eee87;
				}
				cnt87++;
			}
			loop87:
				;

			} finally { DebugExitSubRule(87); }



			{
			// AST REWRITE
			// elements: linq_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 345:37: -> ^( Linq_Prefix ( linq_item )+ )
			{
				DebugLocation(345, 40);
				// SugarCpp.g:345:40: ^( Linq_Prefix ( linq_item )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(345, 42);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Linq_Prefix, "Linq_Prefix"), root_1);

				DebugLocation(345, 54);
				if (!(stream_linq_item.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_linq_item.HasNext )
				{
					DebugLocation(345, 54);
					adaptor.AddChild(root_1, stream_linq_item.NextTree());

				}
				stream_linq_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("linq_prefix", 35);
			LeaveRule("linq_prefix", 35);
			LeaveRule_linq_prefix();
		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "linq_prefix"); }
		return retval;

	}
	// $ANTLR end "linq_prefix"

	partial void EnterRule_stmt_linq();
	partial void LeaveRule_stmt_linq();

	// $ANTLR start "stmt_linq"
	// SugarCpp.g:348:1: stmt_linq : linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) ;
	[GrammarRule("stmt_linq")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_linq()
	{
		EnterRule_stmt_linq();
		EnterRule("stmt_linq", 36);
		TraceIn("stmt_linq", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> linq_prefix224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block225 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_linq_prefix=new RewriteRuleSubtreeStream(adaptor,"rule linq_prefix");
		try { DebugEnterRule(GrammarFileName, "stmt_linq");
		DebugLocation(348, 1);
		try
		{
			// SugarCpp.g:349:2: ( linq_prefix stmt_block -> ^( Stmt_Linq linq_prefix stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:349:4: linq_prefix stmt_block
			{
			DebugLocation(349, 4);
			PushFollow(Follow._linq_prefix_in_stmt_linq2350);
			linq_prefix224=linq_prefix();
			PopFollow();

			stream_linq_prefix.Add(linq_prefix224.Tree);
			DebugLocation(349, 16);
			PushFollow(Follow._stmt_block_in_stmt_linq2352);
			stmt_block225=stmt_block();
			PopFollow();

			stream_stmt_block.Add(stmt_block225.Tree);


			{
			// AST REWRITE
			// elements: linq_prefix, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 349:27: -> ^( Stmt_Linq linq_prefix stmt_block )
			{
				DebugLocation(349, 30);
				// SugarCpp.g:349:30: ^( Stmt_Linq linq_prefix stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(349, 32);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Linq, "Stmt_Linq"), root_1);

				DebugLocation(349, 42);
				adaptor.AddChild(root_1, stream_linq_prefix.NextTree());
				DebugLocation(349, 54);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_linq", 36);
			LeaveRule("stmt_linq", 36);
			LeaveRule_stmt_linq();
		}
		DebugLocation(350, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_linq"); }
		return retval;

	}
	// $ANTLR end "stmt_linq"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:352:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 37);
		TraceIn("ident_list", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal227 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident228 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal227_tree = default(CommonTree);
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(352, 1);
		try
		{
			// SugarCpp.g:353:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:353:4: ident ( ',' ident )*
			{
			DebugLocation(353, 4);
			PushFollow(Follow._ident_in_ident_list2373);
			ident226=ident();
			PopFollow();

			stream_ident.Add(ident226.Tree);
			DebugLocation(353, 10);
			// SugarCpp.g:353:10: ( ',' ident )*
			try { DebugEnterSubRule(88);
			while (true)
			{
				int alt88=2;
				try { DebugEnterDecision(88, false);
				int LA88_0 = input.LA(1);

				if ((LA88_0==84))
				{
					alt88 = 1;
				}


				} finally { DebugExitDecision(88); }
				switch ( alt88 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:353:11: ',' ident
					{
					DebugLocation(353, 11);
					char_literal227=(IToken)Match(input,84,Follow._84_in_ident_list2376);  
					stream_84.Add(char_literal227);

					DebugLocation(353, 15);
					PushFollow(Follow._ident_in_ident_list2378);
					ident228=ident();
					PopFollow();

					stream_ident.Add(ident228.Tree);

					}
					break;

				default:
					goto loop88;
				}
			}

			loop88:
				;

			} finally { DebugExitSubRule(88); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 353:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(353, 26);
				// SugarCpp.g:353:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(353, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(353, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(353, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 37);
			LeaveRule("ident_list", 37);
			LeaveRule_ident_list();
		}
		DebugLocation(354, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:356:1: stmt_alloc : ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 38);
		TraceIn("stmt_alloc", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal230 = default(IToken);
		IToken char_literal232 = default(IToken);
		IToken string_literal233 = default(IToken);
		IToken char_literal235 = default(IToken);
		IToken char_literal237 = default(IToken);
		IToken string_literal238 = default(IToken);
		IToken char_literal240 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name231 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr234 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list236 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr239 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr241 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal230_tree = default(CommonTree);
		CommonTree char_literal232_tree = default(CommonTree);
		CommonTree string_literal233_tree = default(CommonTree);
		CommonTree char_literal235_tree = default(CommonTree);
		CommonTree char_literal237_tree = default(CommonTree);
		CommonTree string_literal238_tree = default(CommonTree);
		CommonTree char_literal240_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(356, 1);
		try
		{
			// SugarCpp.g:357:2: ( ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) ) )
			DebugEnterAlt(1);
			// SugarCpp.g:357:4: ident_list ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			{
			DebugLocation(357, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc2400);
			ident_list229=ident_list();
			PopFollow();

			stream_ident_list.Add(ident_list229.Tree);
			DebugLocation(357, 15);
			// SugarCpp.g:357:15: ( ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) ) | ':=' ( expr ( ',' modify_expr )* ) -> ^( ':=' ident_list expr ( modify_expr )* ) )
			int alt93=2;
			try { DebugEnterSubRule(93);
			try { DebugEnterDecision(93, false);
			int LA93_0 = input.LA(1);

			if ((LA93_0==94))
			{
				alt93 = 1;
			}
			else if ((LA93_0==96))
			{
				alt93 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 93, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(93); }
			switch (alt93)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:357:17: ':' type_name ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				{
				DebugLocation(357, 17);
				char_literal230=(IToken)Match(input,94,Follow._94_in_stmt_alloc2404);  
				stream_94.Add(char_literal230);

				DebugLocation(357, 21);
				PushFollow(Follow._type_name_in_stmt_alloc2406);
				type_name231=type_name();
				PopFollow();

				stream_type_name.Add(type_name231.Tree);
				DebugLocation(357, 31);
				// SugarCpp.g:357:31: ( ( '=' | ':=' ) expr -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? ) | '(' ( expr_list )? ')' -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? ) | -> ^( Expr_Alloc_Equal type_name ident_list ) )
				int alt91=3;
				try { DebugEnterSubRule(91);
				try { DebugEnterDecision(91, false);
				switch (input.LA(1))
				{
				case 96:
				case 102:
					{
					alt91 = 1;
					}
					break;
				case 77:
					{
					alt91 = 2;
					}
					break;
				case INDENT:
				case NEWLINE:
				case 131:
				case 149:
					{
					alt91 = 3;
					}
					break;
				default:
					{
						NoViableAltException nvae = new NoViableAltException("", 91, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
				}

				} finally { DebugExitDecision(91); }
				switch (alt91)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:357:33: ( '=' | ':=' ) expr
					{
					DebugLocation(357, 33);
					// SugarCpp.g:357:33: ( '=' | ':=' )
					int alt89=2;
					try { DebugEnterSubRule(89);
					try { DebugEnterDecision(89, false);
					int LA89_0 = input.LA(1);

					if ((LA89_0==102))
					{
						alt89 = 1;
					}
					else if ((LA89_0==96))
					{
						alt89 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 89, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(89); }
					switch (alt89)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:357:34: '='
						{
						DebugLocation(357, 34);
						char_literal232=(IToken)Match(input,102,Follow._102_in_stmt_alloc2411);  
						stream_102.Add(char_literal232);


						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:357:40: ':='
						{
						DebugLocation(357, 40);
						string_literal233=(IToken)Match(input,96,Follow._96_in_stmt_alloc2415);  
						stream_96.Add(string_literal233);


						}
						break;

					}
					} finally { DebugExitSubRule(89); }

					DebugLocation(357, 46);
					PushFollow(Follow._expr_in_stmt_alloc2418);
					expr234=expr();
					PopFollow();

					stream_expr.Add(expr234.Tree);


					{
					// AST REWRITE
					// elements: ident_list, type_name, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 357:52: -> ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
					{
						DebugLocation(357, 55);
						// SugarCpp.g:357:55: ^( Expr_Alloc_Equal type_name ident_list ( expr )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(357, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(357, 74);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(357, 84);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(357, 95);
						// SugarCpp.g:357:95: ( expr )?
						if (stream_expr.HasNext)
						{
							DebugLocation(357, 95);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:358:33: '(' ( expr_list )? ')'
					{
					DebugLocation(358, 33);
					char_literal235=(IToken)Match(input,77,Follow._77_in_stmt_alloc2466);  
					stream_77.Add(char_literal235);

					DebugLocation(358, 37);
					// SugarCpp.g:358:37: ( expr_list )?
					int alt90=2;
					try { DebugEnterSubRule(90);
					try { DebugEnterDecision(90, false);
					int LA90_0 = input.LA(1);

					if ((LA90_0==IDENT||LA90_0==NUMBER||LA90_0==STRING||LA90_0==70||LA90_0==75||LA90_0==77||LA90_0==79||(LA90_0>=81 && LA90_0<=82)||(LA90_0>=85 && LA90_0<=86)||LA90_0==111||LA90_0==139||LA90_0==153))
					{
						alt90 = 1;
					}
					} finally { DebugExitDecision(90); }
					switch (alt90)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:358:37: expr_list
						{
						DebugLocation(358, 37);
						PushFollow(Follow._expr_list_in_stmt_alloc2468);
						expr_list236=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list236.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(90); }

					DebugLocation(358, 48);
					char_literal237=(IToken)Match(input,78,Follow._78_in_stmt_alloc2471);  
					stream_78.Add(char_literal237);



					{
					// AST REWRITE
					// elements: expr_list, ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 358:53: -> ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
					{
						DebugLocation(358, 56);
						// SugarCpp.g:358:56: ^( Expr_Alloc_Bracket type_name ident_list ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 58);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Bracket, "Expr_Alloc_Bracket"), root_1);

						DebugLocation(358, 77);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(358, 87);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());
						DebugLocation(358, 98);
						// SugarCpp.g:358:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(358, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:359:15: 
					{

					{
					// AST REWRITE
					// elements: ident_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 359:15: -> ^( Expr_Alloc_Equal type_name ident_list )
					{
						DebugLocation(359, 18);
						// SugarCpp.g:359:18: ^( Expr_Alloc_Equal type_name ident_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(359, 20);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc_Equal, "Expr_Alloc_Equal"), root_1);

						DebugLocation(359, 37);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(359, 47);
						adaptor.AddChild(root_1, stream_ident_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(91); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:361:8: ':=' ( expr ( ',' modify_expr )* )
				{
				DebugLocation(361, 8);
				string_literal238=(IToken)Match(input,96,Follow._96_in_stmt_alloc2532);  
				stream_96.Add(string_literal238);

				DebugLocation(361, 14);
				// SugarCpp.g:361:14: ( expr ( ',' modify_expr )* )
				DebugEnterAlt(1);
				// SugarCpp.g:361:15: expr ( ',' modify_expr )*
				{
				DebugLocation(361, 15);
				PushFollow(Follow._expr_in_stmt_alloc2536);
				expr239=expr();
				PopFollow();

				stream_expr.Add(expr239.Tree);
				DebugLocation(361, 20);
				// SugarCpp.g:361:20: ( ',' modify_expr )*
				try { DebugEnterSubRule(92);
				while (true)
				{
					int alt92=2;
					try { DebugEnterDecision(92, false);
					int LA92_0 = input.LA(1);

					if ((LA92_0==84))
					{
						alt92 = 1;
					}


					} finally { DebugExitDecision(92); }
					switch ( alt92 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:361:21: ',' modify_expr
						{
						DebugLocation(361, 21);
						char_literal240=(IToken)Match(input,84,Follow._84_in_stmt_alloc2539);  
						stream_84.Add(char_literal240);

						DebugLocation(361, 25);
						PushFollow(Follow._modify_expr_in_stmt_alloc2541);
						modify_expr241=modify_expr();
						PopFollow();

						stream_modify_expr.Add(modify_expr241.Tree);

						}
						break;

					default:
						goto loop92;
					}
				}

				loop92:
					;

				} finally { DebugExitSubRule(92); }


				}



				{
				// AST REWRITE
				// elements: ident_list, modify_expr, expr, 96
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 361:40: -> ^( ':=' ident_list expr ( modify_expr )* )
				{
					DebugLocation(361, 43);
					// SugarCpp.g:361:43: ^( ':=' ident_list expr ( modify_expr )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(361, 45);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_96.NextNode(), root_1);

					DebugLocation(361, 50);
					adaptor.AddChild(root_1, stream_ident_list.NextTree());
					DebugLocation(361, 61);
					adaptor.AddChild(root_1, stream_expr.NextTree());
					DebugLocation(361, 66);
					// SugarCpp.g:361:66: ( modify_expr )*
					while ( stream_modify_expr.HasNext )
					{
						DebugLocation(361, 66);
						adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					}
					stream_modify_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(93); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 38);
			LeaveRule("stmt_alloc", 38);
			LeaveRule_stmt_alloc();
		}
		DebugLocation(362, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:364:1: stmt_modify : lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 39);
		TraceIn("stmt_modify", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue242 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op243 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr244 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr246 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal245_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(364, 1);
		try
		{
			// SugarCpp.g:365:2: ( lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:365:4: lvalue ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(365, 4);
			PushFollow(Follow._lvalue_in_stmt_modify2569);
			lvalue242=lvalue();
			PopFollow();

			adaptor.AddChild(root_0, lvalue242.Tree);
			DebugLocation(365, 11);
			// SugarCpp.g:365:11: ( modify_expr_op ^ modify_expr | '?=' ^ modify_expr )?
			int alt94=3;
			try { DebugEnterSubRule(94);
			try { DebugEnterDecision(94, false);
			int LA94_0 = input.LA(1);

			if ((LA94_0==73||LA94_0==76||LA94_0==80||LA94_0==83||LA94_0==87||LA94_0==93||LA94_0==100||LA94_0==102||LA94_0==108||LA94_0==115||LA94_0==151))
			{
				alt94 = 1;
			}
			else if ((LA94_0==110))
			{
				alt94 = 2;
			}
			} finally { DebugExitDecision(94); }
			switch (alt94)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:365:13: modify_expr_op ^ modify_expr
				{
				DebugLocation(365, 27);
				PushFollow(Follow._modify_expr_op_in_stmt_modify2573);
				modify_expr_op243=modify_expr_op();
				PopFollow();

				root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op243.Tree, root_0);
				DebugLocation(365, 29);
				PushFollow(Follow._modify_expr_in_stmt_modify2576);
				modify_expr244=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr244.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:366:13: '?=' ^ modify_expr
				{
				DebugLocation(366, 17);
				string_literal245=(IToken)Match(input,110,Follow._110_in_stmt_modify2590); 
				string_literal245_tree = (CommonTree)adaptor.Create(string_literal245);
				root_0 = (CommonTree)adaptor.BecomeRoot(string_literal245_tree, root_0);
				DebugLocation(366, 19);
				PushFollow(Follow._modify_expr_in_stmt_modify2593);
				modify_expr246=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr246.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(94); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 39);
			LeaveRule("stmt_modify", 39);
			LeaveRule_stmt_modify();
		}
		DebugLocation(367, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:369:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 40);
		TraceIn("expr", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr247 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(369, 1);
		try
		{
			// SugarCpp.g:370:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:370:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(370, 4);
			PushFollow(Follow._lambda_expr_in_expr2606);
			lambda_expr247=lambda_expr();
			PopFollow();

			adaptor.AddChild(root_0, lambda_expr247.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 40);
			LeaveRule("expr", 40);
			LeaveRule_expr();
		}
		DebugLocation(371, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:373:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 41);
		TraceIn("lambda_expr", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal248 = default(IToken);
		IToken char_literal250 = default(IToken);
		IToken string_literal251 = default(IToken);
		IToken string_literal253 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args249 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr252 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr254 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr255 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal248_tree = default(CommonTree);
		CommonTree char_literal250_tree = default(CommonTree);
		CommonTree string_literal251_tree = default(CommonTree);
		CommonTree string_literal253_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(373, 1);
		try
		{
			// SugarCpp.g:374:2: ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr )
			int alt97=2;
			try { DebugEnterDecision(97, false);
			try
			{
				alt97 = dfa97.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(97); }
			switch (alt97)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:374:4: '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				{
				DebugLocation(374, 4);
				char_literal248=(IToken)Match(input,77,Follow._77_in_lambda_expr2617);  
				stream_77.Add(char_literal248);

				DebugLocation(374, 8);
				// SugarCpp.g:374:8: ( func_args )?
				int alt95=2;
				try { DebugEnterSubRule(95);
				try { DebugEnterDecision(95, false);
				int LA95_0 = input.LA(1);

				if ((LA95_0==IDENT||LA95_0==96))
				{
					alt95 = 1;
				}
				} finally { DebugExitDecision(95); }
				switch (alt95)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:374:8: func_args
					{
					DebugLocation(374, 8);
					PushFollow(Follow._func_args_in_lambda_expr2619);
					func_args249=func_args();
					PopFollow();

					stream_func_args.Add(func_args249.Tree);

					}
					break;

				}
				} finally { DebugExitSubRule(95); }

				DebugLocation(374, 19);
				char_literal250=(IToken)Match(input,78,Follow._78_in_lambda_expr2622);  
				stream_78.Add(char_literal250);

				DebugLocation(374, 23);
				// SugarCpp.g:374:23: ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) )
				int alt96=2;
				try { DebugEnterSubRule(96);
				try { DebugEnterDecision(96, false);
				int LA96_0 = input.LA(1);

				if ((LA96_0==88))
				{
					alt96 = 1;
				}
				else if ((LA96_0==104))
				{
					alt96 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 96, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(96); }
				switch (alt96)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:374:25: '->' expr
					{
					DebugLocation(374, 25);
					string_literal251=(IToken)Match(input,88,Follow._88_in_lambda_expr2626);  
					stream_88.Add(string_literal251);

					DebugLocation(374, 30);
					PushFollow(Follow._expr_in_lambda_expr2628);
					expr252=expr();
					PopFollow();

					stream_expr.Add(expr252.Tree);


					{
					// AST REWRITE
					// elements: 88, func_args, expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 374:36: -> ^( Expr_Lambda '->' ( func_args )? expr )
					{
						DebugLocation(374, 39);
						// SugarCpp.g:374:39: ^( Expr_Lambda '->' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(374, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(374, 53);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(374, 58);
						// SugarCpp.g:374:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(374, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(374, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:375:25: '=>' expr
					{
					DebugLocation(375, 25);
					string_literal253=(IToken)Match(input,104,Follow._104_in_lambda_expr2668);  
					stream_104.Add(string_literal253);

					DebugLocation(375, 30);
					PushFollow(Follow._expr_in_lambda_expr2670);
					expr254=expr();
					PopFollow();

					stream_expr.Add(expr254.Tree);


					{
					// AST REWRITE
					// elements: func_args, expr, 104
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 375:36: -> ^( Expr_Lambda '=>' ( func_args )? expr )
					{
						DebugLocation(375, 39);
						// SugarCpp.g:375:39: ^( Expr_Lambda '=>' ( func_args )? expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(375, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

						DebugLocation(375, 53);
						adaptor.AddChild(root_1, stream_104.NextNode());
						DebugLocation(375, 58);
						// SugarCpp.g:375:58: ( func_args )?
						if (stream_func_args.HasNext)
						{
							DebugLocation(375, 58);
							adaptor.AddChild(root_1, stream_func_args.NextTree());

						}
						stream_func_args.Reset();
						DebugLocation(375, 69);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(96); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:376:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(376, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr2690);
				modify_expr255=modify_expr();
				PopFollow();

				adaptor.AddChild(root_0, modify_expr255.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 41);
			LeaveRule("lambda_expr", 41);
			LeaveRule_lambda_expr();
		}
		DebugLocation(377, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:379:1: modify_expr_op : ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 42);
		TraceIn("modify_expr_op", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set256 = default(IToken);

		CommonTree set256_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(379, 91);
		try
		{
			// SugarCpp.g:379:15: ( '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(379, 15);

			set256=(IToken)input.LT(1);
			if (input.LA(1)==73||input.LA(1)==76||input.LA(1)==80||input.LA(1)==83||input.LA(1)==87||input.LA(1)==93||input.LA(1)==100||input.LA(1)==102||input.LA(1)==108||input.LA(1)==115||input.LA(1)==151)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set256));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 42);
			LeaveRule("modify_expr_op", 42);
			LeaveRule_modify_expr_op();
		}
		DebugLocation(379, 91);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:380:1: modify_expr : cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 43);
		TraceIn("modify_expr", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set258 = default(IToken);
		IToken char_literal260 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr257 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr259 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr261 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree set258_tree = default(CommonTree);
		CommonTree char_literal260_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(380, 1);
		try
		{
			// SugarCpp.g:381:2: ( cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )? )
			DebugEnterAlt(1);
			// SugarCpp.g:381:4: cond_expr ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(381, 4);
			PushFollow(Follow._cond_expr_in_modify_expr2747);
			cond_expr257=cond_expr();
			PopFollow();

			adaptor.AddChild(root_0, cond_expr257.Tree);
			DebugLocation(381, 14);
			// SugarCpp.g:381:14: ( ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr | ( '=' ^ cond_expr )+ )?
			int alt99=3;
			try { DebugEnterSubRule(99);
			try { DebugEnterDecision(99, false);
			int LA99_0 = input.LA(1);

			if ((LA99_0==73||LA99_0==76||LA99_0==80||LA99_0==83||LA99_0==87||LA99_0==93||LA99_0==96||LA99_0==100||LA99_0==108||LA99_0==115||LA99_0==151))
			{
				alt99 = 1;
			}
			else if ((LA99_0==102))
			{
				alt99 = 2;
			}
			} finally { DebugExitDecision(99); }
			switch (alt99)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:381:16: ( ':=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' ) ^ cond_expr
				{
				DebugLocation(381, 94);

				set258=(IToken)input.LT(1);
				set258=(IToken)input.LT(1);
				if (input.LA(1)==73||input.LA(1)==76||input.LA(1)==80||input.LA(1)==83||input.LA(1)==87||input.LA(1)==93||input.LA(1)==96||input.LA(1)==100||input.LA(1)==108||input.LA(1)==115||input.LA(1)==151)
				{
					input.Consume();
					root_0 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(set258), root_0);
					state.errorRecovery=false;
				}
				else
				{
					MismatchedSetException mse = new MismatchedSetException(null,input);
					DebugRecognitionException(mse);
					throw mse;
				}

				DebugLocation(381, 96);
				PushFollow(Follow._cond_expr_in_modify_expr2796);
				cond_expr259=cond_expr();
				PopFollow();

				adaptor.AddChild(root_0, cond_expr259.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:382:7: ( '=' ^ cond_expr )+
				{
				DebugLocation(382, 7);
				// SugarCpp.g:382:7: ( '=' ^ cond_expr )+
				int cnt98=0;
				try { DebugEnterSubRule(98);
				while (true)
				{
					int alt98=2;
					try { DebugEnterDecision(98, false);
					int LA98_0 = input.LA(1);

					if ((LA98_0==102))
					{
						alt98 = 1;
					}


					} finally { DebugExitDecision(98); }
					switch (alt98)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:382:8: '=' ^ cond_expr
						{
						DebugLocation(382, 11);
						char_literal260=(IToken)Match(input,102,Follow._102_in_modify_expr2805); 
						char_literal260_tree = (CommonTree)adaptor.Create(char_literal260);
						root_0 = (CommonTree)adaptor.BecomeRoot(char_literal260_tree, root_0);
						DebugLocation(382, 13);
						PushFollow(Follow._cond_expr_in_modify_expr2808);
						cond_expr261=cond_expr();
						PopFollow();

						adaptor.AddChild(root_0, cond_expr261.Tree);

						}
						break;

					default:
						if (cnt98 >= 1)
							goto loop98;

						EarlyExitException eee98 = new EarlyExitException( 98, input );
						DebugRecognitionException(eee98);
						throw eee98;
					}
					cnt98++;
				}
				loop98:
					;

				} finally { DebugExitSubRule(98); }


				}
				break;

			}
			} finally { DebugExitSubRule(99); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 43);
			LeaveRule("modify_expr", 43);
			LeaveRule_modify_expr();
		}
		DebugLocation(383, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:385:1: cond_expr_item : or_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 44);
		TraceIn("cond_expr_item", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> or_expr262 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(385, 24);
		try
		{
			// SugarCpp.g:385:15: ( or_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:385:17: or_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(385, 17);
			PushFollow(Follow._or_expr_in_cond_expr_item2821);
			or_expr262=or_expr();
			PopFollow();

			adaptor.AddChild(root_0, or_expr262.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 44);
			LeaveRule("cond_expr_item", 44);
			LeaveRule_cond_expr_item();
		}
		DebugLocation(385, 24);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:386:1: cond_expr : (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 45);
		TraceIn("cond_expr", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal263 = default(IToken);
		IToken char_literal264 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal263_tree = default(CommonTree);
		CommonTree char_literal264_tree = default(CommonTree);
		RewriteRuleITokenStream stream_94=new RewriteRuleITokenStream(adaptor,"token 94");
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(386, 1);
		try
		{
			// SugarCpp.g:387:2: ( (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:387:4: (a= or_expr -> $a) ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			{
			DebugLocation(387, 4);
			// SugarCpp.g:387:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:387:5: a= or_expr
			{
			DebugLocation(387, 6);
			PushFollow(Follow._or_expr_in_cond_expr2833);
			a=or_expr();
			PopFollow();

			stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 387:15: -> $a
			{
				DebugLocation(387, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(387, 22);
			// SugarCpp.g:387:22: ( '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) ) )?
			int alt102=2;
			try { DebugEnterSubRule(102);
			try { DebugEnterDecision(102, false);
			int LA102_0 = input.LA(1);

			if ((LA102_0==109))
			{
				alt102 = 1;
			}
			} finally { DebugExitDecision(102); }
			switch (alt102)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:387:23: '?' (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				{
				DebugLocation(387, 23);
				char_literal263=(IToken)Match(input,109,Follow._109_in_cond_expr2842);  
				stream_109.Add(char_literal263);

				DebugLocation(387, 27);
				// SugarCpp.g:387:27: (a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) ) | -> ^( Expr_Not_Null $cond_expr) )
				int alt101=2;
				try { DebugEnterSubRule(101);
				try { DebugEnterDecision(101, false);
				int LA101_0 = input.LA(1);

				if ((LA101_0==IDENT||LA101_0==NUMBER||LA101_0==STRING||LA101_0==70||LA101_0==75||LA101_0==77||LA101_0==79||(LA101_0>=81 && LA101_0<=82)||(LA101_0>=85 && LA101_0<=86)||LA101_0==111||LA101_0==139||LA101_0==153))
				{
					alt101 = 1;
				}
				else if ((LA101_0==INDENT||LA101_0==NEWLINE||LA101_0==73||LA101_0==76||LA101_0==78||LA101_0==80||(LA101_0>=83 && LA101_0<=84)||LA101_0==87||LA101_0==93||LA101_0==96||LA101_0==100||LA101_0==102||LA101_0==108||LA101_0==113||LA101_0==115||LA101_0==119||(LA101_0>=124 && LA101_0<=125)||(LA101_0>=130 && LA101_0<=131)||LA101_0==133||LA101_0==136||(LA101_0>=142 && LA101_0<=143)||(LA101_0>=148 && LA101_0<=149)||LA101_0==151))
				{
					alt101 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 101, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(101); }
				switch (alt101)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:387:29: a= cond_expr_item ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					{
					DebugLocation(387, 30);
					PushFollow(Follow._cond_expr_item_in_cond_expr2848);
					a=cond_expr_item();
					PopFollow();

					stream_cond_expr_item.Add(a.Tree);
					DebugLocation(387, 46);
					// SugarCpp.g:387:46: ( ':' b= cond_expr_item -> ^( Expr_Cond $cond_expr $a $b) | -> ^( Expr_Cond_Not_Null $cond_expr $a) )
					int alt100=2;
					try { DebugEnterSubRule(100);
					try { DebugEnterDecision(100, false);
					int LA100_0 = input.LA(1);

					if ((LA100_0==94))
					{
						alt100 = 1;
					}
					else if ((LA100_0==INDENT||LA100_0==NEWLINE||LA100_0==73||LA100_0==76||LA100_0==78||LA100_0==80||(LA100_0>=83 && LA100_0<=84)||LA100_0==87||LA100_0==93||LA100_0==96||LA100_0==100||LA100_0==102||LA100_0==108||LA100_0==113||LA100_0==115||LA100_0==119||(LA100_0>=124 && LA100_0<=125)||(LA100_0>=130 && LA100_0<=131)||LA100_0==133||LA100_0==136||(LA100_0>=142 && LA100_0<=143)||(LA100_0>=148 && LA100_0<=149)||LA100_0==151))
					{
						alt100 = 2;
					}
					else
					{
						NoViableAltException nvae = new NoViableAltException("", 100, 0, input);
						DebugRecognitionException(nvae);
						throw nvae;
					}
					} finally { DebugExitDecision(100); }
					switch (alt100)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:387:48: ':' b= cond_expr_item
						{
						DebugLocation(387, 48);
						char_literal264=(IToken)Match(input,94,Follow._94_in_cond_expr2852);  
						stream_94.Add(char_literal264);

						DebugLocation(387, 53);
						PushFollow(Follow._cond_expr_item_in_cond_expr2856);
						b=cond_expr_item();
						PopFollow();

						stream_cond_expr_item.Add(b.Tree);


						{
						// AST REWRITE
						// elements: b, a, cond_expr
						// token labels: 
						// rule labels: retval, b, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 387:69: -> ^( Expr_Cond $cond_expr $a $b)
						{
							DebugLocation(387, 72);
							// SugarCpp.g:387:72: ^( Expr_Cond $cond_expr $a $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(387, 74);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

							DebugLocation(387, 85);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(387, 96);
							adaptor.AddChild(root_1, stream_a.NextTree());
							DebugLocation(387, 99);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:388:17: 
						{

						{
						// AST REWRITE
						// elements: a, cond_expr
						// token labels: 
						// rule labels: retval, a
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 388:17: -> ^( Expr_Cond_Not_Null $cond_expr $a)
						{
							DebugLocation(388, 20);
							// SugarCpp.g:388:20: ^( Expr_Cond_Not_Null $cond_expr $a)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(388, 22);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond_Not_Null, "Expr_Cond_Not_Null"), root_1);

							DebugLocation(388, 42);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(388, 53);
							adaptor.AddChild(root_1, stream_a.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(100); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:390:11: 
					{

					{
					// AST REWRITE
					// elements: cond_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 390:11: -> ^( Expr_Not_Null $cond_expr)
					{
						DebugLocation(390, 14);
						// SugarCpp.g:390:14: ^( Expr_Not_Null $cond_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(390, 16);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Not_Null, "Expr_Not_Null"), root_1);

						DebugLocation(390, 31);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(101); }


				}
				break;

			}
			} finally { DebugExitSubRule(102); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 45);
			LeaveRule("cond_expr", 45);
			LeaveRule_cond_expr();
		}
		DebugLocation(392, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:394:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 46);
		TraceIn("or_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal265 = default(IToken);
		IToken string_literal266 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal265_tree = default(CommonTree);
		CommonTree string_literal266_tree = default(CommonTree);
		RewriteRuleITokenStream stream_152=new RewriteRuleITokenStream(adaptor,"token 152");
		RewriteRuleITokenStream stream_140=new RewriteRuleITokenStream(adaptor,"token 140");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(394, 1);
		try
		{
			// SugarCpp.g:395:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:395:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			{
			DebugLocation(395, 4);
			// SugarCpp.g:395:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:395:5: a= and_expr
			{
			DebugLocation(395, 6);
			PushFollow(Follow._and_expr_in_or_expr2959);
			a=and_expr();
			PopFollow();

			stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 395:16: -> $a
			{
				DebugLocation(395, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(395, 23);
			// SugarCpp.g:395:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) | 'or' b= and_expr -> ^( 'or' $or_expr $b) )*
			try { DebugEnterSubRule(103);
			while (true)
			{
				int alt103=3;
				try { DebugEnterDecision(103, false);
				int LA103_0 = input.LA(1);

				if ((LA103_0==152))
				{
					alt103 = 1;
				}
				else if ((LA103_0==140))
				{
					alt103 = 2;
				}


				} finally { DebugExitDecision(103); }
				switch ( alt103 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:395:25: '||' b= and_expr
					{
					DebugLocation(395, 25);
					string_literal265=(IToken)Match(input,152,Follow._152_in_or_expr2969);  
					stream_152.Add(string_literal265);

					DebugLocation(395, 31);
					PushFollow(Follow._and_expr_in_or_expr2973);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 152, or_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:41: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(395, 44);
						// SugarCpp.g:395:44: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(395, 55);
						adaptor.AddChild(root_1, stream_152.NextNode());
						DebugLocation(395, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(395, 70);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:396:25: 'or' b= and_expr
					{
					DebugLocation(396, 25);
					string_literal266=(IToken)Match(input,140,Follow._140_in_or_expr3013);  
					stream_140.Add(string_literal266);

					DebugLocation(396, 31);
					PushFollow(Follow._and_expr_in_or_expr3017);
					b=and_expr();
					PopFollow();

					stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 140, or_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:41: -> ^( 'or' $or_expr $b)
					{
						DebugLocation(396, 44);
						// SugarCpp.g:396:44: ^( 'or' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_140.NextNode(), root_1);

						DebugLocation(396, 52);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(396, 61);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop103;
				}
			}

			loop103:
				;

			} finally { DebugExitSubRule(103); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 46);
			LeaveRule("or_expr", 46);
			LeaveRule_or_expr();
		}
		DebugLocation(397, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:399:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 47);
		TraceIn("and_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal267 = default(IToken);
		IToken string_literal268 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal267_tree = default(CommonTree);
		CommonTree string_literal268_tree = default(CommonTree);
		RewriteRuleITokenStream stream_117=new RewriteRuleITokenStream(adaptor,"token 117");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(399, 1);
		try
		{
			// SugarCpp.g:400:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:400:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )*
			{
			DebugLocation(400, 4);
			// SugarCpp.g:400:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:400:5: a= bit_or
			{
			DebugLocation(400, 6);
			PushFollow(Follow._bit_or_in_and_expr3045);
			a=bit_or();
			PopFollow();

			stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 400:14: -> $a
			{
				DebugLocation(400, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(400, 21);
			// SugarCpp.g:400:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) | 'and' b= bit_or -> ^( 'and' $and_expr $b) )*
			try { DebugEnterSubRule(104);
			while (true)
			{
				int alt104=3;
				try { DebugEnterDecision(104, false);
				int LA104_0 = input.LA(1);

				if ((LA104_0==74))
				{
					alt104 = 1;
				}
				else if ((LA104_0==117))
				{
					alt104 = 2;
				}


				} finally { DebugExitDecision(104); }
				switch ( alt104 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:400:23: '&&' b= bit_or
					{
					DebugLocation(400, 23);
					string_literal267=(IToken)Match(input,74,Follow._74_in_and_expr3055);  
					stream_74.Add(string_literal267);

					DebugLocation(400, 29);
					PushFollow(Follow._bit_or_in_and_expr3059);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: and_expr, b, 74
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 400:37: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(400, 40);
						// SugarCpp.g:400:40: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(400, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(400, 51);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(400, 57);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(400, 67);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:401:11: 'and' b= bit_or
					{
					DebugLocation(401, 11);
					string_literal268=(IToken)Match(input,117,Follow._117_in_and_expr3085);  
					stream_117.Add(string_literal268);

					DebugLocation(401, 18);
					PushFollow(Follow._bit_or_in_and_expr3089);
					b=bit_or();
					PopFollow();

					stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, and_expr, 117
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 401:26: -> ^( 'and' $and_expr $b)
					{
						DebugLocation(401, 29);
						// SugarCpp.g:401:29: ^( 'and' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(401, 31);
						root_1 = (CommonTree)adaptor.BecomeRoot(stream_117.NextNode(), root_1);

						DebugLocation(401, 38);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(401, 48);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop104;
				}
			}

			loop104:
				;

			} finally { DebugExitSubRule(104); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 47);
			LeaveRule("and_expr", 47);
			LeaveRule_and_expr();
		}
		DebugLocation(402, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:404:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 48);
		TraceIn("bit_or", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal269 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal269_tree = default(CommonTree);
		RewriteRuleITokenStream stream_150=new RewriteRuleITokenStream(adaptor,"token 150");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(404, 1);
		try
		{
			// SugarCpp.g:405:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:405:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(405, 4);
			// SugarCpp.g:405:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:405:5: a= bit_xor
			{
			DebugLocation(405, 6);
			PushFollow(Follow._bit_xor_in_bit_or3117);
			a=bit_xor();
			PopFollow();

			stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 405:15: -> $a
			{
				DebugLocation(405, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(405, 22);
			// SugarCpp.g:405:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(105);
			while (true)
			{
				int alt105=2;
				try { DebugEnterDecision(105, false);
				int LA105_0 = input.LA(1);

				if ((LA105_0==150))
				{
					alt105 = 1;
				}


				} finally { DebugExitDecision(105); }
				switch ( alt105 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:405:23: '|' b= bit_xor
					{
					DebugLocation(405, 23);
					char_literal269=(IToken)Match(input,150,Follow._150_in_bit_or3126);  
					stream_150.Add(char_literal269);

					DebugLocation(405, 28);
					PushFollow(Follow._bit_xor_in_bit_or3130);
					b=bit_xor();
					PopFollow();

					stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 150, bit_or, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 405:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(405, 40);
						// SugarCpp.g:405:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(405, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(405, 51);
						adaptor.AddChild(root_1, stream_150.NextNode());
						DebugLocation(405, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(405, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop105;
				}
			}

			loop105:
				;

			} finally { DebugExitSubRule(105); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 48);
			LeaveRule("bit_or", 48);
			LeaveRule_bit_or();
		}
		DebugLocation(406, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:408:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 49);
		TraceIn("bit_xor", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal270 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal270_tree = default(CommonTree);
		RewriteRuleITokenStream stream_114=new RewriteRuleITokenStream(adaptor,"token 114");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(408, 1);
		try
		{
			// SugarCpp.g:409:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:409:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(409, 4);
			// SugarCpp.g:409:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:409:5: a= bit_and
			{
			DebugLocation(409, 6);
			PushFollow(Follow._bit_and_in_bit_xor3160);
			a=bit_and();
			PopFollow();

			stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 409:15: -> $a
			{
				DebugLocation(409, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(409, 22);
			// SugarCpp.g:409:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(106);
			while (true)
			{
				int alt106=2;
				try { DebugEnterDecision(106, false);
				int LA106_0 = input.LA(1);

				if ((LA106_0==114))
				{
					alt106 = 1;
				}


				} finally { DebugExitDecision(106); }
				switch ( alt106 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:409:23: '^' b= bit_and
					{
					DebugLocation(409, 23);
					char_literal270=(IToken)Match(input,114,Follow._114_in_bit_xor3169);  
					stream_114.Add(char_literal270);

					DebugLocation(409, 28);
					PushFollow(Follow._bit_and_in_bit_xor3173);
					b=bit_and();
					PopFollow();

					stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: bit_xor, 114, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 409:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(409, 40);
						// SugarCpp.g:409:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(409, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(409, 51);
						adaptor.AddChild(root_1, stream_114.NextNode());
						DebugLocation(409, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(409, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop106;
				}
			}

			loop106:
				;

			} finally { DebugExitSubRule(106); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 49);
			LeaveRule("bit_xor", 49);
			LeaveRule_bit_xor();
		}
		DebugLocation(410, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:412:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 50);
		TraceIn("bit_and", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal271 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal271_tree = default(CommonTree);
		RewriteRuleITokenStream stream_75=new RewriteRuleITokenStream(adaptor,"token 75");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(412, 1);
		try
		{
			// SugarCpp.g:413:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:413:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(413, 4);
			// SugarCpp.g:413:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:413:5: a= cmp_equ_expr
			{
			DebugLocation(413, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and3203);
			a=cmp_equ_expr();
			PopFollow();

			stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 413:20: -> $a
			{
				DebugLocation(413, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(413, 27);
			// SugarCpp.g:413:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(107);
			while (true)
			{
				int alt107=2;
				try { DebugEnterDecision(107, false);
				int LA107_0 = input.LA(1);

				if ((LA107_0==75))
				{
					alt107 = 1;
				}


				} finally { DebugExitDecision(107); }
				switch ( alt107 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:413:28: '&' b= cmp_equ_expr
					{
					DebugLocation(413, 28);
					char_literal271=(IToken)Match(input,75,Follow._75_in_bit_and3212);  
					stream_75.Add(char_literal271);

					DebugLocation(413, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and3216);
					b=cmp_equ_expr();
					PopFollow();

					stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 75, bit_and
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 413:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(413, 50);
						// SugarCpp.g:413:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(413, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(413, 61);
						adaptor.AddChild(root_1, stream_75.NextNode());
						DebugLocation(413, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(413, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop107;
				}
			}

			loop107:
				;

			} finally { DebugExitSubRule(107); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 50);
			LeaveRule("bit_and", 50);
			LeaveRule_bit_and();
		}
		DebugLocation(414, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:416:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 51);
		TraceIn("cmp_equ_expr_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set272 = default(IToken);

		CommonTree set272_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(416, 29);
		try
		{
			// SugarCpp.g:416:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(416, 16);

			set272=(IToken)input.LT(1);
			if (input.LA(1)==71||input.LA(1)==103)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set272));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 51);
			LeaveRule("cmp_equ_expr_op", 51);
			LeaveRule_cmp_equ_expr_op();
		}
		DebugLocation(416, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:417:1: cmp_equ_expr : (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 52);
		TraceIn("cmp_equ_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal273 = default(IToken);
		IToken string_literal274 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> op = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal273_tree = default(CommonTree);
		CommonTree string_literal274_tree = default(CommonTree);
		RewriteRuleITokenStream stream_134=new RewriteRuleITokenStream(adaptor,"token 134");
		RewriteRuleITokenStream stream_135=new RewriteRuleITokenStream(adaptor,"token 135");
		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(417, 1);
		try
		{
			// SugarCpp.g:418:2: ( (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:418:4: (a= cmp_expr -> $a) (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )?
			{
			DebugLocation(418, 4);
			// SugarCpp.g:418:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:418:5: a= cmp_expr
			{
			DebugLocation(418, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr3257);
			a=cmp_expr();
			PopFollow();

			stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 418:16: -> $a
			{
				DebugLocation(418, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(418, 23);
			// SugarCpp.g:418:23: (op= cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin $op $cmp_equ_expr $b) | 'is' b= cmp_expr -> ^( 'is' $cmp_equ_expr $b) | 'isnt' b= cmp_expr -> ^( 'isnt' $cmp_equ_expr $b) )?
			int alt108=4;
			try { DebugEnterSubRule(108);
			try { DebugEnterDecision(108, false);
			switch (input.LA(1))
			{
			case 71:
			case 103:
				{
				alt108 = 1;
				}
				break;
			case 134:
				{
				alt108 = 2;
				}
				break;
			case 135:
				{
				alt108 = 3;
				}
				break;
			}

			} finally { DebugExitDecision(108); }
			switch (alt108)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:418:25: op= cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(418, 27);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr3269);
				op=cmp_equ_expr_op();
				PopFollow();

				stream_cmp_equ_expr_op.Add(op.Tree);
				DebugLocation(418, 45);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3273);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_equ_expr, op, b
				// token labels: 
				// rule labels: retval, b, op
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_op=new RewriteRuleSubtreeStream(adaptor,"rule op",op!=null?op.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 418:55: -> ^( Expr_Bin $op $cmp_equ_expr $b)
				{
					DebugLocation(418, 58);
					// SugarCpp.g:418:58: ^( Expr_Bin $op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(418, 60);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(418, 70);
					adaptor.AddChild(root_1, stream_op.NextTree());
					DebugLocation(418, 74);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(418, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:419:25: 'is' b= cmp_expr
				{
				DebugLocation(419, 25);
				string_literal273=(IToken)Match(input,134,Follow._134_in_cmp_equ_expr3314);  
				stream_134.Add(string_literal273);

				DebugLocation(419, 31);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3318);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr, 134
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 419:41: -> ^( 'is' $cmp_equ_expr $b)
				{
					DebugLocation(419, 44);
					// SugarCpp.g:419:44: ^( 'is' $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(419, 46);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_134.NextNode(), root_1);

					DebugLocation(419, 52);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(419, 66);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:420:25: 'isnt' b= cmp_expr
				{
				DebugLocation(420, 25);
				string_literal274=(IToken)Match(input,135,Follow._135_in_cmp_equ_expr3357);  
				stream_135.Add(string_literal274);

				DebugLocation(420, 33);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr3361);
				b=cmp_expr();
				PopFollow();

				stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, 135, cmp_equ_expr
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 420:43: -> ^( 'isnt' $cmp_equ_expr $b)
				{
					DebugLocation(420, 46);
					// SugarCpp.g:420:46: ^( 'isnt' $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(420, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_135.NextNode(), root_1);

					DebugLocation(420, 56);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(420, 70);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(108); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 52);
			LeaveRule("cmp_equ_expr", 52);
			LeaveRule_cmp_equ_expr();
		}
		DebugLocation(422, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:424:1: cmp_expr : (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 53);
		TraceIn("cmp_expr", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal275 = default(IToken);
		IToken char_literal277 = default(IToken);
		IToken char_literal278 = default(IToken);
		IToken char_literal280 = default(IToken);
		IToken string_literal281 = default(IToken);
		IToken char_literal282 = default(IToken);
		IToken string_literal283 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident276 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list279 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal275_tree = default(CommonTree);
		CommonTree char_literal277_tree = default(CommonTree);
		CommonTree char_literal278_tree = default(CommonTree);
		CommonTree char_literal280_tree = default(CommonTree);
		CommonTree string_literal281_tree = default(CommonTree);
		CommonTree char_literal282_tree = default(CommonTree);
		CommonTree string_literal283_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(424, 1);
		try
		{
			// SugarCpp.g:425:2: ( (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:425:4: (a= infix_expr -> $a) ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			{
			DebugLocation(425, 4);
			// SugarCpp.g:425:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:425:5: a= infix_expr
			{
			DebugLocation(425, 6);
			PushFollow(Follow._infix_expr_in_cmp_expr3399);
			a=infix_expr();
			PopFollow();

			stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 425:18: -> $a
			{
				DebugLocation(425, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(425, 25);
			// SugarCpp.g:425:25: ( '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) ) | '<=' b= infix_expr -> ^( Expr_Bin '<=' $cmp_expr $b) | '>' b= infix_expr -> ^( Expr_Bin '>' $cmp_expr $b) | '>=' b= infix_expr -> ^( Expr_Bin '>=' $cmp_expr $b) )*
			try { DebugEnterSubRule(112);
			while (true)
			{
				int alt112=5;
				try { DebugEnterDecision(112, false);
				switch (input.LA(1))
				{
				case 97:
					{
					alt112 = 1;
					}
					break;
				case 101:
					{
					alt112 = 2;
					}
					break;
				case 105:
					{
					alt112 = 3;
					}
					break;
				case 106:
					{
					alt112 = 4;
					}
					break;
				}

				} finally { DebugExitDecision(112); }
				switch ( alt112 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:425:27: '<' b= infix_expr ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					{
					DebugLocation(425, 27);
					char_literal275=(IToken)Match(input,97,Follow._97_in_cmp_expr3409);  
					stream_97.Add(char_literal275);

					DebugLocation(425, 32);
					PushFollow(Follow._infix_expr_in_cmp_expr3413);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);
					DebugLocation(425, 44);
					// SugarCpp.g:425:44: ({...}? ( ident )* '>' '(' ( expr_list )? ')' -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? ) | -> ^( Expr_Bin '<' $cmp_expr $b) )
					int alt111=2;
					try { DebugEnterSubRule(111);
					try { DebugEnterDecision(111, false);
					switch (input.LA(1))
					{
					case IDENT:
						{
						alt111 = 1;
						}
						break;
					case 105:
						{
						int LA111_2 = input.LA(2);

						if (((b.Tree.Token.Type == IDENT)))
						{
							alt111 = 1;
						}
						else if ((true))
						{
							alt111 = 2;
						}
						else
						{
							NoViableAltException nvae = new NoViableAltException("", 111, 2, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
						}
						break;
					case INDENT:
					case NEWLINE:
					case 71:
					case 73:
					case 74:
					case 75:
					case 76:
					case 78:
					case 80:
					case 83:
					case 84:
					case 87:
					case 93:
					case 94:
					case 96:
					case 97:
					case 100:
					case 101:
					case 102:
					case 103:
					case 106:
					case 108:
					case 109:
					case 113:
					case 114:
					case 115:
					case 117:
					case 119:
					case 124:
					case 125:
					case 130:
					case 131:
					case 133:
					case 134:
					case 135:
					case 136:
					case 140:
					case 142:
					case 143:
					case 148:
					case 149:
					case 150:
					case 151:
					case 152:
						{
						alt111 = 2;
						}
						break;
					default:
						{
							NoViableAltException nvae = new NoViableAltException("", 111, 0, input);
							DebugRecognitionException(nvae);
							throw nvae;
						}
					}

					} finally { DebugExitDecision(111); }
					switch (alt111)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:425:46: {...}? ( ident )* '>' '(' ( expr_list )? ')'
						{
						DebugLocation(425, 46);
						if (!((b.Tree.Token.Type == IDENT)))
						{
							throw new FailedPredicateException(input, "cmp_expr", "b.Tree.Token.Type == IDENT");
						}
						DebugLocation(425, 76);
						// SugarCpp.g:425:76: ( ident )*
						try { DebugEnterSubRule(109);
						while (true)
						{
							int alt109=2;
							try { DebugEnterDecision(109, false);
							int LA109_0 = input.LA(1);

							if ((LA109_0==IDENT))
							{
								alt109 = 1;
							}


							} finally { DebugExitDecision(109); }
							switch ( alt109 )
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:425:76: ident
								{
								DebugLocation(425, 76);
								PushFollow(Follow._ident_in_cmp_expr3419);
								ident276=ident();
								PopFollow();

								stream_ident.Add(ident276.Tree);

								}
								break;

							default:
								goto loop109;
							}
						}

						loop109:
							;

						} finally { DebugExitSubRule(109); }

						DebugLocation(425, 83);
						char_literal277=(IToken)Match(input,105,Follow._105_in_cmp_expr3422);  
						stream_105.Add(char_literal277);

						DebugLocation(425, 87);
						char_literal278=(IToken)Match(input,77,Follow._77_in_cmp_expr3424);  
						stream_77.Add(char_literal278);

						DebugLocation(425, 91);
						// SugarCpp.g:425:91: ( expr_list )?
						int alt110=2;
						try { DebugEnterSubRule(110);
						try { DebugEnterDecision(110, false);
						int LA110_0 = input.LA(1);

						if ((LA110_0==IDENT||LA110_0==NUMBER||LA110_0==STRING||LA110_0==70||LA110_0==75||LA110_0==77||LA110_0==79||(LA110_0>=81 && LA110_0<=82)||(LA110_0>=85 && LA110_0<=86)||LA110_0==111||LA110_0==139||LA110_0==153))
						{
							alt110 = 1;
						}
						} finally { DebugExitDecision(110); }
						switch (alt110)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:425:91: expr_list
							{
							DebugLocation(425, 91);
							PushFollow(Follow._expr_list_in_cmp_expr3426);
							expr_list279=expr_list();
							PopFollow();

							stream_expr_list.Add(expr_list279.Tree);

							}
							break;

						}
						} finally { DebugExitSubRule(110); }

						DebugLocation(425, 102);
						char_literal280=(IToken)Match(input,78,Follow._78_in_cmp_expr3429);  
						stream_78.Add(char_literal280);



						{
						// AST REWRITE
						// elements: ident, expr_list, b, cmp_expr
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 425:106: -> ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
						{
							DebugLocation(425, 109);
							// SugarCpp.g:425:109: ^( Expr_Call $cmp_expr ^( Generic_Patameters $b ( ident )* ) ( expr_list )? )
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(425, 111);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

							DebugLocation(425, 122);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(425, 131);
							// SugarCpp.g:425:131: ^( Generic_Patameters $b ( ident )* )
							{
							CommonTree root_2 = (CommonTree)adaptor.Nil();
							DebugLocation(425, 133);
							root_2 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Generic_Patameters, "Generic_Patameters"), root_2);

							DebugLocation(425, 153);
							adaptor.AddChild(root_2, stream_b.NextTree());
							DebugLocation(425, 155);
							// SugarCpp.g:425:155: ( ident )*
							while ( stream_ident.HasNext )
							{
								DebugLocation(425, 155);
								adaptor.AddChild(root_2, stream_ident.NextTree());

							}
							stream_ident.Reset();

							adaptor.AddChild(root_1, root_2);
							}
							DebugLocation(425, 163);
							// SugarCpp.g:425:163: ( expr_list )?
							if (stream_expr_list.HasNext)
							{
								DebugLocation(425, 163);
								adaptor.AddChild(root_1, stream_expr_list.NextTree());

							}
							stream_expr_list.Reset();

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;
					case 2:
						DebugEnterAlt(2);
						// SugarCpp.g:426:46: 
						{

						{
						// AST REWRITE
						// elements: 97, b, cmp_expr
						// token labels: 
						// rule labels: retval, b
						// token list labels: 
						// rule list labels: 
						// wildcard labels: 
						retval.Tree = root_0;
						RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
						RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

						root_0 = (CommonTree)adaptor.Nil();
						// 426:46: -> ^( Expr_Bin '<' $cmp_expr $b)
						{
							DebugLocation(426, 49);
							// SugarCpp.g:426:49: ^( Expr_Bin '<' $cmp_expr $b)
							{
							CommonTree root_1 = (CommonTree)adaptor.Nil();
							DebugLocation(426, 51);
							root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

							DebugLocation(426, 60);
							adaptor.AddChild(root_1, stream_97.NextNode());
							DebugLocation(426, 65);
							adaptor.AddChild(root_1, stream_retval.NextTree());
							DebugLocation(426, 75);
							adaptor.AddChild(root_1, stream_b.NextTree());

							adaptor.AddChild(root_0, root_1);
							}

						}

						retval.Tree = root_0;
						}

						}
						break;

					}
					} finally { DebugExitSubRule(111); }


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:427:27: '<=' b= infix_expr
					{
					DebugLocation(427, 27);
					string_literal281=(IToken)Match(input,101,Follow._101_in_cmp_expr3539);  
					stream_101.Add(string_literal281);

					DebugLocation(427, 33);
					PushFollow(Follow._infix_expr_in_cmp_expr3543);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, b, 101
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 427:45: -> ^( Expr_Bin '<=' $cmp_expr $b)
					{
						DebugLocation(427, 48);
						// SugarCpp.g:427:48: ^( Expr_Bin '<=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(427, 50);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(427, 59);
						adaptor.AddChild(root_1, stream_101.NextNode());
						DebugLocation(427, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(427, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:428:12: '>' b= infix_expr
					{
					DebugLocation(428, 12);
					char_literal282=(IToken)Match(input,105,Follow._105_in_cmp_expr3570);  
					stream_105.Add(char_literal282);

					DebugLocation(428, 17);
					PushFollow(Follow._infix_expr_in_cmp_expr3574);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, cmp_expr, 105
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 428:29: -> ^( Expr_Bin '>' $cmp_expr $b)
					{
						DebugLocation(428, 32);
						// SugarCpp.g:428:32: ^( Expr_Bin '>' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(428, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(428, 43);
						adaptor.AddChild(root_1, stream_105.NextNode());
						DebugLocation(428, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(428, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:429:12: '>=' b= infix_expr
					{
					DebugLocation(429, 12);
					string_literal283=(IToken)Match(input,106,Follow._106_in_cmp_expr3601);  
					stream_106.Add(string_literal283);

					DebugLocation(429, 18);
					PushFollow(Follow._infix_expr_in_cmp_expr3605);
					b=infix_expr();
					PopFollow();

					stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: cmp_expr, b, 106
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 429:30: -> ^( Expr_Bin '>=' $cmp_expr $b)
					{
						DebugLocation(429, 33);
						// SugarCpp.g:429:33: ^( Expr_Bin '>=' $cmp_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(429, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(429, 44);
						adaptor.AddChild(root_1, stream_106.NextNode());
						DebugLocation(429, 50);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(429, 60);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop112;
				}
			}

			loop112:
				;

			} finally { DebugExitSubRule(112); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 53);
			LeaveRule("cmp_expr", 53);
			LeaveRule_cmp_expr();
		}
		DebugLocation(430, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:432:1: infix_expr : (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 54);
		TraceIn("infix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func284 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(432, 1);
		try
		{
			// SugarCpp.g:433:2: ( (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:433:4: (a= shift_expr -> $a) ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(433, 4);
			// SugarCpp.g:433:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:433:5: a= shift_expr
			{
			DebugLocation(433, 6);
			PushFollow(Follow._shift_expr_in_infix_expr3635);
			a=shift_expr();
			PopFollow();

			stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 433:18: -> $a
			{
				DebugLocation(433, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(433, 25);
			// SugarCpp.g:433:25: ( infix_func b= shift_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(113);
			while (true)
			{
				int alt113=2;
				try { DebugEnterDecision(113, false);
				int LA113_0 = input.LA(1);

				if ((LA113_0==116))
				{
					alt113 = 1;
				}


				} finally { DebugExitDecision(113); }
				switch ( alt113 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:433:27: infix_func b= shift_expr
					{
					DebugLocation(433, 27);
					PushFollow(Follow._infix_func_in_infix_expr3645);
					infix_func284=infix_func();
					PopFollow();

					stream_infix_func.Add(infix_func284.Tree);
					DebugLocation(433, 39);
					PushFollow(Follow._shift_expr_in_infix_expr3649);
					b=shift_expr();
					PopFollow();

					stream_shift_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, infix_func, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 433:52: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(433, 55);
						// SugarCpp.g:433:55: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(433, 57);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(433, 68);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(433, 80);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(433, 92);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop113;
				}
			}

			loop113:
				;

			} finally { DebugExitSubRule(113); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 54);
			LeaveRule("infix_expr", 54);
			LeaveRule_infix_expr();
		}
		DebugLocation(434, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:436:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 55);
		TraceIn("shift_expr_op", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set285 = default(IToken);

		CommonTree set285_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(436, 27);
		try
		{
			// SugarCpp.g:436:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(436, 14);

			set285=(IToken)input.LT(1);
			if (input.LA(1)==99||input.LA(1)==107)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set285));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 55);
			LeaveRule("shift_expr_op", 55);
			LeaveRule_shift_expr_op();
		}
		DebugLocation(436, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:437:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 56);
		TraceIn("shift_expr", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op286 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(437, 1);
		try
		{
			// SugarCpp.g:438:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:438:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(438, 4);
			// SugarCpp.g:438:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:438:5: a= add_expr
			{
			DebugLocation(438, 6);
			PushFollow(Follow._add_expr_in_shift_expr3692);
			a=add_expr();
			PopFollow();

			stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 438:16: -> $a
			{
				DebugLocation(438, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(438, 23);
			// SugarCpp.g:438:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(114);
			while (true)
			{
				int alt114=2;
				try { DebugEnterDecision(114, false);
				int LA114_0 = input.LA(1);

				if ((LA114_0==99||LA114_0==107))
				{
					alt114 = 1;
				}


				} finally { DebugExitDecision(114); }
				switch ( alt114 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:438:24: shift_expr_op b= add_expr
					{
					DebugLocation(438, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr3701);
					shift_expr_op286=shift_expr_op();
					PopFollow();

					stream_shift_expr_op.Add(shift_expr_op286.Tree);
					DebugLocation(438, 39);
					PushFollow(Follow._add_expr_in_shift_expr3705);
					b=add_expr();
					PopFollow();

					stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 438:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(438, 52);
						// SugarCpp.g:438:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(438, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(438, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(438, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(438, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop114;
				}
			}

			loop114:
				;

			} finally { DebugExitSubRule(114); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 56);
			LeaveRule("shift_expr", 56);
			LeaveRule_shift_expr();
		}
		DebugLocation(439, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:441:1: add_expr : (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 57);
		TraceIn("add_expr", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal287 = default(IToken);
		IToken char_literal288 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal287_tree = default(CommonTree);
		CommonTree char_literal288_tree = default(CommonTree);
		RewriteRuleITokenStream stream_81=new RewriteRuleITokenStream(adaptor,"token 81");
		RewriteRuleITokenStream stream_85=new RewriteRuleITokenStream(adaptor,"token 85");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(441, 1);
		try
		{
			// SugarCpp.g:442:2: ( (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:442:4: (a= mul_expr -> $a) ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(442, 4);
			// SugarCpp.g:442:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:442:5: a= mul_expr
			{
			DebugLocation(442, 6);
			PushFollow(Follow._mul_expr_in_add_expr3735);
			a=mul_expr();
			PopFollow();

			stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 442:16: -> $a
			{
				DebugLocation(442, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(442, 23);
			// SugarCpp.g:442:23: ( '+' b= mul_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= mul_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(115);
			while (true)
			{
				int alt115=3;
				try { DebugEnterDecision(115, false);
				int LA115_0 = input.LA(1);

				if ((LA115_0==81))
				{
					alt115 = 1;
				}
				else if ((LA115_0==85))
				{
					alt115 = 2;
				}


				} finally { DebugExitDecision(115); }
				switch ( alt115 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:442:25: '+' b= mul_expr
					{
					DebugLocation(442, 25);
					char_literal287=(IToken)Match(input,81,Follow._81_in_add_expr3745);  
					stream_81.Add(char_literal287);

					DebugLocation(442, 30);
					PushFollow(Follow._mul_expr_in_add_expr3749);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 81, add_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 442:40: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(442, 43);
						// SugarCpp.g:442:43: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(442, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(442, 54);
						adaptor.AddChild(root_1, stream_81.NextNode());
						DebugLocation(442, 59);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(442, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:443:10: '-' b= mul_expr
					{
					DebugLocation(443, 10);
					char_literal288=(IToken)Match(input,85,Follow._85_in_add_expr3774);  
					stream_85.Add(char_literal288);

					DebugLocation(443, 15);
					PushFollow(Follow._mul_expr_in_add_expr3778);
					b=mul_expr();
					PopFollow();

					stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 85, b, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 443:25: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(443, 28);
						// SugarCpp.g:443:28: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(443, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(443, 39);
						adaptor.AddChild(root_1, stream_85.NextNode());
						DebugLocation(443, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(443, 54);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop115;
				}
			}

			loop115:
				;

			} finally { DebugExitSubRule(115); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 57);
			LeaveRule("add_expr", 57);
			LeaveRule_add_expr();
		}
		DebugLocation(445, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:447:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 58);
		TraceIn("mul_expr", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal289 = default(IToken);
		IToken char_literal290 = default(IToken);
		IToken char_literal291 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal289_tree = default(CommonTree);
		CommonTree char_literal290_tree = default(CommonTree);
		CommonTree char_literal291_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(447, 1);
		try
		{
			// SugarCpp.g:448:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:448:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(448, 4);
			// SugarCpp.g:448:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:448:5: a= selector_expr
			{
			DebugLocation(448, 6);
			PushFollow(Follow._selector_expr_in_mul_expr3816);
			a=selector_expr();
			PopFollow();

			stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 448:21: -> $a
			{
				DebugLocation(448, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(448, 28);
			// SugarCpp.g:448:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(116);
			while (true)
			{
				int alt116=4;
				try { DebugEnterDecision(116, false);
				switch (input.LA(1))
				{
				case 79:
					{
					alt116 = 1;
					}
					break;
				case 92:
					{
					alt116 = 2;
					}
					break;
				case 72:
					{
					alt116 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(116); }
				switch ( alt116 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:448:30: '*' b= selector_expr
					{
					DebugLocation(448, 30);
					char_literal289=(IToken)Match(input,79,Follow._79_in_mul_expr3826);  
					stream_79.Add(char_literal289);

					DebugLocation(448, 35);
					PushFollow(Follow._selector_expr_in_mul_expr3830);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: mul_expr, 79, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 448:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(448, 53);
						// SugarCpp.g:448:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(448, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(448, 64);
						adaptor.AddChild(root_1, stream_79.NextNode());
						DebugLocation(448, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(448, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:449:15: '/' b= selector_expr
					{
					DebugLocation(449, 15);
					char_literal290=(IToken)Match(input,92,Follow._92_in_mul_expr3860);  
					stream_92.Add(char_literal290);

					DebugLocation(449, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3864);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 92, b, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 449:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(449, 38);
						// SugarCpp.g:449:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(449, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(449, 49);
						adaptor.AddChild(root_1, stream_92.NextNode());
						DebugLocation(449, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(449, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:450:15: '%' b= selector_expr
					{
					DebugLocation(450, 15);
					char_literal291=(IToken)Match(input,72,Follow._72_in_mul_expr3894);  
					stream_72.Add(char_literal291);

					DebugLocation(450, 20);
					PushFollow(Follow._selector_expr_in_mul_expr3898);
					b=selector_expr();
					PopFollow();

					stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 72, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 450:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(450, 38);
						// SugarCpp.g:450:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(450, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(450, 49);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(450, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(450, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop116;
				}
			}

			loop116:
				;

			} finally { DebugExitSubRule(116); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 58);
			LeaveRule("mul_expr", 58);
			LeaveRule_mul_expr();
		}
		DebugLocation(452, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:454:1: selector_expr : (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 59);
		TraceIn("selector_expr", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal292 = default(IToken);
		IToken string_literal293 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal292_tree = default(CommonTree);
		CommonTree string_literal293_tree = default(CommonTree);
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_89=new RewriteRuleITokenStream(adaptor,"token 89");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_cast_expr=new RewriteRuleSubtreeStream(adaptor,"rule cast_expr");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(454, 1);
		try
		{
			// SugarCpp.g:455:2: ( (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:455:4: (a= cast_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(455, 4);
			// SugarCpp.g:455:4: (a= cast_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:455:5: a= cast_expr
			{
			DebugLocation(455, 6);
			PushFollow(Follow._cast_expr_in_selector_expr3941);
			a=cast_expr();
			PopFollow();

			stream_cast_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 455:17: -> $a
			{
				DebugLocation(455, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(455, 24);
			// SugarCpp.g:455:24: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(117);
			while (true)
			{
				int alt117=3;
				try { DebugEnterDecision(117, false);
				int LA117_0 = input.LA(1);

				if ((LA117_0==89))
				{
					alt117 = 1;
				}
				else if ((LA117_0==91))
				{
					alt117 = 2;
				}


				} finally { DebugExitDecision(117); }
				switch ( alt117 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:455:26: '->*' b= ident
					{
					DebugLocation(455, 26);
					string_literal292=(IToken)Match(input,89,Follow._89_in_selector_expr3951);  
					stream_89.Add(string_literal292);

					DebugLocation(455, 33);
					PushFollow(Follow._ident_in_selector_expr3955);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, 89, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 455:40: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(455, 43);
						// SugarCpp.g:455:43: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(455, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(455, 57);
						adaptor.AddChild(root_1, stream_89.NextNode());
						DebugLocation(455, 64);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(455, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:456:11: '.*' b= ident
					{
					DebugLocation(456, 11);
					string_literal293=(IToken)Match(input,91,Follow._91_in_selector_expr3981);  
					stream_91.Add(string_literal293);

					DebugLocation(456, 18);
					PushFollow(Follow._ident_in_selector_expr3986);
					b=ident();
					PopFollow();

					stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 91, selector_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 456:25: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(456, 28);
						// SugarCpp.g:456:28: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(456, 30);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(456, 42);
						adaptor.AddChild(root_1, stream_91.NextNode());
						DebugLocation(456, 49);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(456, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop117;
				}
			}

			loop117:
				;

			} finally { DebugExitSubRule(117); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 59);
			LeaveRule("selector_expr", 59);
			LeaveRule_selector_expr();
		}
		DebugLocation(458, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_cast_expr();
	partial void LeaveRule_cast_expr();

	// $ANTLR start "cast_expr"
	// SugarCpp.g:460:1: cast_expr : (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? ;
	[GrammarRule("cast_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cast_expr()
	{
		EnterRule_cast_expr();
		EnterRule("cast_expr", 60);
		TraceIn("cast_expr", 60);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal294 = default(IToken);
		IToken char_literal295 = default(IToken);
		IToken char_literal297 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name296 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal294_tree = default(CommonTree);
		CommonTree char_literal295_tree = default(CommonTree);
		CommonTree char_literal297_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_118=new RewriteRuleITokenStream(adaptor,"token 118");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "cast_expr");
		DebugLocation(460, 1);
		try
		{
			// SugarCpp.g:461:2: ( (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:461:4: (a= prefix_expr -> $a) ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			{
			DebugLocation(461, 4);
			// SugarCpp.g:461:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:461:5: a= prefix_expr
			{
			DebugLocation(461, 6);
			PushFollow(Follow._prefix_expr_in_cast_expr4026);
			a=prefix_expr();
			PopFollow();

			stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 461:19: -> $a
			{
				DebugLocation(461, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(461, 26);
			// SugarCpp.g:461:26: ( 'as' '(' type_name ')' -> ^( Expr_Cast type_name prefix_expr ) )?
			int alt118=2;
			try { DebugEnterSubRule(118);
			try { DebugEnterDecision(118, false);
			int LA118_0 = input.LA(1);

			if ((LA118_0==118))
			{
				alt118 = 1;
			}
			} finally { DebugExitDecision(118); }
			switch (alt118)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:461:27: 'as' '(' type_name ')'
				{
				DebugLocation(461, 27);
				string_literal294=(IToken)Match(input,118,Follow._118_in_cast_expr4035);  
				stream_118.Add(string_literal294);

				DebugLocation(461, 32);
				char_literal295=(IToken)Match(input,77,Follow._77_in_cast_expr4037);  
				stream_77.Add(char_literal295);

				DebugLocation(461, 36);
				PushFollow(Follow._type_name_in_cast_expr4039);
				type_name296=type_name();
				PopFollow();

				stream_type_name.Add(type_name296.Tree);
				DebugLocation(461, 46);
				char_literal297=(IToken)Match(input,78,Follow._78_in_cast_expr4041);  
				stream_78.Add(char_literal297);



				{
				// AST REWRITE
				// elements: prefix_expr, type_name
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 461:50: -> ^( Expr_Cast type_name prefix_expr )
				{
					DebugLocation(461, 53);
					// SugarCpp.g:461:53: ^( Expr_Cast type_name prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(461, 55);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cast, "Expr_Cast"), root_1);

					DebugLocation(461, 65);
					adaptor.AddChild(root_1, stream_type_name.NextTree());
					DebugLocation(461, 75);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(118); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cast_expr", 60);
			LeaveRule("cast_expr", 60);
			LeaveRule_cast_expr();
		}
		DebugLocation(462, 1);
		} finally { DebugExitRule(GrammarFileName, "cast_expr"); }
		return retval;

	}
	// $ANTLR end "cast_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:464:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 61);
		TraceIn("prefix_expr_op", 61);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken set298 = default(IToken);

		CommonTree set298_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(464, 63);
		try
		{
			// SugarCpp.g:464:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(464, 15);

			set298=(IToken)input.LT(1);
			if (input.LA(1)==70||input.LA(1)==75||input.LA(1)==79||(input.LA(1)>=81 && input.LA(1)<=82)||(input.LA(1)>=85 && input.LA(1)<=86)||input.LA(1)==153)
			{
				input.Consume();
				adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set298));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 61);
			LeaveRule("prefix_expr_op", 61);
			LeaveRule_prefix_expr_op();
		}
		DebugLocation(464, 63);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:465:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 62);
		TraceIn("prefix_expr", 62);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal301 = default(IToken);
		IToken char_literal303 = default(IToken);
		IToken char_literal305 = default(IToken);
		IToken char_literal306 = default(IToken);
		IToken char_literal308 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op299 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr300 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name302 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list304 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list307 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr309 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal301_tree = default(CommonTree);
		CommonTree char_literal303_tree = default(CommonTree);
		CommonTree char_literal305_tree = default(CommonTree);
		CommonTree char_literal306_tree = default(CommonTree);
		CommonTree char_literal308_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_139=new RewriteRuleITokenStream(adaptor,"token 139");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(465, 1);
		try
		{
			// SugarCpp.g:466:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt121=3;
			try { DebugEnterDecision(121, false);
			switch (input.LA(1))
			{
			case 70:
			case 75:
			case 79:
			case 81:
			case 82:
			case 85:
			case 86:
			case 153:
				{
				alt121 = 1;
				}
				break;
			case 139:
				{
				alt121 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 77:
			case 111:
				{
				alt121 = 3;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 121, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(121); }
			switch (alt121)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:466:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(466, 4);
				// SugarCpp.g:466:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:466:5: prefix_expr_op prefix_expr
				{
				DebugLocation(466, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr4099);
				prefix_expr_op299=prefix_expr_op();
				PopFollow();

				stream_prefix_expr_op.Add(prefix_expr_op299.Tree);
				DebugLocation(466, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr4101);
				prefix_expr300=prefix_expr();
				PopFollow();

				stream_prefix_expr.Add(prefix_expr300.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 466:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(466, 36);
					// SugarCpp.g:466:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(466, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(466, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(466, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:467:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(467, 4);
				string_literal301=(IToken)Match(input,139,Follow._139_in_prefix_expr4117);  
				stream_139.Add(string_literal301);

				DebugLocation(467, 10);
				PushFollow(Follow._type_name_in_prefix_expr4119);
				type_name302=type_name();
				PopFollow();

				stream_type_name.Add(type_name302.Tree);
				DebugLocation(467, 20);
				// SugarCpp.g:467:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt120=2;
				try { DebugEnterSubRule(120);
				try { DebugEnterDecision(120, false);
				int LA120_0 = input.LA(1);

				if ((LA120_0==77))
				{
					alt120 = 1;
				}
				else if ((LA120_0==112))
				{
					alt120 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 120, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(120); }
				switch (alt120)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:467:22: '(' ( expr_list )? ')'
					{
					DebugLocation(467, 22);
					char_literal303=(IToken)Match(input,77,Follow._77_in_prefix_expr4123);  
					stream_77.Add(char_literal303);

					DebugLocation(467, 26);
					// SugarCpp.g:467:26: ( expr_list )?
					int alt119=2;
					try { DebugEnterSubRule(119);
					try { DebugEnterDecision(119, false);
					int LA119_0 = input.LA(1);

					if ((LA119_0==IDENT||LA119_0==NUMBER||LA119_0==STRING||LA119_0==70||LA119_0==75||LA119_0==77||LA119_0==79||(LA119_0>=81 && LA119_0<=82)||(LA119_0>=85 && LA119_0<=86)||LA119_0==111||LA119_0==139||LA119_0==153))
					{
						alt119 = 1;
					}
					} finally { DebugExitDecision(119); }
					switch (alt119)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:467:26: expr_list
						{
						DebugLocation(467, 26);
						PushFollow(Follow._expr_list_in_prefix_expr4125);
						expr_list304=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list304.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(119); }

					DebugLocation(467, 37);
					char_literal305=(IToken)Match(input,78,Follow._78_in_prefix_expr4128);  
					stream_78.Add(char_literal305);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 467:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(467, 44);
						// SugarCpp.g:467:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(467, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(467, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(467, 70);
						// SugarCpp.g:467:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(467, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:468:10: '[' expr_list ']'
					{
					DebugLocation(468, 10);
					char_literal306=(IToken)Match(input,112,Follow._112_in_prefix_expr4150);  
					stream_112.Add(char_literal306);

					DebugLocation(468, 14);
					PushFollow(Follow._expr_list_in_prefix_expr4152);
					expr_list307=expr_list();
					PopFollow();

					stream_expr_list.Add(expr_list307.Tree);
					DebugLocation(468, 24);
					char_literal308=(IToken)Match(input,113,Follow._113_in_prefix_expr4154);  
					stream_113.Add(char_literal308);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 468:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(468, 31);
						// SugarCpp.g:468:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(468, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(468, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(468, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(120); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:469:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(469, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr4170);
				suffix_expr309=suffix_expr();
				PopFollow();

				adaptor.AddChild(root_0, suffix_expr309.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 62);
			LeaveRule("prefix_expr", 62);
			LeaveRule_prefix_expr();
		}
		DebugLocation(470, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:472:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 63);
		TraceIn("expr_list", 63);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal311 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr310 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr312 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal311_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(472, 1);
		try
		{
			// SugarCpp.g:473:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:473:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(473, 4);
			PushFollow(Follow._expr_in_expr_list4182);
			expr310=expr();
			PopFollow();

			adaptor.AddChild(root_0, expr310.Tree);
			DebugLocation(473, 9);
			// SugarCpp.g:473:9: ( ',' ! expr )*
			try { DebugEnterSubRule(122);
			while (true)
			{
				int alt122=2;
				try { DebugEnterDecision(122, false);
				int LA122_0 = input.LA(1);

				if ((LA122_0==84))
				{
					alt122 = 1;
				}


				} finally { DebugExitDecision(122); }
				switch ( alt122 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:473:10: ',' ! expr
					{
					DebugLocation(473, 13);
					char_literal311=(IToken)Match(input,84,Follow._84_in_expr_list4185); 
					DebugLocation(473, 15);
					PushFollow(Follow._expr_in_expr_list4188);
					expr312=expr();
					PopFollow();

					adaptor.AddChild(root_0, expr312.Tree);

					}
					break;

				default:
					goto loop122;
				}
			}

			loop122:
				;

			} finally { DebugExitSubRule(122); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 63);
			LeaveRule("expr_list", 63);
			LeaveRule_expr_list();
		}
		DebugLocation(474, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:476:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 64);
		TraceIn("suffix_expr", 64);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal313 = default(IToken);
		IToken string_literal314 = default(IToken);
		IToken char_literal315 = default(IToken);
		IToken string_literal317 = default(IToken);
		IToken char_literal319 = default(IToken);
		IToken char_literal321 = default(IToken);
		IToken char_literal322 = default(IToken);
		IToken char_literal324 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident316 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident318 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list320 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list323 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal313_tree = default(CommonTree);
		CommonTree string_literal314_tree = default(CommonTree);
		CommonTree char_literal315_tree = default(CommonTree);
		CommonTree string_literal317_tree = default(CommonTree);
		CommonTree char_literal319_tree = default(CommonTree);
		CommonTree char_literal321_tree = default(CommonTree);
		CommonTree char_literal322_tree = default(CommonTree);
		CommonTree char_literal324_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(476, 1);
		try
		{
			// SugarCpp.g:477:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:477:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			{
			DebugLocation(477, 4);
			// SugarCpp.g:477:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:477:5: a= atom_expr
			{
			DebugLocation(477, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr4204);
			a=atom_expr();
			PopFollow();

			stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 477:17: -> $a
			{
				DebugLocation(477, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(477, 24);
			// SugarCpp.g:477:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) )*
			try { DebugEnterSubRule(125);
			while (true)
			{
				int alt125=7;
				try { DebugEnterDecision(125, false);
				switch (input.LA(1))
				{
				case 82:
					{
					alt125 = 1;
					}
					break;
				case 86:
					{
					alt125 = 2;
					}
					break;
				case 90:
					{
					alt125 = 3;
					}
					break;
				case 88:
					{
					alt125 = 4;
					}
					break;
				case 77:
					{
					alt125 = 5;
					}
					break;
				case 112:
					{
					alt125 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(125); }
				switch ( alt125 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:477:26: '++'
					{
					DebugLocation(477, 26);
					string_literal313=(IToken)Match(input,82,Follow._82_in_suffix_expr4214);  
					stream_82.Add(string_literal313);



					{
					// AST REWRITE
					// elements: 82, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 477:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(477, 34);
						// SugarCpp.g:477:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(477, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(477, 48);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(477, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:478:14: '--'
					{
					DebugLocation(478, 14);
					string_literal314=(IToken)Match(input,86,Follow._86_in_suffix_expr4240);  
					stream_86.Add(string_literal314);



					{
					// AST REWRITE
					// elements: suffix_expr, 86
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 478:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(478, 22);
						// SugarCpp.g:478:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(478, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(478, 36);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(478, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:479:11: '.' ident
					{
					DebugLocation(479, 11);
					char_literal315=(IToken)Match(input,90,Follow._90_in_suffix_expr4263);  
					stream_90.Add(char_literal315);

					DebugLocation(479, 15);
					PushFollow(Follow._ident_in_suffix_expr4265);
					ident316=ident();
					PopFollow();

					stream_ident.Add(ident316.Tree);


					{
					// AST REWRITE
					// elements: 90, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 479:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(479, 24);
						// SugarCpp.g:479:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(479, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(479, 38);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(479, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(479, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:480:11: '->' ident
					{
					DebugLocation(480, 11);
					string_literal317=(IToken)Match(input,88,Follow._88_in_suffix_expr4290);  
					stream_88.Add(string_literal317);

					DebugLocation(480, 16);
					PushFollow(Follow._ident_in_suffix_expr4292);
					ident318=ident();
					PopFollow();

					stream_ident.Add(ident318.Tree);


					{
					// AST REWRITE
					// elements: suffix_expr, ident, 88
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 480:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(480, 25);
						// SugarCpp.g:480:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(480, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(480, 39);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(480, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(480, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:481:11: '(' ( expr_list )? ')'
					{
					DebugLocation(481, 11);
					char_literal319=(IToken)Match(input,77,Follow._77_in_suffix_expr4317);  
					stream_77.Add(char_literal319);

					DebugLocation(481, 15);
					// SugarCpp.g:481:15: ( expr_list )?
					int alt123=2;
					try { DebugEnterSubRule(123);
					try { DebugEnterDecision(123, false);
					int LA123_0 = input.LA(1);

					if ((LA123_0==IDENT||LA123_0==NUMBER||LA123_0==STRING||LA123_0==70||LA123_0==75||LA123_0==77||LA123_0==79||(LA123_0>=81 && LA123_0<=82)||(LA123_0>=85 && LA123_0<=86)||LA123_0==111||LA123_0==139||LA123_0==153))
					{
						alt123 = 1;
					}
					} finally { DebugExitDecision(123); }
					switch (alt123)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:481:15: expr_list
						{
						DebugLocation(481, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4319);
						expr_list320=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list320.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(123); }

					DebugLocation(481, 26);
					char_literal321=(IToken)Match(input,78,Follow._78_in_suffix_expr4322);  
					stream_78.Add(char_literal321);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 481:30: -> ^( Expr_Call $suffix_expr ( expr_list )? )
					{
						DebugLocation(481, 33);
						// SugarCpp.g:481:33: ^( Expr_Call $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(481, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(481, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(481, 58);
						// SugarCpp.g:481:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(481, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:482:11: '[' ( expr_list )? ']'
					{
					DebugLocation(482, 11);
					char_literal322=(IToken)Match(input,112,Follow._112_in_suffix_expr4346);  
					stream_112.Add(char_literal322);

					DebugLocation(482, 15);
					// SugarCpp.g:482:15: ( expr_list )?
					int alt124=2;
					try { DebugEnterSubRule(124);
					try { DebugEnterDecision(124, false);
					int LA124_0 = input.LA(1);

					if ((LA124_0==IDENT||LA124_0==NUMBER||LA124_0==STRING||LA124_0==70||LA124_0==75||LA124_0==77||LA124_0==79||(LA124_0>=81 && LA124_0<=82)||(LA124_0>=85 && LA124_0<=86)||LA124_0==111||LA124_0==139||LA124_0==153))
					{
						alt124 = 1;
					}
					} finally { DebugExitDecision(124); }
					switch (alt124)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:482:15: expr_list
						{
						DebugLocation(482, 15);
						PushFollow(Follow._expr_list_in_suffix_expr4348);
						expr_list323=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list323.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(124); }

					DebugLocation(482, 26);
					char_literal324=(IToken)Match(input,113,Follow._113_in_suffix_expr4351);  
					stream_113.Add(char_literal324);



					{
					// AST REWRITE
					// elements: suffix_expr, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 482:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(482, 33);
						// SugarCpp.g:482:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(482, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(482, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(482, 58);
						// SugarCpp.g:482:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(482, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop125;
				}
			}

			loop125:
				;

			} finally { DebugExitSubRule(125); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 64);
			LeaveRule("suffix_expr", 64);
			LeaveRule_suffix_expr();
		}
		DebugLocation(485, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:487:1: atom_expr : ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 65);
		TraceIn("atom_expr", 65);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER325 = default(IToken);
		IToken STRING327 = default(IToken);
		IToken char_literal328 = default(IToken);
		IToken char_literal330 = default(IToken);
		IToken char_literal332 = default(IToken);
		IToken char_literal334 = default(IToken);
		IToken char_literal335 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident326 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident329 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr331 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr333 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER325_tree = default(CommonTree);
		CommonTree STRING327_tree = default(CommonTree);
		CommonTree char_literal328_tree = default(CommonTree);
		CommonTree char_literal330_tree = default(CommonTree);
		CommonTree char_literal332_tree = default(CommonTree);
		CommonTree char_literal334_tree = default(CommonTree);
		CommonTree char_literal335_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(487, 1);
		try
		{
			// SugarCpp.g:488:2: ( NUMBER | ident | STRING | '@' ident -> ^( '@' ident ) | '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) ) )
			int alt128=5;
			try { DebugEnterDecision(128, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt128 = 1;
				}
				break;
			case IDENT:
				{
				alt128 = 2;
				}
				break;
			case STRING:
				{
				alt128 = 3;
				}
				break;
			case 111:
				{
				alt128 = 4;
				}
				break;
			case 77:
				{
				alt128 = 5;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 128, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(128); }
			switch (alt128)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:488:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(488, 4);
				NUMBER325=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr4397); 
				NUMBER325_tree = (CommonTree)adaptor.Create(NUMBER325);
				adaptor.AddChild(root_0, NUMBER325_tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:489:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(489, 4);
				PushFollow(Follow._ident_in_atom_expr4402);
				ident326=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident326.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:490:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(490, 4);
				STRING327=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr4407); 
				STRING327_tree = (CommonTree)adaptor.Create(STRING327);
				adaptor.AddChild(root_0, STRING327_tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:491:4: '@' ident
				{
				DebugLocation(491, 4);
				char_literal328=(IToken)Match(input,111,Follow._111_in_atom_expr4412);  
				stream_111.Add(char_literal328);

				DebugLocation(491, 8);
				PushFollow(Follow._ident_in_atom_expr4414);
				ident329=ident();
				PopFollow();

				stream_ident.Add(ident329.Tree);


				{
				// AST REWRITE
				// elements: 111, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 491:14: -> ^( '@' ident )
				{
					DebugLocation(491, 17);
					// SugarCpp.g:491:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(491, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_111.NextNode(), root_1);

					DebugLocation(491, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:492:4: '(' expr ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				{
				DebugLocation(492, 4);
				char_literal330=(IToken)Match(input,77,Follow._77_in_atom_expr4427);  
				stream_77.Add(char_literal330);

				DebugLocation(492, 8);
				PushFollow(Follow._expr_in_atom_expr4429);
				expr331=expr();
				PopFollow();

				stream_expr.Add(expr331.Tree);
				DebugLocation(492, 13);
				// SugarCpp.g:492:13: ( ( ',' expr )+ ')' -> ^( Expr_Tuple ( expr )+ ) | ')' -> ^( Expr_Bracket expr ) )
				int alt127=2;
				try { DebugEnterSubRule(127);
				try { DebugEnterDecision(127, false);
				int LA127_0 = input.LA(1);

				if ((LA127_0==84))
				{
					alt127 = 1;
				}
				else if ((LA127_0==78))
				{
					alt127 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 127, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(127); }
				switch (alt127)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:492:15: ( ',' expr )+ ')'
					{
					DebugLocation(492, 15);
					// SugarCpp.g:492:15: ( ',' expr )+
					int cnt126=0;
					try { DebugEnterSubRule(126);
					while (true)
					{
						int alt126=2;
						try { DebugEnterDecision(126, false);
						int LA126_0 = input.LA(1);

						if ((LA126_0==84))
						{
							alt126 = 1;
						}


						} finally { DebugExitDecision(126); }
						switch (alt126)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:492:16: ',' expr
							{
							DebugLocation(492, 16);
							char_literal332=(IToken)Match(input,84,Follow._84_in_atom_expr4434);  
							stream_84.Add(char_literal332);

							DebugLocation(492, 20);
							PushFollow(Follow._expr_in_atom_expr4436);
							expr333=expr();
							PopFollow();

							stream_expr.Add(expr333.Tree);

							}
							break;

						default:
							if (cnt126 >= 1)
								goto loop126;

							EarlyExitException eee126 = new EarlyExitException( 126, input );
							DebugRecognitionException(eee126);
							throw eee126;
						}
						cnt126++;
					}
					loop126:
						;

					} finally { DebugExitSubRule(126); }

					DebugLocation(492, 27);
					char_literal334=(IToken)Match(input,78,Follow._78_in_atom_expr4440);  
					stream_78.Add(char_literal334);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 492:31: -> ^( Expr_Tuple ( expr )+ )
					{
						DebugLocation(492, 34);
						// SugarCpp.g:492:34: ^( Expr_Tuple ( expr )+ )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(492, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

						DebugLocation(492, 47);
						if (!(stream_expr.HasNext))
						{
							throw new RewriteEarlyExitException();
						}
						while ( stream_expr.HasNext )
						{
							DebugLocation(492, 47);
							adaptor.AddChild(root_1, stream_expr.NextTree());

						}
						stream_expr.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:493:15: ')'
					{
					DebugLocation(493, 15);
					char_literal335=(IToken)Match(input,78,Follow._78_in_atom_expr4465);  
					stream_78.Add(char_literal335);



					{
					// AST REWRITE
					// elements: expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 493:19: -> ^( Expr_Bracket expr )
					{
						DebugLocation(493, 22);
						// SugarCpp.g:493:22: ^( Expr_Bracket expr )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(493, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

						DebugLocation(493, 37);
						adaptor.AddChild(root_1, stream_expr.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				}
				} finally { DebugExitSubRule(127); }


				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 65);
			LeaveRule("atom_expr", 65);
			LeaveRule_atom_expr();
		}
		DebugLocation(495, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue_item();
	partial void LeaveRule_lvalue_item();

	// $ANTLR start "lvalue_item"
	// SugarCpp.g:497:1: lvalue_item : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* ;
	[GrammarRule("lvalue_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_item()
	{
		EnterRule_lvalue_item();
		EnterRule("lvalue_item", 66);
		TraceIn("lvalue_item", 66);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken string_literal336 = default(IToken);
		IToken string_literal337 = default(IToken);
		IToken char_literal338 = default(IToken);
		IToken string_literal340 = default(IToken);
		IToken char_literal343 = default(IToken);
		IToken char_literal345 = default(IToken);
		IToken char_literal346 = default(IToken);
		IToken char_literal348 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident339 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident341 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter342 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list344 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list347 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal336_tree = default(CommonTree);
		CommonTree string_literal337_tree = default(CommonTree);
		CommonTree char_literal338_tree = default(CommonTree);
		CommonTree string_literal340_tree = default(CommonTree);
		CommonTree char_literal343_tree = default(CommonTree);
		CommonTree char_literal345_tree = default(CommonTree);
		CommonTree char_literal346_tree = default(CommonTree);
		CommonTree char_literal348_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_112=new RewriteRuleITokenStream(adaptor,"token 112");
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleITokenStream stream_90=new RewriteRuleITokenStream(adaptor,"token 90");
		RewriteRuleITokenStream stream_82=new RewriteRuleITokenStream(adaptor,"token 82");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleITokenStream stream_88=new RewriteRuleITokenStream(adaptor,"token 88");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue_item");
		DebugLocation(497, 1);
		try
		{
			// SugarCpp.g:498:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:498:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			{
			DebugLocation(498, 4);
			// SugarCpp.g:498:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:498:5: a= lvalue_atom
			{
			DebugLocation(498, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue_item4495);
			a=lvalue_atom();
			PopFollow();

			stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 498:19: -> $a
			{
				DebugLocation(498, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}

			}

			DebugLocation(498, 26);
			// SugarCpp.g:498:26: ( '++' -> ^( Expr_Suffix '++' $lvalue_item) | '--' -> ^( Expr_Suffix '--' $lvalue_item) | '.' ident -> ^( Expr_Access '.' $lvalue_item ident ) | '->' ident -> ^( Expr_Access '->' $lvalue_item ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue_item ( expr_list )? ) )*
			try { DebugEnterSubRule(132);
			while (true)
			{
				int alt132=7;
				try { DebugEnterDecision(132, false);
				switch (input.LA(1))
				{
				case 82:
					{
					alt132 = 1;
					}
					break;
				case 86:
					{
					alt132 = 2;
					}
					break;
				case 90:
					{
					alt132 = 3;
					}
					break;
				case 88:
					{
					alt132 = 4;
					}
					break;
				case 77:
				case 97:
					{
					alt132 = 5;
					}
					break;
				case 112:
					{
					alt132 = 6;
					}
					break;
				}

				} finally { DebugExitDecision(132); }
				switch ( alt132 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:498:28: '++'
					{
					DebugLocation(498, 28);
					string_literal336=(IToken)Match(input,82,Follow._82_in_lvalue_item4505);  
					stream_82.Add(string_literal336);



					{
					// AST REWRITE
					// elements: 82, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 498:33: -> ^( Expr_Suffix '++' $lvalue_item)
					{
						DebugLocation(498, 36);
						// SugarCpp.g:498:36: ^( Expr_Suffix '++' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(498, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(498, 50);
						adaptor.AddChild(root_1, stream_82.NextNode());
						DebugLocation(498, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:499:16: '--'
					{
					DebugLocation(499, 16);
					string_literal337=(IToken)Match(input,86,Follow._86_in_lvalue_item4533);  
					stream_86.Add(string_literal337);



					{
					// AST REWRITE
					// elements: 86, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 499:21: -> ^( Expr_Suffix '--' $lvalue_item)
					{
						DebugLocation(499, 24);
						// SugarCpp.g:499:24: ^( Expr_Suffix '--' $lvalue_item)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(499, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(499, 38);
						adaptor.AddChild(root_1, stream_86.NextNode());
						DebugLocation(499, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:500:13: '.' ident
					{
					DebugLocation(500, 13);
					char_literal338=(IToken)Match(input,90,Follow._90_in_lvalue_item4558);  
					stream_90.Add(char_literal338);

					DebugLocation(500, 17);
					PushFollow(Follow._ident_in_lvalue_item4560);
					ident339=ident();
					PopFollow();

					stream_ident.Add(ident339.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, 90, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 500:23: -> ^( Expr_Access '.' $lvalue_item ident )
					{
						DebugLocation(500, 26);
						// SugarCpp.g:500:26: ^( Expr_Access '.' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(500, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(500, 40);
						adaptor.AddChild(root_1, stream_90.NextNode());
						DebugLocation(500, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(500, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:501:13: '->' ident
					{
					DebugLocation(501, 13);
					string_literal340=(IToken)Match(input,88,Follow._88_in_lvalue_item4587);  
					stream_88.Add(string_literal340);

					DebugLocation(501, 18);
					PushFollow(Follow._ident_in_lvalue_item4589);
					ident341=ident();
					PopFollow();

					stream_ident.Add(ident341.Tree);


					{
					// AST REWRITE
					// elements: lvalue_item, ident, 88
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 501:24: -> ^( Expr_Access '->' $lvalue_item ident )
					{
						DebugLocation(501, 27);
						// SugarCpp.g:501:27: ^( Expr_Access '->' $lvalue_item ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(501, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(501, 41);
						adaptor.AddChild(root_1, stream_88.NextNode());
						DebugLocation(501, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(501, 59);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:502:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(502, 13);
					// SugarCpp.g:502:13: ( generic_parameter )?
					int alt129=2;
					try { DebugEnterSubRule(129);
					try { DebugEnterDecision(129, false);
					int LA129_0 = input.LA(1);

					if ((LA129_0==97))
					{
						alt129 = 1;
					}
					} finally { DebugExitDecision(129); }
					switch (alt129)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:502:13: generic_parameter
						{
						DebugLocation(502, 13);
						PushFollow(Follow._generic_parameter_in_lvalue_item4616);
						generic_parameter342=generic_parameter();
						PopFollow();

						stream_generic_parameter.Add(generic_parameter342.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(129); }

					DebugLocation(502, 32);
					char_literal343=(IToken)Match(input,77,Follow._77_in_lvalue_item4619);  
					stream_77.Add(char_literal343);

					DebugLocation(502, 36);
					// SugarCpp.g:502:36: ( expr_list )?
					int alt130=2;
					try { DebugEnterSubRule(130);
					try { DebugEnterDecision(130, false);
					int LA130_0 = input.LA(1);

					if ((LA130_0==IDENT||LA130_0==NUMBER||LA130_0==STRING||LA130_0==70||LA130_0==75||LA130_0==77||LA130_0==79||(LA130_0>=81 && LA130_0<=82)||(LA130_0>=85 && LA130_0<=86)||LA130_0==111||LA130_0==139||LA130_0==153))
					{
						alt130 = 1;
					}
					} finally { DebugExitDecision(130); }
					switch (alt130)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:502:36: expr_list
						{
						DebugLocation(502, 36);
						PushFollow(Follow._expr_list_in_lvalue_item4621);
						expr_list344=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list344.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(130); }

					DebugLocation(502, 47);
					char_literal345=(IToken)Match(input,78,Follow._78_in_lvalue_item4624);  
					stream_78.Add(char_literal345);



					{
					// AST REWRITE
					// elements: expr_list, generic_parameter, lvalue_item
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 502:51: -> ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(502, 54);
						// SugarCpp.g:502:54: ^( Expr_Call $lvalue_item ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(502, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(502, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(502, 79);
						// SugarCpp.g:502:79: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(502, 79);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(502, 98);
						// SugarCpp.g:502:98: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(502, 98);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:503:13: '[' ( expr_list )? ']'
					{
					DebugLocation(503, 13);
					char_literal346=(IToken)Match(input,112,Follow._112_in_lvalue_item4653);  
					stream_112.Add(char_literal346);

					DebugLocation(503, 17);
					// SugarCpp.g:503:17: ( expr_list )?
					int alt131=2;
					try { DebugEnterSubRule(131);
					try { DebugEnterDecision(131, false);
					int LA131_0 = input.LA(1);

					if ((LA131_0==IDENT||LA131_0==NUMBER||LA131_0==STRING||LA131_0==70||LA131_0==75||LA131_0==77||LA131_0==79||(LA131_0>=81 && LA131_0<=82)||(LA131_0>=85 && LA131_0<=86)||LA131_0==111||LA131_0==139||LA131_0==153))
					{
						alt131 = 1;
					}
					} finally { DebugExitDecision(131); }
					switch (alt131)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:503:17: expr_list
						{
						DebugLocation(503, 17);
						PushFollow(Follow._expr_list_in_lvalue_item4655);
						expr_list347=expr_list();
						PopFollow();

						stream_expr_list.Add(expr_list347.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(131); }

					DebugLocation(503, 28);
					char_literal348=(IToken)Match(input,113,Follow._113_in_lvalue_item4658);  
					stream_113.Add(char_literal348);



					{
					// AST REWRITE
					// elements: lvalue_item, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 503:32: -> ^( Expr_Dict $lvalue_item ( expr_list )? )
					{
						DebugLocation(503, 35);
						// SugarCpp.g:503:35: ^( Expr_Dict $lvalue_item ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(503, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(503, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(503, 60);
						// SugarCpp.g:503:60: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(503, 60);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}

					}
					break;

				default:
					goto loop132;
				}
			}

			loop132:
				;

			} finally { DebugExitSubRule(132); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_item", 66);
			LeaveRule("lvalue_item", 66);
			LeaveRule_lvalue_item();
		}
		DebugLocation(505, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_item"); }
		return retval;

	}
	// $ANTLR end "lvalue_item"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:507:1: lvalue_atom : ( ident | '@' ident -> ^( '@' ident ) );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 67);
		TraceIn("lvalue_atom", 67);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal350 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident349 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident351 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal350_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(507, 1);
		try
		{
			// SugarCpp.g:508:2: ( ident | '@' ident -> ^( '@' ident ) )
			int alt133=2;
			try { DebugEnterDecision(133, false);
			int LA133_0 = input.LA(1);

			if ((LA133_0==IDENT))
			{
				alt133 = 1;
			}
			else if ((LA133_0==111))
			{
				alt133 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 133, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(133); }
			switch (alt133)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:508:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(508, 4);
				PushFollow(Follow._ident_in_lvalue_atom4697);
				ident349=ident();
				PopFollow();

				adaptor.AddChild(root_0, ident349.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:509:4: '@' ident
				{
				DebugLocation(509, 4);
				char_literal350=(IToken)Match(input,111,Follow._111_in_lvalue_atom4702);  
				stream_111.Add(char_literal350);

				DebugLocation(509, 8);
				PushFollow(Follow._ident_in_lvalue_atom4704);
				ident351=ident();
				PopFollow();

				stream_ident.Add(ident351.Tree);


				{
				// AST REWRITE
				// elements: 111, ident
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 509:14: -> ^( '@' ident )
				{
					DebugLocation(509, 17);
					// SugarCpp.g:509:17: ^( '@' ident )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(509, 19);
					root_1 = (CommonTree)adaptor.BecomeRoot(stream_111.NextNode(), root_1);

					DebugLocation(509, 23);
					adaptor.AddChild(root_1, stream_ident.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 67);
			LeaveRule("lvalue_atom", 67);
			LeaveRule_lvalue_atom();
		}
		DebugLocation(510, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:512:1: lvalue : ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item );
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 68);
		TraceIn("lvalue", 68);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal352 = default(IToken);
		IToken char_literal354 = default(IToken);
		IToken char_literal356 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item353 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item355 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue_item357 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal352_tree = default(CommonTree);
		CommonTree char_literal354_tree = default(CommonTree);
		CommonTree char_literal356_tree = default(CommonTree);
		RewriteRuleITokenStream stream_78=new RewriteRuleITokenStream(adaptor,"token 78");
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_lvalue_item=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_item");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(512, 1);
		try
		{
			// SugarCpp.g:513:2: ( '(' lvalue_item ( ',' lvalue_item )+ ')' -> ^( Match_Tuple ( lvalue_item )* ) | lvalue_item )
			int alt135=2;
			try { DebugEnterDecision(135, false);
			int LA135_0 = input.LA(1);

			if ((LA135_0==77))
			{
				alt135 = 1;
			}
			else if ((LA135_0==IDENT||LA135_0==111))
			{
				alt135 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 135, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(135); }
			switch (alt135)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:513:4: '(' lvalue_item ( ',' lvalue_item )+ ')'
				{
				DebugLocation(513, 4);
				char_literal352=(IToken)Match(input,77,Follow._77_in_lvalue4723);  
				stream_77.Add(char_literal352);

				DebugLocation(513, 8);
				PushFollow(Follow._lvalue_item_in_lvalue4725);
				lvalue_item353=lvalue_item();
				PopFollow();

				stream_lvalue_item.Add(lvalue_item353.Tree);
				DebugLocation(513, 20);
				// SugarCpp.g:513:20: ( ',' lvalue_item )+
				int cnt134=0;
				try { DebugEnterSubRule(134);
				while (true)
				{
					int alt134=2;
					try { DebugEnterDecision(134, false);
					int LA134_0 = input.LA(1);

					if ((LA134_0==84))
					{
						alt134 = 1;
					}


					} finally { DebugExitDecision(134); }
					switch (alt134)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:513:21: ',' lvalue_item
						{
						DebugLocation(513, 21);
						char_literal354=(IToken)Match(input,84,Follow._84_in_lvalue4728);  
						stream_84.Add(char_literal354);

						DebugLocation(513, 25);
						PushFollow(Follow._lvalue_item_in_lvalue4730);
						lvalue_item355=lvalue_item();
						PopFollow();

						stream_lvalue_item.Add(lvalue_item355.Tree);

						}
						break;

					default:
						if (cnt134 >= 1)
							goto loop134;

						EarlyExitException eee134 = new EarlyExitException( 134, input );
						DebugRecognitionException(eee134);
						throw eee134;
					}
					cnt134++;
				}
				loop134:
					;

				} finally { DebugExitSubRule(134); }

				DebugLocation(513, 39);
				char_literal356=(IToken)Match(input,78,Follow._78_in_lvalue4734);  
				stream_78.Add(char_literal356);



				{
				// AST REWRITE
				// elements: lvalue_item
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 513:43: -> ^( Match_Tuple ( lvalue_item )* )
				{
					DebugLocation(513, 46);
					// SugarCpp.g:513:46: ^( Match_Tuple ( lvalue_item )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(513, 48);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(513, 60);
					// SugarCpp.g:513:60: ( lvalue_item )*
					while ( stream_lvalue_item.HasNext )
					{
						DebugLocation(513, 60);
						adaptor.AddChild(root_1, stream_lvalue_item.NextTree());

					}
					stream_lvalue_item.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:514:4: lvalue_item
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(514, 4);
				PushFollow(Follow._lvalue_item_in_lvalue4748);
				lvalue_item357=lvalue_item();
				PopFollow();

				adaptor.AddChild(root_0, lvalue_item357.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 68);
			LeaveRule("lvalue", 68);
			LeaveRule_lvalue();
		}
		DebugLocation(515, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:517:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 69);
		TraceIn("ident", 69);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken IDENT358 = default(IToken);
		IToken string_literal359 = default(IToken);
		IToken IDENT360 = default(IToken);

		CommonTree IDENT358_tree = default(CommonTree);
		CommonTree string_literal359_tree = default(CommonTree);
		CommonTree IDENT360_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(517, 1);
		try
		{
			// SugarCpp.g:518:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:518:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(518, 4);
			IDENT358=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4759); 
			IDENT358_tree = (CommonTree)adaptor.Create(IDENT358);
			adaptor.AddChild(root_0, IDENT358_tree);
			DebugLocation(518, 10);
			// SugarCpp.g:518:10: ( '::' IDENT )*
			try { DebugEnterSubRule(136);
			while (true)
			{
				int alt136=2;
				try { DebugEnterDecision(136, false);
				int LA136_0 = input.LA(1);

				if ((LA136_0==95))
				{
					alt136 = 1;
				}


				} finally { DebugExitDecision(136); }
				switch ( alt136 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:518:11: '::' IDENT
					{
					DebugLocation(518, 11);
					string_literal359=(IToken)Match(input,95,Follow._95_in_ident4762); 
					string_literal359_tree = (CommonTree)adaptor.Create(string_literal359);
					adaptor.AddChild(root_0, string_literal359_tree);
					DebugLocation(518, 16);
					IDENT360=(IToken)Match(input,IDENT,Follow._IDENT_in_ident4764); 
					IDENT360_tree = (CommonTree)adaptor.Create(IDENT360);
					adaptor.AddChild(root_0, IDENT360_tree);

					}
					break;

				default:
					goto loop136;
				}
			}

			loop136:
				;

			} finally { DebugExitSubRule(136); }


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 69);
			LeaveRule("ident", 69);
			LeaveRule_ident();
		}
		DebugLocation(519, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:521:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 70);
		TraceIn("infix_func", 70);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);

		CommonTree root_0 = default(CommonTree);

		IToken char_literal361 = default(IToken);
		IToken char_literal363 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident362 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal361_tree = default(CommonTree);
		CommonTree char_literal363_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(521, 1);
		try
		{
			// SugarCpp.g:522:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:522:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(522, 7);
			char_literal361=(IToken)Match(input,116,Follow._116_in_infix_func4777); 
			DebugLocation(522, 9);
			PushFollow(Follow._ident_in_infix_func4780);
			ident362=ident();
			PopFollow();

			adaptor.AddChild(root_0, ident362.Tree);
			DebugLocation(522, 18);
			char_literal363=(IToken)Match(input,116,Follow._116_in_infix_func4782); 

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 70);
			LeaveRule("infix_func", 70);
			LeaveRule_infix_func();
		}
		DebugLocation(523, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"
	#endregion Rules


	#region DFA
	private DFA4 dfa4;
	private DFA25 dfa25;
	private DFA38 dfa38;
	private DFA53 dfa53;
	private DFA64 dfa64;
	private DFA71 dfa71;
	private DFA97 dfa97;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa4 = new DFA4( this );
		dfa25 = new DFA25( this );
		dfa38 = new DFA38( this );
		dfa53 = new DFA53( this );
		dfa64 = new DFA64( this );
		dfa71 = new DFA71( this );
		dfa97 = new DFA97( this );
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\x4C\xFFFF";
		private const string DFA4_eofS =
			"\x4C\xFFFF";
		private const string DFA4_minS =
			"\x2\x23\x1\xFFFF\x1\x23\x6\xFFFF\x2\x4D\x1\x23\x1\xFFFF\x3\x23\x1\x2E"+
			"\x2\x23\x1\x4D\x3\x4E\x2\x4D\x1\x23\x3\x4E\x1\x23\x1\x54\x5\x23\x1\x54"+
			"\x1\x23\x4\x4E\x1\x4D\xA\x4E\x2\x23\x1\x54\x2\x23\x1\x54\x2\x23\xA\x4E"+
			"\x2\x23\x2\x4E";
		private const string DFA4_maxS =
			"\x1\x99\x1\x7A\x1\xFFFF\x1\x99\x6\xFFFF\x2\x71\x1\x23\x1\xFFFF\x1\x23"+
			"\x1\x34\x1\x7A\x1\x2E\x1\x34\x1\x99\x1\x71\x2\x54\x1\x5F\x2\x71\x1\x99"+
			"\x2\x54\x1\x5F\x1\x34\x1\x71\x2\x23\x3\x34\x1\x71\x1\x23\x2\x54\x2\x5F"+
			"\x1\x71\x2\x54\x1\x5F\x2\x54\x1\x5F\x2\x54\x2\x5F\x1\x23\x1\x34\x1\x71"+
			"\x1\x23\x1\x34\x1\x71\x2\x23\x1\x5F\x2\x54\x2\x5F\x2\x54\x3\x5F\x2\x23"+
			"\x2\x5F";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\x3\x1\x5\x1\x6\x1\x7\x1\x8\x3\xFFFF"+
			"\x1\x4\x3E\xFFFF";
		private const string DFA4_specialS =
			"\x4C\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x3\x4C\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF\x1\x5\x4\xFFFF"+
				"\x1\x8\x5\xFFFF\x1\x9\x6\xFFFF\x1\x7\x1\x2\x1\x6\x5\xFFFF\x1\x2",
				"\x1\xA\x56\xFFFF\x1\xB",
				"",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x28\xFFFF\x1\x2",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x12\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x13",
				"",
				"\x1\x14",
				"\x1\x17\xB\xFFFF\x1\x15\x4\xFFFF\x1\x16",
				"\x1\x18\x56\xFFFF\x1\x19",
				"\x1\x1A",
				"\x1\x1D\xB\xFFFF\x1\x1B\x4\xFFFF\x1\x1C",
				"\x1\x2\x27\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x4\xFFFF\x1\xD"+
				"\x9\xFFFF\x1\xD\x1\xC\x1\xD\x1\x2\xE\xFFFF\x1\x2\x28\xFFFF\x1\x2",
				"\x1\xF\x6\xFFFF\x1\x10\xA\xFFFF\x1\xE\x11\xFFFF\x1\x11",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x23\x6\xFFFF\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x3\xA\xFFFF\x1\x1A\x41\xFFFF\x1\x1\x8\xFFFF\x1\x4\x1\x2\x4\xFFFF"+
				"\x1\x5\x12\xFFFF\x1\x2\x6\xFFFF\x1\x2",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x29\xB\xFFFF\x1\x27\x4\xFFFF\x1\x28",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x2A",
				"\x1\x2B",
				"\x1\x2E\xB\xFFFF\x1\x2C\x4\xFFFF\x1\x2D",
				"\x1\x31\xB\xFFFF\x1\x2F\x4\xFFFF\x1\x30",
				"\x1\x34\xB\xFFFF\x1\x32\x4\xFFFF\x1\x33",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x35",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x20",
				"\x1\x22\x6\xFFFF\x1\x10\xA\xFFFF\x1\x21\x11\xFFFF\x1\x11",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x26",
				"\x1\x3E",
				"\x1\x41\xB\xFFFF\x1\x3F\x4\xFFFF\x1\x40",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x42",
				"\x1\x45\xB\xFFFF\x1\x43\x4\xFFFF\x1\x44",
				"\x1\x10\x1C\xFFFF\x1\x11",
				"\x1\x46",
				"\x1\x47",
				"\x1\x1F\x5\xFFFF\x1\x1E\xA\xFFFF\x1\x36",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x39",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x3C",
				"\x1\x25\x5\xFFFF\x1\x24\xA\xFFFF\x1\x3D",
				"\x1\x4A",
				"\x1\x4B",
				"\x1\x38\x5\xFFFF\x1\x37\xA\xFFFF\x1\x48",
				"\x1\x3B\x5\xFFFF\x1\x3A\xA\xFFFF\x1\x49"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "179:1: node : ( func_def | class_def | enum_def | global_alloc | global_using | global_typedef | import_def | namespace_def );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA25 : DFA
	{
		private const string DFA25_eotS =
			"\x4\xFFFF";
		private const string DFA25_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA25_minS =
			"\x1\x2E\x1\x8\x2\xFFFF";
		private const string DFA25_maxS =
			"\x1\x2E\x1\x99\x2\xFFFF";
		private const string DFA25_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA25_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA25_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x1A\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x41\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA25_eot = DFA.UnpackEncodedString(DFA25_eotS);
		private static readonly short[] DFA25_eof = DFA.UnpackEncodedString(DFA25_eofS);
		private static readonly char[] DFA25_min = DFA.UnpackEncodedStringToUnsignedChars(DFA25_minS);
		private static readonly char[] DFA25_max = DFA.UnpackEncodedStringToUnsignedChars(DFA25_maxS);
		private static readonly short[] DFA25_accept = DFA.UnpackEncodedString(DFA25_acceptS);
		private static readonly short[] DFA25_special = DFA.UnpackEncodedString(DFA25_specialS);
		private static readonly short[][] DFA25_transition;

		static DFA25()
		{
			int numStates = DFA25_transitionS.Length;
			DFA25_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA25_transition[i] = DFA.UnpackEncodedString(DFA25_transitionS[i]);
			}
		}

		public DFA25( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 25;
			this.eot = DFA25_eot;
			this.eof = DFA25_eof;
			this.min = DFA25_min;
			this.max = DFA25_max;
			this.accept = DFA25_accept;
			this.special = DFA25_special;
			this.transition = DFA25_transition;
		}

		public override string Description { get { return "223:21: ( ( NEWLINE )+ INDENT ( NEWLINE )* ( STRING ( NEWLINE )+ )* DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA38 : DFA
	{
		private const string DFA38_eotS =
			"\x4\xFFFF";
		private const string DFA38_eofS =
			"\x1\xFFFF\x1\x3\x2\xFFFF";
		private const string DFA38_minS =
			"\x1\x2E\x1\x8\x2\xFFFF";
		private const string DFA38_maxS =
			"\x1\x2E\x1\x99\x2\xFFFF";
		private const string DFA38_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA38_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA38_transitionS =
			{
				"\x1\x1",
				"\x1\x3\x1A\xFFFF\x1\x3\x1\x2\x9\xFFFF\x1\x1\x41\xFFFF\x1\x3\x8\xFFFF"+
				"\x2\x3\x4\xFFFF\x1\x3\x4\xFFFF\x1\x3\x5\xFFFF\x1\x3\x6\xFFFF\x3\x3\x5"+
				"\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA38_eot = DFA.UnpackEncodedString(DFA38_eotS);
		private static readonly short[] DFA38_eof = DFA.UnpackEncodedString(DFA38_eofS);
		private static readonly char[] DFA38_min = DFA.UnpackEncodedStringToUnsignedChars(DFA38_minS);
		private static readonly char[] DFA38_max = DFA.UnpackEncodedStringToUnsignedChars(DFA38_maxS);
		private static readonly short[] DFA38_accept = DFA.UnpackEncodedString(DFA38_acceptS);
		private static readonly short[] DFA38_special = DFA.UnpackEncodedString(DFA38_specialS);
		private static readonly short[][] DFA38_transition;

		static DFA38()
		{
			int numStates = DFA38_transitionS.Length;
			DFA38_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA38_transition[i] = DFA.UnpackEncodedString(DFA38_transitionS[i]);
			}
		}

		public DFA38( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 38;
			this.eot = DFA38_eot;
			this.eof = DFA38_eof;
			this.min = DFA38_min;
			this.max = DFA38_max;
			this.accept = DFA38_accept;
			this.special = DFA38_special;
			this.transition = DFA38_transition;
		}

		public override string Description { get { return "235:98: ( ( NEWLINE )+ INDENT ( NEWLINE )* global_block DEDENT )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA53 : DFA
	{
		private const string DFA53_eotS =
			"\xF\xFFFF";
		private const string DFA53_eofS =
			"\xF\xFFFF";
		private const string DFA53_minS =
			"\x1\x23\x1\xFFFF\x1\x23\x1\xFFFF\x3\x23\x1\x4B\x3\x23\x2\x4B\x1\x23\x1"+
			"\x4B";
		private const string DFA53_maxS =
			"\x1\x99\x1\xFFFF\x1\x99\x1\xFFFF\x1\x23\x1\x92\x1\x99\x1\x70\x1\x23\x1"+
			"\x92\x1\x99\x2\x70\x1\x23\x1\x70";
		private const string DFA53_acceptS =
			"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\xB\xFFFF";
		private const string DFA53_specialS =
			"\xF\xFFFF}>";
		private static readonly string[] DFA53_transitionS =
			{
				"\x1\x2\x56\xFFFF\x1\x1\x17\xFFFF\x1\x1\x6\xFFFF\x1\x3",
				"",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x28\xFFFF\x1\x1",
				"",
				"\x1\x6",
				"\x1\x7\x45\xFFFF\x1\x1\x10\xFFFF\x1\x1\x17\xFFFF\x1\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\xF\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x5\xE\xFFFF\x1\x1\x28\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xB",
				"\x1\xC\x56\xFFFF\x1\x1\x17\xFFFF\x1\x1",
				"\x1\x1\x27\xFFFF\x1\x1\x1\xFFFF\x1\x3\x1\xFFFF\x1\x1\x20\xFFFF\x1\x1"+
				"\x28\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\x8\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1",
				"\x1\xE",
				"\x1\x1\x3\xFFFF\x1\x1\x4\xFFFF\x1\x9\xA\xFFFF\x1\xD\x1\xFFFF\x1\x1"+
				"\x7\xFFFF\x1\xA\x6\xFFFF\x1\x1"
			};

		private static readonly short[] DFA53_eot = DFA.UnpackEncodedString(DFA53_eotS);
		private static readonly short[] DFA53_eof = DFA.UnpackEncodedString(DFA53_eofS);
		private static readonly char[] DFA53_min = DFA.UnpackEncodedStringToUnsignedChars(DFA53_minS);
		private static readonly char[] DFA53_max = DFA.UnpackEncodedStringToUnsignedChars(DFA53_maxS);
		private static readonly short[] DFA53_accept = DFA.UnpackEncodedString(DFA53_acceptS);
		private static readonly short[] DFA53_special = DFA.UnpackEncodedString(DFA53_specialS);
		private static readonly short[][] DFA53_transition;

		static DFA53()
		{
			int numStates = DFA53_transitionS.Length;
			DFA53_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA53_transition[i] = DFA.UnpackEncodedString(DFA53_transitionS[i]);
			}
		}

		public DFA53( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 53;
			this.eot = DFA53_eot;
			this.eof = DFA53_eof;
			this.min = DFA53_min;
			this.max = DFA53_max;
			this.accept = DFA53_accept;
			this.special = DFA53_special;
			this.transition = DFA53_transition;
		}

		public override string Description { get { return "264:15: ( type_name )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA64 : DFA
	{
		private const string DFA64_eotS =
			"\x9\xFFFF";
		private const string DFA64_eofS =
			"\x9\xFFFF";
		private const string DFA64_minS =
			"\x1\x23\x1\x2E\x4\xFFFF\x1\x23\x1\xFFFF\x1\x2E";
		private const string DFA64_maxS =
			"\x1\x93\x1\x97\x4\xFFFF\x1\x23\x1\xFFFF\x1\x97";
		private const string DFA64_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x1\xFFFF";
		private const string DFA64_specialS =
			"\x9\xFFFF}>";
		private static readonly string[] DFA64_transitionS =
			{
				"\x1\x1\x29\xFFFF\x1\x5\x21\xFFFF\x1\x5\x1D\xFFFF\x1\x2\x3\xFFFF\x1\x4"+
				"\x1\xFFFF\x1\x3",
				"\x1\x5\x1A\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xF\xFFFF\x1\x5\x11\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1A\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5\x1\xFFFF\x2\x5"+
				"\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1\x7\x1\x6\x1\x7"+
				"\x1\x5\x2\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1"+
				"\xFFFF\x1\x5\x2\xFFFF\x1\x5\xF\xFFFF\x1\x5\x11\xFFFF\x1\x5\x1\xFFFF"+
				"\x1\x5"
			};

		private static readonly short[] DFA64_eot = DFA.UnpackEncodedString(DFA64_eotS);
		private static readonly short[] DFA64_eof = DFA.UnpackEncodedString(DFA64_eofS);
		private static readonly char[] DFA64_min = DFA.UnpackEncodedStringToUnsignedChars(DFA64_minS);
		private static readonly char[] DFA64_max = DFA.UnpackEncodedStringToUnsignedChars(DFA64_maxS);
		private static readonly short[] DFA64_accept = DFA.UnpackEncodedString(DFA64_acceptS);
		private static readonly short[] DFA64_special = DFA.UnpackEncodedString(DFA64_specialS);
		private static readonly short[][] DFA64_transition;

		static DFA64()
		{
			int numStates = DFA64_transitionS.Length;
			DFA64_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA64_transition[i] = DFA.UnpackEncodedString(DFA64_transitionS[i]);
			}
		}

		public DFA64( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 64;
			this.eot = DFA64_eot;
			this.eof = DFA64_eof;
			this.min = DFA64_min;
			this.max = DFA64_max;
			this.accept = DFA64_accept;
			this.special = DFA64_special;
			this.transition = DFA64_transition;
		}

		public override string Description { get { return "288:1: stmt_expr_item : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA71 : DFA
	{
		private const string DFA71_eotS =
			"\x4\xFFFF";
		private const string DFA71_eofS =
			"\x4\xFFFF";
		private const string DFA71_minS =
			"\x1\x2E\x1\x8\x2\xFFFF";
		private const string DFA71_maxS =
			"\x1\x7E\x1\x95\x2\xFFFF";
		private const string DFA71_acceptS =
			"\x2\xFFFF\x1\x1\x1\x2";
		private const string DFA71_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA71_transitionS =
			{
				"\x1\x1\x4F\xFFFF\x1\x2",
				"\x1\x3\x1A\xFFFF\x1\x3\xA\xFFFF\x1\x1\x1E\xFFFF\x1\x3\x21\xFFFF\x1"+
				"\x3\xB\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x4\x3\x4\xFFFF\x2\x3\x3\xFFFF"+
				"\x1\x3\x2\xFFFF\x2\x3\x1\xFFFF\x3\x3",
				"",
				""
			};

		private static readonly short[] DFA71_eot = DFA.UnpackEncodedString(DFA71_eotS);
		private static readonly short[] DFA71_eof = DFA.UnpackEncodedString(DFA71_eofS);
		private static readonly char[] DFA71_min = DFA.UnpackEncodedStringToUnsignedChars(DFA71_minS);
		private static readonly char[] DFA71_max = DFA.UnpackEncodedStringToUnsignedChars(DFA71_maxS);
		private static readonly short[] DFA71_accept = DFA.UnpackEncodedString(DFA71_acceptS);
		private static readonly short[] DFA71_special = DFA.UnpackEncodedString(DFA71_specialS);
		private static readonly short[][] DFA71_transition;

		static DFA71()
		{
			int numStates = DFA71_transitionS.Length;
			DFA71_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA71_transition[i] = DFA.UnpackEncodedString(DFA71_transitionS[i]);
			}
		}

		public DFA71( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 71;
			this.eot = DFA71_eot;
			this.eof = DFA71_eof;
			this.min = DFA71_min;
			this.max = DFA71_max;
			this.accept = DFA71_accept;
			this.special = DFA71_special;
			this.transition = DFA71_transition;
		}

		public override string Description { get { return "315:35: ( ( NEWLINE )* 'else' stmt_block )?"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA97 : DFA
	{
		private const string DFA97_eotS =
			"\xB\xFFFF";
		private const string DFA97_eofS =
			"\xB\xFFFF";
		private const string DFA97_minS =
			"\x2\x23\x1\xFFFF\x1\x47\x1\xFFFF\x2\x23\x2\x47\x1\x23\x1\x47";
		private const string DFA97_maxS =
			"\x2\x99\x1\xFFFF\x1\x98\x1\xFFFF\x1\x23\x1\x99\x2\x98\x1\x23\x1\x98";
		private const string DFA97_acceptS =
			"\x2\xFFFF\x1\x2\x1\xFFFF\x1\x1\x6\xFFFF";
		private const string DFA97_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA97_transitionS =
			{
				"\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x1B\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"\x1\x3\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\x4\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x9\xFFFF\x1"+
				"\x4\xE\xFFFF\x1\x2\x1B\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2",
				"",
				"\x1\x7",
				"\x1\x8\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x11\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x18\xFFFF"+
				"\x1\x2\x1B\xFFFF\x1\x2\xD\xFFFF\x1\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x5\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2",
				"\x1\xA",
				"\xD\x2\x1\x6\x9\x2\x1\x4\x1\x9\x2\x2\x1\xFFFF\x5\x2\x1\xFFFF\x5\x2"+
				"\x2\xFFFF\x1\x2\x1\xFFFF\x5\x2\xF\xFFFF\x2\x2\x4\xFFFF\x1\x2\x9\xFFFF"+
				"\x3\x2"
			};

		private static readonly short[] DFA97_eot = DFA.UnpackEncodedString(DFA97_eotS);
		private static readonly short[] DFA97_eof = DFA.UnpackEncodedString(DFA97_eofS);
		private static readonly char[] DFA97_min = DFA.UnpackEncodedStringToUnsignedChars(DFA97_minS);
		private static readonly char[] DFA97_max = DFA.UnpackEncodedStringToUnsignedChars(DFA97_maxS);
		private static readonly short[] DFA97_accept = DFA.UnpackEncodedString(DFA97_acceptS);
		private static readonly short[] DFA97_special = DFA.UnpackEncodedString(DFA97_specialS);
		private static readonly short[][] DFA97_transition;

		static DFA97()
		{
			int numStates = DFA97_transitionS.Length;
			DFA97_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA97_transition[i] = DFA.UnpackEncodedString(DFA97_transitionS[i]);
			}
		}

		public DFA97( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 97;
			this.eot = DFA97_eot;
			this.eof = DFA97_eof;
			this.min = DFA97_min;
			this.max = DFA97_max;
			this.accept = DFA97_accept;
			this.special = DFA97_special;
			this.transition = DFA97_transition;
		}

		public override string Description { get { return "373:1: lambda_expr : ( '(' ( func_args )? ')' ( '->' expr -> ^( Expr_Lambda '->' ( func_args )? expr ) | '=>' expr -> ^( Expr_Lambda '=>' ( func_args )? expr ) ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _NEWLINE_in_root484 = new BitSet(new ulong[]{0x400800000000UL,0x8601000000000000UL,0x20E0410UL});
		public static readonly BitSet _global_block_in_root487 = new BitSet(new ulong[]{0x0UL});
		public static readonly BitSet _EOF_in_root489 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _node_in_global_block509 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_global_block511 = new BitSet(new ulong[]{0x400800000002UL,0x8601000000000000UL,0x20E0410UL});
		public static readonly BitSet _func_def_in_node534 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node539 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node544 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_alloc_in_node549 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_using_in_node554 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _global_typedef_in_node559 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node564 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node569 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NUMBER_in_attribute_args581 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_attribute_args586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_args591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_attribute_item602 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_attribute_item605 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item607 = new BitSet(new ulong[]{0x0UL,0x104000UL});
		public static readonly BitSet _84_in_attribute_item610 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item612 = new BitSet(new ulong[]{0x0UL,0x104000UL});
		public static readonly BitSet _78_in_attribute_item616 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_attribute_item634 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_attribute_item637 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item639 = new BitSet(new ulong[]{0x0UL,0x104000UL});
		public static readonly BitSet _84_in_attribute_item642 = new BitSet(new ulong[]{0x10800800000000UL});
		public static readonly BitSet _attribute_args_in_attribute_item644 = new BitSet(new ulong[]{0x0UL,0x104000UL});
		public static readonly BitSet _78_in_attribute_item648 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_attribute673 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute675 = new BitSet(new ulong[]{0x0UL,0x2000000100000UL});
		public static readonly BitSet _84_in_attribute678 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL});
		public static readonly BitSet _attribute_item_in_attribute680 = new BitSet(new ulong[]{0x0UL,0x2000000100000UL});
		public static readonly BitSet _113_in_attribute684 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_attribute686 = new BitSet(new ulong[]{0x400000000002UL,0x1000000000000UL});
		public static readonly BitSet _attribute_in_global_alloc705 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_list_in_global_alloc708 = new BitSet(new ulong[]{0x0UL,0x140000000UL});
		public static readonly BitSet _94_in_global_alloc712 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_global_alloc714 = new BitSet(new ulong[]{0x2UL,0x4100002000UL});
		public static readonly BitSet _102_in_global_alloc719 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _96_in_global_alloc723 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_global_alloc726 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_global_alloc786 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066E840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_global_alloc788 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_global_alloc791 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_global_alloc864 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _modify_expr_in_global_alloc867 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_global_alloc870 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _modify_expr_in_global_alloc872 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _stmt_using_in_global_using909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_global_typedef920 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _132_in_import_def931 = new BitSet(new ulong[]{0x10400000000002UL});
		public static readonly BitSet _STRING_in_import_def933 = new BitSet(new ulong[]{0x400000000002UL});
		public static readonly BitSet _NEWLINE_in_import_def937 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _INDENT_in_import_def940 = new BitSet(new ulong[]{0x10400000000100UL});
		public static readonly BitSet _NEWLINE_in_import_def942 = new BitSet(new ulong[]{0x10400000000100UL});
		public static readonly BitSet _STRING_in_import_def947 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_import_def949 = new BitSet(new ulong[]{0x10400000000100UL});
		public static readonly BitSet _DEDENT_in_import_def954 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_enum_def976 = new BitSet(new ulong[]{0x0UL,0x8000000000000000UL});
		public static readonly BitSet _127_in_enum_def979 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_enum_def981 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_enum_def983 = new BitSet(new ulong[]{0x800000002UL});
		public static readonly BitSet _ident_in_enum_def986 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_enum_def989 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_enum_def991 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000UL});
		public static readonly BitSet _138_in_namespace_def1024 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_namespace_def1026 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1028 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _INDENT_in_namespace_def1031 = new BitSet(new ulong[]{0x400800000100UL,0x8601000000000000UL,0x20E0410UL});
		public static readonly BitSet _NEWLINE_in_namespace_def1033 = new BitSet(new ulong[]{0x400800000100UL,0x8601000000000000UL,0x20E0410UL});
		public static readonly BitSet _global_block_in_namespace_def1036 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_namespace_def1038 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_def1060 = new BitSet(new ulong[]{0x0UL,0x200000000000000UL});
		public static readonly BitSet _121_in_class_def1063 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_class_def1065 = new BitSet(new ulong[]{0x400000000002UL,0x240002000UL});
		public static readonly BitSet _generic_parameter_in_class_def1068 = new BitSet(new ulong[]{0x400000000002UL,0x40002000UL});
		public static readonly BitSet _77_in_class_def1073 = new BitSet(new ulong[]{0x800000000UL,0x100000000UL});
		public static readonly BitSet _func_args_in_class_def1075 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_class_def1077 = new BitSet(new ulong[]{0x400000000002UL,0x40000000UL});
		public static readonly BitSet _94_in_class_def1082 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_class_def1084 = new BitSet(new ulong[]{0x400000000002UL,0x100000UL});
		public static readonly BitSet _84_in_class_def1087 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_class_def1089 = new BitSet(new ulong[]{0x400000000002UL,0x100000UL});
		public static readonly BitSet _NEWLINE_in_class_def1096 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _INDENT_in_class_def1099 = new BitSet(new ulong[]{0x400800000100UL,0x8601000000000000UL,0x20E0410UL});
		public static readonly BitSet _NEWLINE_in_class_def1101 = new BitSet(new ulong[]{0x400800000100UL,0x8601000000000000UL,0x20E0410UL});
		public static readonly BitSet _global_block_in_class_def1104 = new BitSet(new ulong[]{0x100UL});
		public static readonly BitSet _DEDENT_in_class_def1106 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _79_in_type_name_op1147 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_type_name_op1151 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_type_name_op1153 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _75_in_type_name_op1157 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _122_in_type_name1166 = new BitSet(new ulong[]{0x800000000UL,0x0UL,0x40000UL});
		public static readonly BitSet _146_in_type_name1169 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_type_name1172 = new BitSet(new ulong[]{0x2UL,0x1000200008800UL});
		public static readonly BitSet _97_in_type_name1175 = new BitSet(new ulong[]{0x800000000UL,0x400020000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_type_name1178 = new BitSet(new ulong[]{0x0UL,0x20000100000UL});
		public static readonly BitSet _84_in_type_name1181 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_type_name1183 = new BitSet(new ulong[]{0x0UL,0x20000100000UL});
		public static readonly BitSet _105_in_type_name1189 = new BitSet(new ulong[]{0x2UL,0x1000000008800UL});
		public static readonly BitSet _type_name_op_in_type_name1193 = new BitSet(new ulong[]{0x2UL,0x1000000008800UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1233 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_generic_parameter_inside1236 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_generic_parameter_inside1238 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _97_in_generic_parameter1260 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _generic_parameter_inside_in_generic_parameter1262 = new BitSet(new ulong[]{0x0UL,0x20000000000UL});
		public static readonly BitSet _105_in_generic_parameter1264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _func_args_item_in_func_args1279 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_func_args1282 = new BitSet(new ulong[]{0x800000000UL,0x100000000UL});
		public static readonly BitSet _func_args_item_in_func_args1284 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _ident_list_in_func_args_item1306 = new BitSet(new ulong[]{0x0UL,0x40000000UL});
		public static readonly BitSet _94_in_func_args_item1308 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_func_args_item1310 = new BitSet(new ulong[]{0x2UL,0x4100002000UL});
		public static readonly BitSet _102_in_func_args_item1315 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _96_in_func_args_item1319 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_func_args_item1322 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_func_args_item1370 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066E840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_func_args_item1372 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_func_args_item1375 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_func_args_item1432 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _modify_expr_in_func_args_item1436 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_func_def1447 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x2040000UL});
		public static readonly BitSet _type_name_in_func_def1450 = new BitSet(new ulong[]{0x800000000UL,0x0UL,0x2000000UL});
		public static readonly BitSet _153_in_func_def1453 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_func_def1456 = new BitSet(new ulong[]{0x0UL,0x200002000UL});
		public static readonly BitSet _generic_parameter_in_func_def1458 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_func_def1461 = new BitSet(new ulong[]{0x800000000UL,0x100004000UL});
		public static readonly BitSet _func_args_in_func_def1463 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_func_def1466 = new BitSet(new ulong[]{0x400000000000UL,0x4000000000UL});
		public static readonly BitSet _NEWLINE_in_func_def1469 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_func_def1472 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_func_def1521 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_func_def1523 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block1564 = new BitSet(new ulong[]{0x400800000100UL,0x800800000002000UL,0x3B230FUL});
		public static readonly BitSet _NEWLINE_in_stmt_block1566 = new BitSet(new ulong[]{0x400800000100UL,0x800800000002000UL,0x3B230FUL});
		public static readonly BitSet _stmt_in_stmt_block1571 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_block1573 = new BitSet(new ulong[]{0x400800000100UL,0x800800000002000UL,0x3B230FUL});
		public static readonly BitSet _DEDENT_in_stmt_block1578 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt1598 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt1603 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt1608 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt1613 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt1618 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_linq_in_stmt1623 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_defer_in_stmt1628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_item_in_stmt_expr1642 = new BitSet(new ulong[]{0x2UL,0x0UL,0x200008UL});
		public static readonly BitSet _131_in_stmt_expr1652 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_expr1654 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_expr1683 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_expr1685 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr_item1724 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr_item1729 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr_item1734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr_item1739 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr_item1744 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _123_in_stmt_defer1755 = new BitSet(new ulong[]{0x800000000UL,0x800800000002000UL,0x3B230FUL});
		public static readonly BitSet _stmt_in_stmt_defer1757 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _128_in_stmt_defer1770 = new BitSet(new ulong[]{0x800000000UL,0x800800000002000UL,0x3B230FUL});
		public static readonly BitSet _stmt_in_stmt_defer1772 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _145_in_stmt_typedef1791 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_stmt_typedef1793 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_stmt_typedef1795 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_stmt_typedef1797 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item1816 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _138_in_stmt_using_item1820 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _147_in_stmt_using1828 = new BitSet(new ulong[]{0x800000002UL,0x0UL,0x400UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using1830 = new BitSet(new ulong[]{0x800000002UL,0x0UL,0x400UL});
		public static readonly BitSet _141_in_stmt_return1851 = new BitSet(new ulong[]{0x10800800000002UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_return1853 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _131_in_stmt_if1874 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_if1876 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x4000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1879 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1882 = new BitSet(new ulong[]{0x400000000002UL,0x4000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_if1885 = new BitSet(new ulong[]{0x400000000000UL,0x4000000000000000UL});
		public static readonly BitSet _126_in_stmt_if1888 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1890 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _142_in_stmt_if1922 = new BitSet(new ulong[]{0x800000000UL,0x800800000002000UL,0x3B230FUL});
		public static readonly BitSet _stmt_in_stmt_if1924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _149_in_stmt_while1955 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_while1957 = new BitSet(new ulong[]{0x400000000000UL,0x1000000000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while1961 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1964 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _124_in_stmt_while1988 = new BitSet(new ulong[]{0x800000000UL,0x800800000002000UL,0x3B230FUL});
		public static readonly BitSet _stmt_in_stmt_while1990 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _137_in_stmt_while2018 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_while2020 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while2023 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _129_in_stmt_for2042 = new BitSet(new ulong[]{0x800000000UL,0x800UL});
		public static readonly BitSet _75_in_stmt_for2044 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_stmt_for2047 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_for2049 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_for2051 = new BitSet(new ulong[]{0x400000000000UL,0x2000000000000000UL,0x8000UL});
		public static readonly BitSet _143_in_stmt_for2055 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_for2057 = new BitSet(new ulong[]{0x400000000000UL,0x80000000000000UL});
		public static readonly BitSet _119_in_stmt_for2060 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_for2062 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2066 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2069 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _125_in_stmt_for2120 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_for2122 = new BitSet(new ulong[]{0x400000000000UL,0x80000000000000UL});
		public static readonly BitSet _119_in_stmt_for2125 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_for2127 = new BitSet(new ulong[]{0x400000000000UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2131 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2134 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_stmt_for2185 = new BitSet(new ulong[]{0x401000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for2188 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _144_in_stmt_try2227 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2229 = new BitSet(new ulong[]{0x0UL,0x100000000000000UL});
		public static readonly BitSet _120_in_stmt_try2231 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _stmt_alloc_in_stmt_try2233 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try2235 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _130_in_linq_item2258 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_linq_item2260 = new BitSet(new ulong[]{0x0UL,0x0UL,0x20UL});
		public static readonly BitSet _133_in_linq_item2262 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_linq_item2264 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _136_in_linq_item2279 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_linq_item2281 = new BitSet(new ulong[]{0x0UL,0x4000000000UL});
		public static readonly BitSet _102_in_linq_item2283 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_linq_item2285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _148_in_linq_item2300 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_linq_item2302 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _linq_item_in_linq_prefix2322 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x100104UL});
		public static readonly BitSet _linq_item_in_linq_prefix2324 = new BitSet(new ulong[]{0x400000000000UL,0x0UL,0x100104UL});
		public static readonly BitSet _NEWLINE_in_linq_prefix2327 = new BitSet(new ulong[]{0x400000000002UL,0x0UL,0x100104UL});
		public static readonly BitSet _linq_prefix_in_stmt_linq2350 = new BitSet(new ulong[]{0x1000000000UL});
		public static readonly BitSet _stmt_block_in_stmt_linq2352 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list2373 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_ident_list2376 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_ident_list2378 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _ident_list_in_stmt_alloc2400 = new BitSet(new ulong[]{0x0UL,0x140000000UL});
		public static readonly BitSet _94_in_stmt_alloc2404 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_stmt_alloc2406 = new BitSet(new ulong[]{0x2UL,0x4100002000UL});
		public static readonly BitSet _102_in_stmt_alloc2411 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _96_in_stmt_alloc2415 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_alloc2418 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_stmt_alloc2466 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066E840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_stmt_alloc2468 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_stmt_alloc2471 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _96_in_stmt_alloc2532 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_stmt_alloc2536 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_stmt_alloc2539 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _modify_expr_in_stmt_alloc2541 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _lvalue_in_stmt_modify2569 = new BitSet(new ulong[]{0x2UL,0x8505020891200UL,0x800000UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify2573 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2576 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_stmt_modify2590 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _modify_expr_in_stmt_modify2593 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr2606 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_lambda_expr2617 = new BitSet(new ulong[]{0x800000000UL,0x100004000UL});
		public static readonly BitSet _func_args_in_lambda_expr2619 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_lambda_expr2622 = new BitSet(new ulong[]{0x0UL,0x10001000000UL});
		public static readonly BitSet _88_in_lambda_expr2626 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_lambda_expr2628 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_lambda_expr2668 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_lambda_expr2670 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr2690 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr2747 = new BitSet(new ulong[]{0x2UL,0x8105120891200UL,0x800000UL});
		public static readonly BitSet _set_in_modify_expr2751 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cond_expr_in_modify_expr2796 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_modify_expr2805 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cond_expr_in_modify_expr2808 = new BitSet(new ulong[]{0x2UL,0x4000000000UL});
		public static readonly BitSet _or_expr_in_cond_expr_item2821 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr2833 = new BitSet(new ulong[]{0x2UL,0x200000000000UL});
		public static readonly BitSet _109_in_cond_expr2842 = new BitSet(new ulong[]{0x10800800000002UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2848 = new BitSet(new ulong[]{0x2UL,0x40000000UL});
		public static readonly BitSet _94_in_cond_expr2852 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr2856 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr2959 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1001000UL});
		public static readonly BitSet _152_in_or_expr2969 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _and_expr_in_or_expr2973 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1001000UL});
		public static readonly BitSet _140_in_or_expr3013 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _and_expr_in_or_expr3017 = new BitSet(new ulong[]{0x2UL,0x0UL,0x1001000UL});
		public static readonly BitSet _bit_or_in_and_expr3045 = new BitSet(new ulong[]{0x2UL,0x20000000000400UL});
		public static readonly BitSet _74_in_and_expr3055 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _bit_or_in_and_expr3059 = new BitSet(new ulong[]{0x2UL,0x20000000000400UL});
		public static readonly BitSet _117_in_and_expr3085 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _bit_or_in_and_expr3089 = new BitSet(new ulong[]{0x2UL,0x20000000000400UL});
		public static readonly BitSet _bit_xor_in_bit_or3117 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000UL});
		public static readonly BitSet _150_in_bit_or3126 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _bit_xor_in_bit_or3130 = new BitSet(new ulong[]{0x2UL,0x0UL,0x400000UL});
		public static readonly BitSet _bit_and_in_bit_xor3160 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _114_in_bit_xor3169 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _bit_and_in_bit_xor3173 = new BitSet(new ulong[]{0x2UL,0x4000000000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and3203 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _75_in_bit_and3212 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and3216 = new BitSet(new ulong[]{0x2UL,0x800UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3257 = new BitSet(new ulong[]{0x2UL,0x8000000080UL,0xC0UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr3269 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3273 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _134_in_cmp_equ_expr3314 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3318 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _135_in_cmp_equ_expr3357 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr3361 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3399 = new BitSet(new ulong[]{0x2UL,0x62200000000UL});
		public static readonly BitSet _97_in_cmp_expr3409 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3413 = new BitSet(new ulong[]{0x800000002UL,0x62200000000UL});
		public static readonly BitSet _ident_in_cmp_expr3419 = new BitSet(new ulong[]{0x800000000UL,0x20000000000UL});
		public static readonly BitSet _105_in_cmp_expr3422 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_cmp_expr3424 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066E840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_cmp_expr3426 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_cmp_expr3429 = new BitSet(new ulong[]{0x2UL,0x62200000000UL});
		public static readonly BitSet _101_in_cmp_expr3539 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3543 = new BitSet(new ulong[]{0x2UL,0x62200000000UL});
		public static readonly BitSet _105_in_cmp_expr3570 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3574 = new BitSet(new ulong[]{0x2UL,0x62200000000UL});
		public static readonly BitSet _106_in_cmp_expr3601 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _infix_expr_in_cmp_expr3605 = new BitSet(new ulong[]{0x2UL,0x62200000000UL});
		public static readonly BitSet _shift_expr_in_infix_expr3635 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _infix_func_in_infix_expr3645 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _shift_expr_in_infix_expr3649 = new BitSet(new ulong[]{0x2UL,0x10000000000000UL});
		public static readonly BitSet _add_expr_in_shift_expr3692 = new BitSet(new ulong[]{0x2UL,0x80800000000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr3701 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _add_expr_in_shift_expr3705 = new BitSet(new ulong[]{0x2UL,0x80800000000UL});
		public static readonly BitSet _mul_expr_in_add_expr3735 = new BitSet(new ulong[]{0x2UL,0x220000UL});
		public static readonly BitSet _81_in_add_expr3745 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _mul_expr_in_add_expr3749 = new BitSet(new ulong[]{0x2UL,0x220000UL});
		public static readonly BitSet _85_in_add_expr3774 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _mul_expr_in_add_expr3778 = new BitSet(new ulong[]{0x2UL,0x220000UL});
		public static readonly BitSet _selector_expr_in_mul_expr3816 = new BitSet(new ulong[]{0x2UL,0x10008100UL});
		public static readonly BitSet _79_in_mul_expr3826 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _selector_expr_in_mul_expr3830 = new BitSet(new ulong[]{0x2UL,0x10008100UL});
		public static readonly BitSet _92_in_mul_expr3860 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _selector_expr_in_mul_expr3864 = new BitSet(new ulong[]{0x2UL,0x10008100UL});
		public static readonly BitSet _72_in_mul_expr3894 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _selector_expr_in_mul_expr3898 = new BitSet(new ulong[]{0x2UL,0x10008100UL});
		public static readonly BitSet _cast_expr_in_selector_expr3941 = new BitSet(new ulong[]{0x2UL,0xA000000UL});
		public static readonly BitSet _89_in_selector_expr3951 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_selector_expr3955 = new BitSet(new ulong[]{0x2UL,0xA000000UL});
		public static readonly BitSet _91_in_selector_expr3981 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_selector_expr3986 = new BitSet(new ulong[]{0x2UL,0xA000000UL});
		public static readonly BitSet _prefix_expr_in_cast_expr4026 = new BitSet(new ulong[]{0x2UL,0x40000000000000UL});
		public static readonly BitSet _118_in_cast_expr4035 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_cast_expr4037 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_cast_expr4039 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_cast_expr4041 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr4099 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr4101 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _139_in_prefix_expr4117 = new BitSet(new ulong[]{0x800000000UL,0x400000000000000UL,0x40000UL});
		public static readonly BitSet _type_name_in_prefix_expr4119 = new BitSet(new ulong[]{0x0UL,0x1000000002000UL});
		public static readonly BitSet _77_in_prefix_expr4123 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066E840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_prefix_expr4125 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_prefix_expr4128 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _112_in_prefix_expr4150 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_prefix_expr4152 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_prefix_expr4154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr4170 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list4182 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_expr_list4185 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_expr_list4188 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _atom_expr_in_suffix_expr4204 = new BitSet(new ulong[]{0x2UL,0x1000005442000UL});
		public static readonly BitSet _82_in_suffix_expr4214 = new BitSet(new ulong[]{0x2UL,0x1000005442000UL});
		public static readonly BitSet _86_in_suffix_expr4240 = new BitSet(new ulong[]{0x2UL,0x1000005442000UL});
		public static readonly BitSet _90_in_suffix_expr4263 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_suffix_expr4265 = new BitSet(new ulong[]{0x2UL,0x1000005442000UL});
		public static readonly BitSet _88_in_suffix_expr4290 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_suffix_expr4292 = new BitSet(new ulong[]{0x2UL,0x1000005442000UL});
		public static readonly BitSet _77_in_suffix_expr4317 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066E840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_suffix_expr4319 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_suffix_expr4322 = new BitSet(new ulong[]{0x2UL,0x1000005442000UL});
		public static readonly BitSet _112_in_suffix_expr4346 = new BitSet(new ulong[]{0x10800800000000UL,0x280000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_suffix_expr4348 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_suffix_expr4351 = new BitSet(new ulong[]{0x2UL,0x1000005442000UL});
		public static readonly BitSet _NUMBER_in_atom_expr4397 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr4402 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr4407 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_atom_expr4412 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_atom_expr4414 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_atom_expr4427 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_atom_expr4429 = new BitSet(new ulong[]{0x0UL,0x104000UL});
		public static readonly BitSet _84_in_atom_expr4434 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_in_atom_expr4436 = new BitSet(new ulong[]{0x0UL,0x104000UL});
		public static readonly BitSet _78_in_atom_expr4440 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _78_in_atom_expr4465 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue_item4495 = new BitSet(new ulong[]{0x2UL,0x1000205442000UL});
		public static readonly BitSet _82_in_lvalue_item4505 = new BitSet(new ulong[]{0x2UL,0x1000205442000UL});
		public static readonly BitSet _86_in_lvalue_item4533 = new BitSet(new ulong[]{0x2UL,0x1000205442000UL});
		public static readonly BitSet _90_in_lvalue_item4558 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_lvalue_item4560 = new BitSet(new ulong[]{0x2UL,0x1000205442000UL});
		public static readonly BitSet _88_in_lvalue_item4587 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_lvalue_item4589 = new BitSet(new ulong[]{0x2UL,0x1000205442000UL});
		public static readonly BitSet _generic_parameter_in_lvalue_item4616 = new BitSet(new ulong[]{0x0UL,0x2000UL});
		public static readonly BitSet _77_in_lvalue_item4619 = new BitSet(new ulong[]{0x10800800000000UL,0x80000066E840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_lvalue_item4621 = new BitSet(new ulong[]{0x0UL,0x4000UL});
		public static readonly BitSet _78_in_lvalue_item4624 = new BitSet(new ulong[]{0x2UL,0x1000205442000UL});
		public static readonly BitSet _112_in_lvalue_item4653 = new BitSet(new ulong[]{0x10800800000000UL,0x280000066A840UL,0x2000800UL});
		public static readonly BitSet _expr_list_in_lvalue_item4655 = new BitSet(new ulong[]{0x0UL,0x2000000000000UL});
		public static readonly BitSet _113_in_lvalue_item4658 = new BitSet(new ulong[]{0x2UL,0x1000205442000UL});
		public static readonly BitSet _ident_in_lvalue_atom4697 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _111_in_lvalue_atom4702 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_lvalue_atom4704 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_lvalue4723 = new BitSet(new ulong[]{0x800000000UL,0x800000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4725 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_lvalue4728 = new BitSet(new ulong[]{0x800000000UL,0x800000000000UL});
		public static readonly BitSet _lvalue_item_in_lvalue4730 = new BitSet(new ulong[]{0x0UL,0x104000UL});
		public static readonly BitSet _78_in_lvalue4734 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_item_in_lvalue4748 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident4759 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _95_in_ident4762 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _IDENT_in_ident4764 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _116_in_infix_func4777 = new BitSet(new ulong[]{0x800000000UL});
		public static readonly BitSet _ident_in_infix_func4780 = new BitSet(new ulong[]{0x0UL,0x10000000000000UL});
		public static readonly BitSet _116_in_infix_func4782 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
