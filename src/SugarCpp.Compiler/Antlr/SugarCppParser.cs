//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 SugarCpp.g 2013-05-01 00:00:52

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


	using System;
	using System.Collections;
    using System.Collections.Generic;
	using System.Linq;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  SugarCpp.Compiler 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class SugarCppParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "Attribute", "Block", "Class", "DEDENT", "EXPONENT", "Enum", "Expr_Access", "Expr_Alloc", "Expr_Bin", "Expr_Bracket", "Expr_Call", "Expr_Call_With", "Expr_Cond", "Expr_Dict", "Expr_Infix", "Expr_Lambda", "Expr_New_Array", "Expr_New_Type", "Expr_Prefix", "Expr_Return", "Expr_Suffix", "Expr_Tuple", "Func_Args", "Func_Def", "IDENT", "INDENT", "Ident_List", "Import", "Left_Bracket", "Match_Tuple", "NEWLINE", "NUMBER", "Namespace", "Right_Bracket", "Root", "SP", "STRING", "Stmt_Block", "Stmt_For", "Stmt_ForEach", "Stmt_If", "Stmt_Try", "Stmt_Typedef", "Stmt_Using", "Stmt_While", "Type_IDENT", "Type_Ref", "Type_Tuple", "'!'", "'!='", "'%'", "'%='", "'&&'", "'&'", "'&='", "'('", "')'", "'*'", "'*='", "'+'", "'++'", "'+='", "','", "'-'", "'--'", "'-='", "'->'", "'->*'", "'.'", "'.*'", "'/'", "'/='", "':'", "'::'", "':='", "';'", "'<'", "'<<'", "'<<='", "'<='", "'='", "'=='", "'=>'", "'>'", "'>='", "'>>'", "'>>='", "'['", "']'", "'^'", "'^='", "'`'", "'catch'", "'class'", "'else'", "'enum'", "'for'", "'if'", "'import'", "'in'", "'namespace'", "'new'", "'return'", "'try'", "'typedef'", "'using'", "'while'", "'|'", "'|='", "'||'", "'~'"
	};
	public const int EOF=-1;
	public const int T__52=52;
	public const int T__53=53;
	public const int T__54=54;
	public const int T__55=55;
	public const int T__56=56;
	public const int T__57=57;
	public const int T__58=58;
	public const int T__59=59;
	public const int T__60=60;
	public const int T__61=61;
	public const int T__62=62;
	public const int T__63=63;
	public const int T__64=64;
	public const int T__65=65;
	public const int T__66=66;
	public const int T__67=67;
	public const int T__68=68;
	public const int T__69=69;
	public const int T__70=70;
	public const int T__71=71;
	public const int T__72=72;
	public const int T__73=73;
	public const int T__74=74;
	public const int T__75=75;
	public const int T__76=76;
	public const int T__77=77;
	public const int T__78=78;
	public const int T__79=79;
	public const int T__80=80;
	public const int T__81=81;
	public const int T__82=82;
	public const int T__83=83;
	public const int T__84=84;
	public const int T__85=85;
	public const int T__86=86;
	public const int T__87=87;
	public const int T__88=88;
	public const int T__89=89;
	public const int T__90=90;
	public const int T__91=91;
	public const int T__92=92;
	public const int T__93=93;
	public const int T__94=94;
	public const int T__95=95;
	public const int T__96=96;
	public const int T__97=97;
	public const int T__98=98;
	public const int T__99=99;
	public const int T__100=100;
	public const int T__101=101;
	public const int T__102=102;
	public const int T__103=103;
	public const int T__104=104;
	public const int T__105=105;
	public const int T__106=106;
	public const int T__107=107;
	public const int T__108=108;
	public const int T__109=109;
	public const int T__110=110;
	public const int T__111=111;
	public const int T__112=112;
	public const int T__113=113;
	public const int T__114=114;
	public const int Attribute=4;
	public const int Block=5;
	public const int Class=6;
	public const int DEDENT=7;
	public const int EXPONENT=8;
	public const int Enum=9;
	public const int Expr_Access=10;
	public const int Expr_Alloc=11;
	public const int Expr_Bin=12;
	public const int Expr_Bracket=13;
	public const int Expr_Call=14;
	public const int Expr_Call_With=15;
	public const int Expr_Cond=16;
	public const int Expr_Dict=17;
	public const int Expr_Infix=18;
	public const int Expr_Lambda=19;
	public const int Expr_New_Array=20;
	public const int Expr_New_Type=21;
	public const int Expr_Prefix=22;
	public const int Expr_Return=23;
	public const int Expr_Suffix=24;
	public const int Expr_Tuple=25;
	public const int Func_Args=26;
	public const int Func_Def=27;
	public const int IDENT=28;
	public const int INDENT=29;
	public const int Ident_List=30;
	public const int Import=31;
	public const int Left_Bracket=32;
	public const int Match_Tuple=33;
	public const int NEWLINE=34;
	public const int NUMBER=35;
	public const int Namespace=36;
	public const int Right_Bracket=37;
	public const int Root=38;
	public const int SP=39;
	public const int STRING=40;
	public const int Stmt_Block=41;
	public const int Stmt_For=42;
	public const int Stmt_ForEach=43;
	public const int Stmt_If=44;
	public const int Stmt_Try=45;
	public const int Stmt_Typedef=46;
	public const int Stmt_Using=47;
	public const int Stmt_While=48;
	public const int Type_IDENT=49;
	public const int Type_Ref=50;
	public const int Type_Tuple=51;

	public SugarCppParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public SugarCppParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		this.state.ruleMemo = new System.Collections.Generic.Dictionary<int, int>[189+1];


		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return SugarCppParser.tokenNames; } }
	public override string GrammarFileName { get { return "SugarCpp.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_root();
	partial void LeaveRule_root();

	// $ANTLR start "root"
	// SugarCpp.g:146:8: public root : overall_block ( NEWLINE )* EOF ;
	[GrammarRule("root")]
	public AstParserRuleReturnScope<CommonTree, IToken> root()
	{
		EnterRule_root();
		EnterRule("root", 1);
		TraceIn("root", 1);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int root_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE2 = default(IToken);
		IToken EOF3 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block1 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE2_tree = default(CommonTree);
		CommonTree EOF3_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "root");
		DebugLocation(146, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 1)) { return retval; }

			// SugarCpp.g:147:2: ( overall_block ( NEWLINE )* EOF )
			DebugEnterAlt(1);
			// SugarCpp.g:147:4: overall_block ( NEWLINE )* EOF
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(147, 4);
			PushFollow(Follow._overall_block_in_root400);
			overall_block1=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, overall_block1.Tree);
			DebugLocation(147, 19);
			// SugarCpp.g:147:19: ( NEWLINE )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_0 = input.LA(1);

				if ((LA1_0==NEWLINE))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:147:19: NEWLINE
					{
					DebugLocation(147, 19);
					NEWLINE2=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_root403); if (state.failed) return retval;
					if (state.backtracking == 0) {
					NEWLINE2_tree = (CommonTree)adaptor.Create(NEWLINE2);
					adaptor.AddChild(root_0, NEWLINE2_tree);
					}

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(147, 28);
			EOF3=(IToken)Match(input,EOF,Follow._EOF_in_root406); if (state.failed) return retval;
			if (state.backtracking == 0) {
			EOF3_tree = (CommonTree)adaptor.Create(EOF3);
			adaptor.AddChild(root_0, EOF3_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("root", 1);
			LeaveRule("root", 1);
			LeaveRule_root();
			if (state.backtracking > 0) { Memoize(input, 1, root_StartIndex); }

		}
		DebugLocation(148, 1);
		} finally { DebugExitRule(GrammarFileName, "root"); }
		return retval;

	}
	// $ANTLR end "root"

	partial void EnterRule_overall_block();
	partial void LeaveRule_overall_block();

	// $ANTLR start "overall_block"
	// SugarCpp.g:150:1: overall_block : ( ( NEWLINE )* node )+ ;
	[GrammarRule("overall_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> overall_block()
	{
		EnterRule_overall_block();
		EnterRule("overall_block", 2);
		TraceIn("overall_block", 2);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int overall_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE4 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> node5 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE4_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "overall_block");
		DebugLocation(150, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 2)) { return retval; }

			// SugarCpp.g:151:2: ( ( ( NEWLINE )* node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:151:4: ( ( NEWLINE )* node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(151, 4);
			// SugarCpp.g:151:4: ( ( NEWLINE )* node )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				try
				{
					alt3 = dfa3.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:151:5: ( NEWLINE )* node
					{
					DebugLocation(151, 5);
					// SugarCpp.g:151:5: ( NEWLINE )*
					try { DebugEnterSubRule(2);
					while (true)
					{
						int alt2=2;
						try { DebugEnterDecision(2, false);
						int LA2_0 = input.LA(1);

						if ((LA2_0==NEWLINE))
						{
							alt2 = 1;
						}


						} finally { DebugExitDecision(2); }
						switch ( alt2 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:151:5: NEWLINE
							{
							DebugLocation(151, 5);
							NEWLINE4=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_overall_block418); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE4_tree = (CommonTree)adaptor.Create(NEWLINE4);
							adaptor.AddChild(root_0, NEWLINE4_tree);
							}

							}
							break;

						default:
							goto loop2;
						}
					}

					loop2:
						;

					} finally { DebugExitSubRule(2); }

					DebugLocation(151, 14);
					PushFollow(Follow._node_in_overall_block421);
					node5=node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, node5.Tree);

					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("overall_block", 2);
			LeaveRule("overall_block", 2);
			LeaveRule_overall_block();
			if (state.backtracking > 0) { Memoize(input, 2, overall_block_StartIndex); }

		}
		DebugLocation(152, 1);
		} finally { DebugExitRule(GrammarFileName, "overall_block"); }
		return retval;

	}
	// $ANTLR end "overall_block"

	partial void EnterRule_node();
	partial void LeaveRule_node();

	// $ANTLR start "node"
	// SugarCpp.g:154:1: node : ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );
	[GrammarRule("node")]
	private AstParserRuleReturnScope<CommonTree, IToken> node()
	{
		EnterRule_node();
		EnterRule("node", 3);
		TraceIn("node", 3);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> func_def6 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> import_def7 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> enum_def8 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_def9 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> namespace_def10 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc11 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using12 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef13 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "node");
		DebugLocation(154, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 3)) { return retval; }

			// SugarCpp.g:155:2: ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef )
			int alt4=8;
			try { DebugEnterDecision(4, false);
			try
			{
				alt4 = dfa4.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:155:4: func_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(155, 4);
				PushFollow(Follow._func_def_in_node434);
				func_def6=func_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_def6.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:156:4: import_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(156, 4);
				PushFollow(Follow._import_def_in_node439);
				import_def7=import_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, import_def7.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:157:4: enum_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(157, 4);
				PushFollow(Follow._enum_def_in_node444);
				enum_def8=enum_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, enum_def8.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:158:4: class_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(158, 4);
				PushFollow(Follow._class_def_in_node449);
				class_def9=class_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, class_def9.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:159:4: namespace_def
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(159, 4);
				PushFollow(Follow._namespace_def_in_node454);
				namespace_def10=namespace_def();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, namespace_def10.Tree);

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// SugarCpp.g:160:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(160, 4);
				PushFollow(Follow._stmt_alloc_in_node459);
				stmt_alloc11=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc11.Tree);

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// SugarCpp.g:161:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(161, 4);
				PushFollow(Follow._stmt_using_in_node464);
				stmt_using12=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using12.Tree);

				}
				break;
			case 8:
				DebugEnterAlt(8);
				// SugarCpp.g:162:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(162, 4);
				PushFollow(Follow._stmt_typedef_in_node469);
				stmt_typedef13=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef13.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("node", 3);
			LeaveRule("node", 3);
			LeaveRule_node();
			if (state.backtracking > 0) { Memoize(input, 3, node_StartIndex); }

		}
		DebugLocation(163, 1);
		} finally { DebugExitRule(GrammarFileName, "node"); }
		return retval;

	}
	// $ANTLR end "node"

	partial void EnterRule_import_def();
	partial void LeaveRule_import_def();

	// $ANTLR start "import_def"
	// SugarCpp.g:165:1: import_def : 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) ;
	[GrammarRule("import_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> import_def()
	{
		EnterRule_import_def();
		EnterRule("import_def", 4);
		TraceIn("import_def", 4);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int import_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal14 = default(IToken);
		IToken STRING15 = default(IToken);
		IToken INDENT16 = default(IToken);
		IToken NEWLINE17 = default(IToken);
		IToken STRING18 = default(IToken);
		IToken NEWLINE19 = default(IToken);
		IToken DEDENT20 = default(IToken);

		CommonTree string_literal14_tree = default(CommonTree);
		CommonTree STRING15_tree = default(CommonTree);
		CommonTree INDENT16_tree = default(CommonTree);
		CommonTree NEWLINE17_tree = default(CommonTree);
		CommonTree STRING18_tree = default(CommonTree);
		CommonTree NEWLINE19_tree = default(CommonTree);
		CommonTree DEDENT20_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_102=new RewriteRuleITokenStream(adaptor,"token 102");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleITokenStream stream_STRING=new RewriteRuleITokenStream(adaptor,"token STRING");
		try { DebugEnterRule(GrammarFileName, "import_def");
		DebugLocation(165, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 4)) { return retval; }

			// SugarCpp.g:166:2: ( 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )? -> ^( Import ( STRING )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:166:4: 'import' ( STRING )? ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			{
			DebugLocation(166, 4);
			string_literal14=(IToken)Match(input,102,Follow._102_in_import_def480); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_102.Add(string_literal14);

			DebugLocation(166, 13);
			// SugarCpp.g:166:13: ( STRING )?
			int alt5=2;
			try { DebugEnterSubRule(5);
			try { DebugEnterDecision(5, false);
			int LA5_0 = input.LA(1);

			if ((LA5_0==STRING))
			{
				alt5 = 1;
			}
			} finally { DebugExitDecision(5); }
			switch (alt5)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:166:13: STRING
				{
				DebugLocation(166, 13);
				STRING15=(IToken)Match(input,STRING,Follow._STRING_in_import_def482); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_STRING.Add(STRING15);


				}
				break;

			}
			} finally { DebugExitSubRule(5); }

			DebugLocation(166, 21);
			// SugarCpp.g:166:21: ( INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT )?
			int alt9=2;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			int LA9_0 = input.LA(1);

			if ((LA9_0==INDENT))
			{
				alt9 = 1;
			}
			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:166:22: INDENT ( ( NEWLINE )+ STRING )* ( NEWLINE )* DEDENT
				{
				DebugLocation(166, 22);
				INDENT16=(IToken)Match(input,INDENT,Follow._INDENT_in_import_def486); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_INDENT.Add(INDENT16);

				DebugLocation(166, 29);
				// SugarCpp.g:166:29: ( ( NEWLINE )+ STRING )*
				try { DebugEnterSubRule(7);
				while (true)
				{
					int alt7=2;
					try { DebugEnterDecision(7, false);
					try
					{
						alt7 = dfa7.Predict(input);
					}
					catch (NoViableAltException nvae)
					{
						DebugRecognitionException(nvae);
						throw;
					}
					} finally { DebugExitDecision(7); }
					switch ( alt7 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:166:30: ( NEWLINE )+ STRING
						{
						DebugLocation(166, 30);
						// SugarCpp.g:166:30: ( NEWLINE )+
						int cnt6=0;
						try { DebugEnterSubRule(6);
						while (true)
						{
							int alt6=2;
							try { DebugEnterDecision(6, false);
							int LA6_0 = input.LA(1);

							if ((LA6_0==NEWLINE))
							{
								alt6 = 1;
							}


							} finally { DebugExitDecision(6); }
							switch (alt6)
							{
							case 1:
								DebugEnterAlt(1);
								// SugarCpp.g:166:30: NEWLINE
								{
								DebugLocation(166, 30);
								NEWLINE17=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def489); if (state.failed) return retval; 
								if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE17);


								}
								break;

							default:
								if (cnt6 >= 1)
									goto loop6;

								if (state.backtracking>0) {state.failed=true; return retval;}
								EarlyExitException eee6 = new EarlyExitException( 6, input );
								DebugRecognitionException(eee6);
								throw eee6;
							}
							cnt6++;
						}
						loop6:
							;

						} finally { DebugExitSubRule(6); }

						DebugLocation(166, 39);
						STRING18=(IToken)Match(input,STRING,Follow._STRING_in_import_def492); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_STRING.Add(STRING18);


						}
						break;

					default:
						goto loop7;
					}
				}

				loop7:
					;

				} finally { DebugExitSubRule(7); }

				DebugLocation(166, 48);
				// SugarCpp.g:166:48: ( NEWLINE )*
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if ((LA8_0==NEWLINE))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch ( alt8 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:166:48: NEWLINE
						{
						DebugLocation(166, 48);
						NEWLINE19=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_import_def496); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE19);


						}
						break;

					default:
						goto loop8;
					}
				}

				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(166, 57);
				DEDENT20=(IToken)Match(input,DEDENT,Follow._DEDENT_in_import_def499); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_DEDENT.Add(DEDENT20);


				}
				break;

			}
			} finally { DebugExitSubRule(9); }



			{
			// AST REWRITE
			// elements: STRING
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 166:66: -> ^( Import ( STRING )* )
			{
				DebugLocation(166, 69);
				// SugarCpp.g:166:69: ^( Import ( STRING )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(166, 71);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Import, "Import"), root_1);

				DebugLocation(166, 78);
				// SugarCpp.g:166:78: ( STRING )*
				while ( stream_STRING.HasNext )
				{
					DebugLocation(166, 78);
					adaptor.AddChild(root_1, stream_STRING.NextNode());

				}
				stream_STRING.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("import_def", 4);
			LeaveRule("import_def", 4);
			LeaveRule_import_def();
			if (state.backtracking > 0) { Memoize(input, 4, import_def_StartIndex); }

		}
		DebugLocation(167, 1);
		} finally { DebugExitRule(GrammarFileName, "import_def"); }
		return retval;

	}
	// $ANTLR end "import_def"

	partial void EnterRule_enum_def();
	partial void LeaveRule_enum_def();

	// $ANTLR start "enum_def"
	// SugarCpp.g:169:1: enum_def : 'enum' ident '=' ident ( '|' ident )* -> ^( Enum ( ident )+ ) ;
	[GrammarRule("enum_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> enum_def()
	{
		EnterRule_enum_def();
		EnterRule("enum_def", 5);
		TraceIn("enum_def", 5);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int enum_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal21 = default(IToken);
		IToken char_literal23 = default(IToken);
		IToken char_literal25 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident22 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident24 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident26 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal21_tree = default(CommonTree);
		CommonTree char_literal23_tree = default(CommonTree);
		CommonTree char_literal25_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleITokenStream stream_99=new RewriteRuleITokenStream(adaptor,"token 99");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "enum_def");
		DebugLocation(169, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 5)) { return retval; }

			// SugarCpp.g:170:2: ( 'enum' ident '=' ident ( '|' ident )* -> ^( Enum ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:170:4: 'enum' ident '=' ident ( '|' ident )*
			{
			DebugLocation(170, 4);
			string_literal21=(IToken)Match(input,99,Follow._99_in_enum_def521); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_99.Add(string_literal21);

			DebugLocation(170, 11);
			PushFollow(Follow._ident_in_enum_def523);
			ident22=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident22.Tree);
			DebugLocation(170, 17);
			char_literal23=(IToken)Match(input,84,Follow._84_in_enum_def525); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_84.Add(char_literal23);

			DebugLocation(170, 21);
			PushFollow(Follow._ident_in_enum_def527);
			ident24=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident24.Tree);
			DebugLocation(170, 27);
			// SugarCpp.g:170:27: ( '|' ident )*
			try { DebugEnterSubRule(10);
			while (true)
			{
				int alt10=2;
				try { DebugEnterDecision(10, false);
				int LA10_0 = input.LA(1);

				if ((LA10_0==111))
				{
					alt10 = 1;
				}


				} finally { DebugExitDecision(10); }
				switch ( alt10 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:170:28: '|' ident
					{
					DebugLocation(170, 28);
					char_literal25=(IToken)Match(input,111,Follow._111_in_enum_def530); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_111.Add(char_literal25);

					DebugLocation(170, 32);
					PushFollow(Follow._ident_in_enum_def532);
					ident26=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident26.Tree);

					}
					break;

				default:
					goto loop10;
				}
			}

			loop10:
				;

			} finally { DebugExitSubRule(10); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 170:40: -> ^( Enum ( ident )+ )
			{
				DebugLocation(170, 43);
				// SugarCpp.g:170:43: ^( Enum ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(170, 45);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Enum, "Enum"), root_1);

				DebugLocation(170, 50);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(170, 50);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("enum_def", 5);
			LeaveRule("enum_def", 5);
			LeaveRule_enum_def();
			if (state.backtracking > 0) { Memoize(input, 5, enum_def_StartIndex); }

		}
		DebugLocation(171, 1);
		} finally { DebugExitRule(GrammarFileName, "enum_def"); }
		return retval;

	}
	// $ANTLR end "enum_def"

	partial void EnterRule_namespace_def();
	partial void LeaveRule_namespace_def();

	// $ANTLR start "namespace_def"
	// SugarCpp.g:173:1: namespace_def : 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace ident overall_block ) ;
	[GrammarRule("namespace_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> namespace_def()
	{
		EnterRule_namespace_def();
		EnterRule("namespace_def", 6);
		TraceIn("namespace_def", 6);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int namespace_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal27 = default(IToken);
		IToken INDENT29 = default(IToken);
		IToken NEWLINE31 = default(IToken);
		IToken DEDENT32 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident28 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> overall_block30 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal27_tree = default(CommonTree);
		CommonTree INDENT29_tree = default(CommonTree);
		CommonTree NEWLINE31_tree = default(CommonTree);
		CommonTree DEDENT32_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_104=new RewriteRuleITokenStream(adaptor,"token 104");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_overall_block=new RewriteRuleSubtreeStream(adaptor,"rule overall_block");
		try { DebugEnterRule(GrammarFileName, "namespace_def");
		DebugLocation(173, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 6)) { return retval; }

			// SugarCpp.g:174:2: ( 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT -> ^( Namespace ident overall_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:174:4: 'namespace' ident INDENT overall_block ( NEWLINE )* DEDENT
			{
			DebugLocation(174, 4);
			string_literal27=(IToken)Match(input,104,Follow._104_in_namespace_def554); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_104.Add(string_literal27);

			DebugLocation(174, 16);
			PushFollow(Follow._ident_in_namespace_def556);
			ident28=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident28.Tree);
			DebugLocation(174, 22);
			INDENT29=(IToken)Match(input,INDENT,Follow._INDENT_in_namespace_def558); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT29);

			DebugLocation(174, 29);
			PushFollow(Follow._overall_block_in_namespace_def560);
			overall_block30=overall_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_overall_block.Add(overall_block30.Tree);
			DebugLocation(174, 43);
			// SugarCpp.g:174:43: ( NEWLINE )*
			try { DebugEnterSubRule(11);
			while (true)
			{
				int alt11=2;
				try { DebugEnterDecision(11, false);
				int LA11_0 = input.LA(1);

				if ((LA11_0==NEWLINE))
				{
					alt11 = 1;
				}


				} finally { DebugExitDecision(11); }
				switch ( alt11 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:174:43: NEWLINE
					{
					DebugLocation(174, 43);
					NEWLINE31=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_namespace_def562); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE31);


					}
					break;

				default:
					goto loop11;
				}
			}

			loop11:
				;

			} finally { DebugExitSubRule(11); }

			DebugLocation(174, 52);
			DEDENT32=(IToken)Match(input,DEDENT,Follow._DEDENT_in_namespace_def565); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT32);



			{
			// AST REWRITE
			// elements: ident, overall_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 174:59: -> ^( Namespace ident overall_block )
			{
				DebugLocation(174, 62);
				// SugarCpp.g:174:62: ^( Namespace ident overall_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(174, 64);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Namespace, "Namespace"), root_1);

				DebugLocation(174, 74);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(174, 80);
				adaptor.AddChild(root_1, stream_overall_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("namespace_def", 6);
			LeaveRule("namespace_def", 6);
			LeaveRule_namespace_def();
			if (state.backtracking > 0) { Memoize(input, 6, namespace_def_StartIndex); }

		}
		DebugLocation(175, 1);
		} finally { DebugExitRule(GrammarFileName, "namespace_def"); }
		return retval;

	}
	// $ANTLR end "namespace_def"

	partial void EnterRule_class_def();
	partial void LeaveRule_class_def();

	// $ANTLR start "class_def"
	// SugarCpp.g:177:1: class_def : 'class' ident INDENT class_block ( NEWLINE )* DEDENT -> ^( Class ident class_block ) ;
	[GrammarRule("class_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_def()
	{
		EnterRule_class_def();
		EnterRule("class_def", 7);
		TraceIn("class_def", 7);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal33 = default(IToken);
		IToken INDENT35 = default(IToken);
		IToken NEWLINE37 = default(IToken);
		IToken DEDENT38 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident34 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> class_block36 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal33_tree = default(CommonTree);
		CommonTree INDENT35_tree = default(CommonTree);
		CommonTree NEWLINE37_tree = default(CommonTree);
		CommonTree DEDENT38_tree = default(CommonTree);
		RewriteRuleITokenStream stream_97=new RewriteRuleITokenStream(adaptor,"token 97");
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_class_block=new RewriteRuleSubtreeStream(adaptor,"rule class_block");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "class_def");
		DebugLocation(177, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 7)) { return retval; }

			// SugarCpp.g:178:2: ( 'class' ident INDENT class_block ( NEWLINE )* DEDENT -> ^( Class ident class_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:178:4: 'class' ident INDENT class_block ( NEWLINE )* DEDENT
			{
			DebugLocation(178, 4);
			string_literal33=(IToken)Match(input,97,Follow._97_in_class_def586); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_97.Add(string_literal33);

			DebugLocation(178, 12);
			PushFollow(Follow._ident_in_class_def588);
			ident34=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident34.Tree);
			DebugLocation(178, 18);
			INDENT35=(IToken)Match(input,INDENT,Follow._INDENT_in_class_def590); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT35);

			DebugLocation(178, 25);
			PushFollow(Follow._class_block_in_class_def592);
			class_block36=class_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_class_block.Add(class_block36.Tree);
			DebugLocation(178, 37);
			// SugarCpp.g:178:37: ( NEWLINE )*
			try { DebugEnterSubRule(12);
			while (true)
			{
				int alt12=2;
				try { DebugEnterDecision(12, false);
				int LA12_0 = input.LA(1);

				if ((LA12_0==NEWLINE))
				{
					alt12 = 1;
				}


				} finally { DebugExitDecision(12); }
				switch ( alt12 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:178:37: NEWLINE
					{
					DebugLocation(178, 37);
					NEWLINE37=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_def594); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE37);


					}
					break;

				default:
					goto loop12;
				}
			}

			loop12:
				;

			} finally { DebugExitSubRule(12); }

			DebugLocation(178, 46);
			DEDENT38=(IToken)Match(input,DEDENT,Follow._DEDENT_in_class_def597); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT38);



			{
			// AST REWRITE
			// elements: ident, class_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 178:53: -> ^( Class ident class_block )
			{
				DebugLocation(178, 56);
				// SugarCpp.g:178:56: ^( Class ident class_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(178, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Class, "Class"), root_1);

				DebugLocation(178, 64);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(178, 70);
				adaptor.AddChild(root_1, stream_class_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_def", 7);
			LeaveRule("class_def", 7);
			LeaveRule_class_def();
			if (state.backtracking > 0) { Memoize(input, 7, class_def_StartIndex); }

		}
		DebugLocation(179, 1);
		} finally { DebugExitRule(GrammarFileName, "class_def"); }
		return retval;

	}
	// $ANTLR end "class_def"

	partial void EnterRule_class_block();
	partial void LeaveRule_class_block();

	// $ANTLR start "class_block"
	// SugarCpp.g:181:1: class_block : ( ( NEWLINE )* class_node )+ ;
	[GrammarRule("class_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_block()
	{
		EnterRule_class_block();
		EnterRule("class_block", 8);
		TraceIn("class_block", 8);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE39 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> class_node40 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE39_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "class_block");
		DebugLocation(181, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 8)) { return retval; }

			// SugarCpp.g:182:2: ( ( ( NEWLINE )* class_node )+ )
			DebugEnterAlt(1);
			// SugarCpp.g:182:4: ( ( NEWLINE )* class_node )+
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(182, 4);
			// SugarCpp.g:182:4: ( ( NEWLINE )* class_node )+
			int cnt14=0;
			try { DebugEnterSubRule(14);
			while (true)
			{
				int alt14=2;
				try { DebugEnterDecision(14, false);
				try
				{
					alt14 = dfa14.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(14); }
				switch (alt14)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:182:5: ( NEWLINE )* class_node
					{
					DebugLocation(182, 5);
					// SugarCpp.g:182:5: ( NEWLINE )*
					try { DebugEnterSubRule(13);
					while (true)
					{
						int alt13=2;
						try { DebugEnterDecision(13, false);
						int LA13_0 = input.LA(1);

						if ((LA13_0==NEWLINE))
						{
							alt13 = 1;
						}


						} finally { DebugExitDecision(13); }
						switch ( alt13 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:182:5: NEWLINE
							{
							DebugLocation(182, 5);
							NEWLINE39=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_block619); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE39_tree = (CommonTree)adaptor.Create(NEWLINE39);
							adaptor.AddChild(root_0, NEWLINE39_tree);
							}

							}
							break;

						default:
							goto loop13;
						}
					}

					loop13:
						;

					} finally { DebugExitSubRule(13); }

					DebugLocation(182, 14);
					PushFollow(Follow._class_node_in_class_block622);
					class_node40=class_node();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, class_node40.Tree);

					}
					break;

				default:
					if (cnt14 >= 1)
						goto loop14;

					if (state.backtracking>0) {state.failed=true; return retval;}
					EarlyExitException eee14 = new EarlyExitException( 14, input );
					DebugRecognitionException(eee14);
					throw eee14;
				}
				cnt14++;
			}
			loop14:
				;

			} finally { DebugExitSubRule(14); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_block", 8);
			LeaveRule("class_block", 8);
			LeaveRule_class_block();
			if (state.backtracking > 0) { Memoize(input, 8, class_block_StartIndex); }

		}
		DebugLocation(183, 1);
		} finally { DebugExitRule(GrammarFileName, "class_block"); }
		return retval;

	}
	// $ANTLR end "class_block"

	partial void EnterRule_attribute();
	partial void LeaveRule_attribute();

	// $ANTLR start "attribute"
	// SugarCpp.g:185:1: attribute : '[' ident ( ',' ident )* ']' -> ^( Attribute ( ident )+ ) ;
	[GrammarRule("attribute")]
	private AstParserRuleReturnScope<CommonTree, IToken> attribute()
	{
		EnterRule_attribute();
		EnterRule("attribute", 9);
		TraceIn("attribute", 9);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int attribute_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal41 = default(IToken);
		IToken char_literal43 = default(IToken);
		IToken char_literal45 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident42 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident44 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal41_tree = default(CommonTree);
		CommonTree char_literal43_tree = default(CommonTree);
		CommonTree char_literal45_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "attribute");
		DebugLocation(185, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 9)) { return retval; }

			// SugarCpp.g:186:2: ( '[' ident ( ',' ident )* ']' -> ^( Attribute ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:186:3: '[' ident ( ',' ident )* ']'
			{
			DebugLocation(186, 3);
			char_literal41=(IToken)Match(input,91,Follow._91_in_attribute634); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_91.Add(char_literal41);

			DebugLocation(186, 7);
			PushFollow(Follow._ident_in_attribute636);
			ident42=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident42.Tree);
			DebugLocation(186, 13);
			// SugarCpp.g:186:13: ( ',' ident )*
			try { DebugEnterSubRule(15);
			while (true)
			{
				int alt15=2;
				try { DebugEnterDecision(15, false);
				int LA15_0 = input.LA(1);

				if ((LA15_0==66))
				{
					alt15 = 1;
				}


				} finally { DebugExitDecision(15); }
				switch ( alt15 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:186:14: ',' ident
					{
					DebugLocation(186, 14);
					char_literal43=(IToken)Match(input,66,Follow._66_in_attribute639); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(char_literal43);

					DebugLocation(186, 18);
					PushFollow(Follow._ident_in_attribute641);
					ident44=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident44.Tree);

					}
					break;

				default:
					goto loop15;
				}
			}

			loop15:
				;

			} finally { DebugExitSubRule(15); }

			DebugLocation(186, 26);
			char_literal45=(IToken)Match(input,92,Follow._92_in_attribute645); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_92.Add(char_literal45);



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 186:30: -> ^( Attribute ( ident )+ )
			{
				DebugLocation(186, 33);
				// SugarCpp.g:186:33: ^( Attribute ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(186, 35);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Attribute, "Attribute"), root_1);

				DebugLocation(186, 45);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(186, 45);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("attribute", 9);
			LeaveRule("attribute", 9);
			LeaveRule_attribute();
			if (state.backtracking > 0) { Memoize(input, 9, attribute_StartIndex); }

		}
		DebugLocation(187, 1);
		} finally { DebugExitRule(GrammarFileName, "attribute"); }
		return retval;

	}
	// $ANTLR end "attribute"

	partial void EnterRule_class_node();
	partial void LeaveRule_class_node();

	// $ANTLR start "class_node"
	// SugarCpp.g:189:1: class_node : ( attribute ( NEWLINE )+ )* node ;
	[GrammarRule("class_node")]
	private AstParserRuleReturnScope<CommonTree, IToken> class_node()
	{
		EnterRule_class_node();
		EnterRule("class_node", 10);
		TraceIn("class_node", 10);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int class_node_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NEWLINE47 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> attribute46 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> node48 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NEWLINE47_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "class_node");
		DebugLocation(189, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 10)) { return retval; }

			// SugarCpp.g:190:2: ( ( attribute ( NEWLINE )+ )* node )
			DebugEnterAlt(1);
			// SugarCpp.g:190:4: ( attribute ( NEWLINE )+ )* node
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(190, 4);
			// SugarCpp.g:190:4: ( attribute ( NEWLINE )+ )*
			try { DebugEnterSubRule(17);
			while (true)
			{
				int alt17=2;
				try { DebugEnterDecision(17, false);
				int LA17_0 = input.LA(1);

				if ((LA17_0==91))
				{
					alt17 = 1;
				}


				} finally { DebugExitDecision(17); }
				switch ( alt17 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:190:5: attribute ( NEWLINE )+
					{
					DebugLocation(190, 5);
					PushFollow(Follow._attribute_in_class_node666);
					attribute46=attribute();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, attribute46.Tree);
					DebugLocation(190, 15);
					// SugarCpp.g:190:15: ( NEWLINE )+
					int cnt16=0;
					try { DebugEnterSubRule(16);
					while (true)
					{
						int alt16=2;
						try { DebugEnterDecision(16, false);
						int LA16_0 = input.LA(1);

						if ((LA16_0==NEWLINE))
						{
							alt16 = 1;
						}


						} finally { DebugExitDecision(16); }
						switch (alt16)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:190:15: NEWLINE
							{
							DebugLocation(190, 15);
							NEWLINE47=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_class_node668); if (state.failed) return retval;
							if (state.backtracking == 0) {
							NEWLINE47_tree = (CommonTree)adaptor.Create(NEWLINE47);
							adaptor.AddChild(root_0, NEWLINE47_tree);
							}

							}
							break;

						default:
							if (cnt16 >= 1)
								goto loop16;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee16 = new EarlyExitException( 16, input );
							DebugRecognitionException(eee16);
							throw eee16;
						}
						cnt16++;
					}
					loop16:
						;

					} finally { DebugExitSubRule(16); }


					}
					break;

				default:
					goto loop17;
				}
			}

			loop17:
				;

			} finally { DebugExitSubRule(17); }

			DebugLocation(190, 27);
			PushFollow(Follow._node_in_class_node674);
			node48=node();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, node48.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("class_node", 10);
			LeaveRule("class_node", 10);
			LeaveRule_class_node();
			if (state.backtracking > 0) { Memoize(input, 10, class_node_StartIndex); }

		}
		DebugLocation(191, 1);
		} finally { DebugExitRule(GrammarFileName, "class_node"); }
		return retval;

	}
	// $ANTLR end "class_node"

	partial void EnterRule_type_name_op();
	partial void LeaveRule_type_name_op();

	// $ANTLR start "type_name_op"
	// SugarCpp.g:193:1: type_name_op : ( '*' | '[' ']' | '&' );
	[GrammarRule("type_name_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name_op()
	{
		EnterRule_type_name_op();
		EnterRule("type_name_op", 11);
		TraceIn("type_name_op", 11);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal49 = default(IToken);
		IToken char_literal50 = default(IToken);
		IToken char_literal51 = default(IToken);
		IToken char_literal52 = default(IToken);

		CommonTree char_literal49_tree = default(CommonTree);
		CommonTree char_literal50_tree = default(CommonTree);
		CommonTree char_literal51_tree = default(CommonTree);
		CommonTree char_literal52_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "type_name_op");
		DebugLocation(193, 34);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 11)) { return retval; }

			// SugarCpp.g:193:13: ( '*' | '[' ']' | '&' )
			int alt18=3;
			try { DebugEnterDecision(18, false);
			switch (input.LA(1))
			{
			case 61:
				{
				alt18 = 1;
				}
				break;
			case 91:
				{
				alt18 = 2;
				}
				break;
			case 57:
				{
				alt18 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 18, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:193:15: '*'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 15);
				char_literal49=(IToken)Match(input,61,Follow._61_in_type_name_op683); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal49_tree = (CommonTree)adaptor.Create(char_literal49);
				adaptor.AddChild(root_0, char_literal49_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:193:21: '[' ']'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 21);
				char_literal50=(IToken)Match(input,91,Follow._91_in_type_name_op687); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal50_tree = (CommonTree)adaptor.Create(char_literal50);
				adaptor.AddChild(root_0, char_literal50_tree);
				}
				DebugLocation(193, 25);
				char_literal51=(IToken)Match(input,92,Follow._92_in_type_name_op689); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal51_tree = (CommonTree)adaptor.Create(char_literal51);
				adaptor.AddChild(root_0, char_literal51_tree);
				}

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:193:31: '&'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(193, 31);
				char_literal52=(IToken)Match(input,57,Follow._57_in_type_name_op693); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal52_tree = (CommonTree)adaptor.Create(char_literal52);
				adaptor.AddChild(root_0, char_literal52_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name_op", 11);
			LeaveRule("type_name_op", 11);
			LeaveRule_type_name_op();
			if (state.backtracking > 0) { Memoize(input, 11, type_name_op_StartIndex); }

		}
		DebugLocation(193, 34);
		} finally { DebugExitRule(GrammarFileName, "type_name_op"); }
		return retval;

	}
	// $ANTLR end "type_name_op"

	partial void EnterRule_type_name();
	partial void LeaveRule_type_name();

	// $ANTLR start "type_name"
	// SugarCpp.g:194:1: type_name : ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) ;
	[GrammarRule("type_name")]
	private AstParserRuleReturnScope<CommonTree, IToken> type_name()
	{
		EnterRule_type_name();
		EnterRule("type_name", 12);
		TraceIn("type_name", 12);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int type_name_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal54 = default(IToken);
		IToken char_literal56 = default(IToken);
		IToken char_literal58 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident53 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name55 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name57 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name_op59 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal54_tree = default(CommonTree);
		CommonTree char_literal56_tree = default(CommonTree);
		CommonTree char_literal58_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_80=new RewriteRuleITokenStream(adaptor,"token 80");
		RewriteRuleITokenStream stream_87=new RewriteRuleITokenStream(adaptor,"token 87");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_type_name_op=new RewriteRuleSubtreeStream(adaptor,"rule type_name_op");
		try { DebugEnterRule(GrammarFileName, "type_name");
		DebugLocation(194, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 12)) { return retval; }

			// SugarCpp.g:195:2: ( ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )* -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:195:4: ident ( '<' ( type_name ( ',' type_name )* )? '>' )? ( type_name_op )*
			{
			DebugLocation(195, 4);
			PushFollow(Follow._ident_in_type_name702);
			ident53=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident53.Tree);
			DebugLocation(195, 10);
			// SugarCpp.g:195:10: ( '<' ( type_name ( ',' type_name )* )? '>' )?
			int alt21=2;
			try { DebugEnterSubRule(21);
			try { DebugEnterDecision(21, false);
			int LA21_0 = input.LA(1);

			if ((LA21_0==80))
			{
				alt21 = 1;
			}
			} finally { DebugExitDecision(21); }
			switch (alt21)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:195:11: '<' ( type_name ( ',' type_name )* )? '>'
				{
				DebugLocation(195, 11);
				char_literal54=(IToken)Match(input,80,Follow._80_in_type_name705); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_80.Add(char_literal54);

				DebugLocation(195, 15);
				// SugarCpp.g:195:15: ( type_name ( ',' type_name )* )?
				int alt20=2;
				try { DebugEnterSubRule(20);
				try { DebugEnterDecision(20, false);
				int LA20_0 = input.LA(1);

				if ((LA20_0==IDENT))
				{
					alt20 = 1;
				}
				} finally { DebugExitDecision(20); }
				switch (alt20)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:195:16: type_name ( ',' type_name )*
					{
					DebugLocation(195, 16);
					PushFollow(Follow._type_name_in_type_name708);
					type_name55=type_name();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name.Add(type_name55.Tree);
					DebugLocation(195, 26);
					// SugarCpp.g:195:26: ( ',' type_name )*
					try { DebugEnterSubRule(19);
					while (true)
					{
						int alt19=2;
						try { DebugEnterDecision(19, false);
						int LA19_0 = input.LA(1);

						if ((LA19_0==66))
						{
							alt19 = 1;
						}


						} finally { DebugExitDecision(19); }
						switch ( alt19 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:195:27: ',' type_name
							{
							DebugLocation(195, 27);
							char_literal56=(IToken)Match(input,66,Follow._66_in_type_name711); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_66.Add(char_literal56);

							DebugLocation(195, 31);
							PushFollow(Follow._type_name_in_type_name713);
							type_name57=type_name();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_type_name.Add(type_name57.Tree);

							}
							break;

						default:
							goto loop19;
						}
					}

					loop19:
						;

					} finally { DebugExitSubRule(19); }


					}
					break;

				}
				} finally { DebugExitSubRule(20); }

				DebugLocation(195, 45);
				char_literal58=(IToken)Match(input,87,Follow._87_in_type_name719); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_87.Add(char_literal58);


				}
				break;

			}
			} finally { DebugExitSubRule(21); }

			DebugLocation(195, 51);
			// SugarCpp.g:195:51: ( type_name_op )*
			try { DebugEnterSubRule(22);
			while (true)
			{
				int alt22=2;
				try { DebugEnterDecision(22, false);
				int LA22_0 = input.LA(1);

				if ((LA22_0==91))
				{
					int LA22_2 = input.LA(2);

					if ((LA22_2==92))
					{
						alt22 = 1;
					}


				}
				else if ((LA22_0==57||LA22_0==61))
				{
					alt22 = 1;
				}


				} finally { DebugExitDecision(22); }
				switch ( alt22 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:195:51: type_name_op
					{
					DebugLocation(195, 51);
					PushFollow(Follow._type_name_op_in_type_name723);
					type_name_op59=type_name_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_type_name_op.Add(type_name_op59.Tree);

					}
					break;

				default:
					goto loop22;
				}
			}

			loop22:
				;

			} finally { DebugExitSubRule(22); }



			{
			// AST REWRITE
			// elements: type_name_op, ident, type_name, 80, 87
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 195:65: -> ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
			{
				DebugLocation(195, 68);
				// SugarCpp.g:195:68: ^( Type_IDENT ident ( '<' ( type_name )* '>' )? ( type_name_op )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(195, 70);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Type_IDENT, "Type_IDENT"), root_1);

				DebugLocation(195, 81);
				adaptor.AddChild(root_1, stream_ident.NextTree());
				DebugLocation(195, 87);
				// SugarCpp.g:195:87: ( '<' ( type_name )* '>' )?
				if (stream_type_name.HasNext||stream_80.HasNext||stream_87.HasNext)
				{
					DebugLocation(195, 88);
					adaptor.AddChild(root_1, stream_80.NextNode());
					DebugLocation(195, 92);
					// SugarCpp.g:195:92: ( type_name )*
					while ( stream_type_name.HasNext )
					{
						DebugLocation(195, 92);
						adaptor.AddChild(root_1, stream_type_name.NextTree());

					}
					stream_type_name.Reset();
					DebugLocation(195, 103);
					adaptor.AddChild(root_1, stream_87.NextNode());

				}
				stream_type_name.Reset();
				stream_80.Reset();
				stream_87.Reset();
				DebugLocation(195, 110);
				// SugarCpp.g:195:110: ( type_name_op )*
				while ( stream_type_name_op.HasNext )
				{
					DebugLocation(195, 110);
					adaptor.AddChild(root_1, stream_type_name_op.NextTree());

				}
				stream_type_name_op.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("type_name", 12);
			LeaveRule("type_name", 12);
			LeaveRule_type_name();
			if (state.backtracking > 0) { Memoize(input, 12, type_name_StartIndex); }

		}
		DebugLocation(196, 1);
		} finally { DebugExitRule(GrammarFileName, "type_name"); }
		return retval;

	}
	// $ANTLR end "type_name"

	partial void EnterRule_generic_parameter();
	partial void LeaveRule_generic_parameter();

	// $ANTLR start "generic_parameter"
	// SugarCpp.g:198:1: generic_parameter : '<' ident ( ',' ! ident )* '>' ;
	[GrammarRule("generic_parameter")]
	private AstParserRuleReturnScope<CommonTree, IToken> generic_parameter()
	{
		EnterRule_generic_parameter();
		EnterRule("generic_parameter", 13);
		TraceIn("generic_parameter", 13);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int generic_parameter_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal60 = default(IToken);
		IToken char_literal62 = default(IToken);
		IToken char_literal64 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident61 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident63 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal60_tree = default(CommonTree);
		CommonTree char_literal62_tree = default(CommonTree);
		CommonTree char_literal64_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "generic_parameter");
		DebugLocation(198, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 13)) { return retval; }

			// SugarCpp.g:199:2: ( '<' ident ( ',' ! ident )* '>' )
			DebugEnterAlt(1);
			// SugarCpp.g:199:4: '<' ident ( ',' ! ident )* '>'
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(199, 4);
			char_literal60=(IToken)Match(input,80,Follow._80_in_generic_parameter757); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal60_tree = (CommonTree)adaptor.Create(char_literal60);
			adaptor.AddChild(root_0, char_literal60_tree);
			}
			DebugLocation(199, 8);
			PushFollow(Follow._ident_in_generic_parameter759);
			ident61=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident61.Tree);
			DebugLocation(199, 14);
			// SugarCpp.g:199:14: ( ',' ! ident )*
			try { DebugEnterSubRule(23);
			while (true)
			{
				int alt23=2;
				try { DebugEnterDecision(23, false);
				int LA23_0 = input.LA(1);

				if ((LA23_0==66))
				{
					alt23 = 1;
				}


				} finally { DebugExitDecision(23); }
				switch ( alt23 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:199:15: ',' ! ident
					{
					DebugLocation(199, 18);
					char_literal62=(IToken)Match(input,66,Follow._66_in_generic_parameter762); if (state.failed) return retval;
					DebugLocation(199, 20);
					PushFollow(Follow._ident_in_generic_parameter765);
					ident63=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, ident63.Tree);

					}
					break;

				default:
					goto loop23;
				}
			}

			loop23:
				;

			} finally { DebugExitSubRule(23); }

			DebugLocation(199, 28);
			char_literal64=(IToken)Match(input,87,Follow._87_in_generic_parameter769); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal64_tree = (CommonTree)adaptor.Create(char_literal64);
			adaptor.AddChild(root_0, char_literal64_tree);
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("generic_parameter", 13);
			LeaveRule("generic_parameter", 13);
			LeaveRule_generic_parameter();
			if (state.backtracking > 0) { Memoize(input, 13, generic_parameter_StartIndex); }

		}
		DebugLocation(200, 1);
		} finally { DebugExitRule(GrammarFileName, "generic_parameter"); }
		return retval;

	}
	// $ANTLR end "generic_parameter"

	partial void EnterRule_func_args();
	partial void LeaveRule_func_args();

	// $ANTLR start "func_args"
	// SugarCpp.g:202:1: func_args : stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) ;
	[GrammarRule("func_args")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_args()
	{
		EnterRule_func_args();
		EnterRule("func_args", 14);
		TraceIn("func_args", 14);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_args_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal66 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc65 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc67 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal66_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleSubtreeStream stream_stmt_alloc=new RewriteRuleSubtreeStream(adaptor,"rule stmt_alloc");
		try { DebugEnterRule(GrammarFileName, "func_args");
		DebugLocation(202, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 14)) { return retval; }

			// SugarCpp.g:203:2: ( stmt_alloc ( ',' stmt_alloc )* -> ^( Func_Args ( stmt_alloc )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:203:4: stmt_alloc ( ',' stmt_alloc )*
			{
			DebugLocation(203, 4);
			PushFollow(Follow._stmt_alloc_in_func_args780);
			stmt_alloc65=stmt_alloc();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc65.Tree);
			DebugLocation(203, 15);
			// SugarCpp.g:203:15: ( ',' stmt_alloc )*
			try { DebugEnterSubRule(24);
			while (true)
			{
				int alt24=2;
				try { DebugEnterDecision(24, false);
				int LA24_0 = input.LA(1);

				if ((LA24_0==66))
				{
					alt24 = 1;
				}


				} finally { DebugExitDecision(24); }
				switch ( alt24 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:203:16: ',' stmt_alloc
					{
					DebugLocation(203, 16);
					char_literal66=(IToken)Match(input,66,Follow._66_in_func_args783); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(char_literal66);

					DebugLocation(203, 20);
					PushFollow(Follow._stmt_alloc_in_func_args785);
					stmt_alloc67=stmt_alloc();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_alloc.Add(stmt_alloc67.Tree);

					}
					break;

				default:
					goto loop24;
				}
			}

			loop24:
				;

			} finally { DebugExitSubRule(24); }



			{
			// AST REWRITE
			// elements: stmt_alloc
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 203:33: -> ^( Func_Args ( stmt_alloc )* )
			{
				DebugLocation(203, 36);
				// SugarCpp.g:203:36: ^( Func_Args ( stmt_alloc )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(203, 38);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Func_Args, "Func_Args"), root_1);

				DebugLocation(203, 48);
				// SugarCpp.g:203:48: ( stmt_alloc )*
				while ( stream_stmt_alloc.HasNext )
				{
					DebugLocation(203, 48);
					adaptor.AddChild(root_1, stream_stmt_alloc.NextTree());

				}
				stream_stmt_alloc.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_args", 14);
			LeaveRule("func_args", 14);
			LeaveRule_func_args();
			if (state.backtracking > 0) { Memoize(input, 14, func_args_StartIndex); }

		}
		DebugLocation(204, 1);
		} finally { DebugExitRule(GrammarFileName, "func_args"); }
		return retval;

	}
	// $ANTLR end "func_args"

	partial void EnterRule_func_def();
	partial void LeaveRule_func_def();

	// $ANTLR start "func_def"
	// SugarCpp.g:206:1: func_def : type_name ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) ;
	[GrammarRule("func_def")]
	private AstParserRuleReturnScope<CommonTree, IToken> func_def()
	{
		EnterRule_func_def();
		EnterRule("func_def", 15);
		TraceIn("func_def", 15);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int func_def_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal71 = default(IToken);
		IToken char_literal73 = default(IToken);
		IToken char_literal75 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> type_name68 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident69 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter70 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> func_args72 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block74 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr76 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal71_tree = default(CommonTree);
		CommonTree char_literal73_tree = default(CommonTree);
		CommonTree char_literal75_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "func_def");
		DebugLocation(206, 4);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 15)) { return retval; }

			// SugarCpp.g:207:2: ( type_name ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr ) )
			DebugEnterAlt(1);
			// SugarCpp.g:207:4: type_name ident ( generic_parameter )? '(' ( func_args )? ')' ( stmt_block | '=' expr )
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(207, 4);
			PushFollow(Follow._type_name_in_func_def807);
			type_name68=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, type_name68.Tree);
			DebugLocation(207, 14);
			PushFollow(Follow._ident_in_func_def809);
			ident69=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident69.Tree);
			DebugLocation(207, 20);
			// SugarCpp.g:207:20: ( generic_parameter )?
			int alt25=2;
			try { DebugEnterSubRule(25);
			try { DebugEnterDecision(25, false);
			int LA25_0 = input.LA(1);

			if ((LA25_0==80))
			{
				alt25 = 1;
			}
			} finally { DebugExitDecision(25); }
			switch (alt25)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:207:20: generic_parameter
				{
				DebugLocation(207, 20);
				PushFollow(Follow._generic_parameter_in_func_def811);
				generic_parameter70=generic_parameter();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, generic_parameter70.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(25); }

			DebugLocation(207, 39);
			char_literal71=(IToken)Match(input,59,Follow._59_in_func_def814); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal71_tree = (CommonTree)adaptor.Create(char_literal71);
			adaptor.AddChild(root_0, char_literal71_tree);
			}
			DebugLocation(207, 43);
			// SugarCpp.g:207:43: ( func_args )?
			int alt26=2;
			try { DebugEnterSubRule(26);
			try { DebugEnterDecision(26, false);
			int LA26_0 = input.LA(1);

			if ((LA26_0==IDENT))
			{
				alt26 = 1;
			}
			} finally { DebugExitDecision(26); }
			switch (alt26)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:207:43: func_args
				{
				DebugLocation(207, 43);
				PushFollow(Follow._func_args_in_func_def816);
				func_args72=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, func_args72.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(26); }

			DebugLocation(207, 54);
			char_literal73=(IToken)Match(input,60,Follow._60_in_func_def819); if (state.failed) return retval;
			if (state.backtracking == 0) {
			char_literal73_tree = (CommonTree)adaptor.Create(char_literal73);
			adaptor.AddChild(root_0, char_literal73_tree);
			}
			DebugLocation(207, 58);
			// SugarCpp.g:207:58: ( stmt_block | '=' expr )
			int alt27=2;
			try { DebugEnterSubRule(27);
			try { DebugEnterDecision(27, false);
			int LA27_0 = input.LA(1);

			if ((LA27_0==INDENT))
			{
				alt27 = 1;
			}
			else if ((LA27_0==84))
			{
				alt27 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 27, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(27); }
			switch (alt27)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:207:60: stmt_block
				{
				DebugLocation(207, 60);
				PushFollow(Follow._stmt_block_in_func_def823);
				stmt_block74=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_block74.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:207:73: '=' expr
				{
				DebugLocation(207, 73);
				char_literal75=(IToken)Match(input,84,Follow._84_in_func_def827); if (state.failed) return retval;
				if (state.backtracking == 0) {
				char_literal75_tree = (CommonTree)adaptor.Create(char_literal75);
				adaptor.AddChild(root_0, char_literal75_tree);
				}
				DebugLocation(207, 77);
				PushFollow(Follow._expr_in_func_def829);
				expr76=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, expr76.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(27); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("func_def", 15);
			LeaveRule("func_def", 15);
			LeaveRule_func_def();
			if (state.backtracking > 0) { Memoize(input, 15, func_def_StartIndex); }

		}
		DebugLocation(208, 4);
		} finally { DebugExitRule(GrammarFileName, "func_def"); }
		return retval;

	}
	// $ANTLR end "func_def"

	partial void EnterRule_stmt_block();
	partial void LeaveRule_stmt_block();

	// $ANTLR start "stmt_block"
	// SugarCpp.g:210:1: stmt_block : INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) ;
	[GrammarRule("stmt_block")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_block()
	{
		EnterRule_stmt_block();
		EnterRule("stmt_block", 16);
		TraceIn("stmt_block", 16);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_block_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken INDENT77 = default(IToken);
		IToken NEWLINE78 = default(IToken);
		IToken NEWLINE80 = default(IToken);
		IToken DEDENT81 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt79 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree INDENT77_tree = default(CommonTree);
		CommonTree NEWLINE78_tree = default(CommonTree);
		CommonTree NEWLINE80_tree = default(CommonTree);
		CommonTree DEDENT81_tree = default(CommonTree);
		RewriteRuleITokenStream stream_DEDENT=new RewriteRuleITokenStream(adaptor,"token DEDENT");
		RewriteRuleITokenStream stream_NEWLINE=new RewriteRuleITokenStream(adaptor,"token NEWLINE");
		RewriteRuleITokenStream stream_INDENT=new RewriteRuleITokenStream(adaptor,"token INDENT");
		RewriteRuleSubtreeStream stream_stmt=new RewriteRuleSubtreeStream(adaptor,"rule stmt");
		try { DebugEnterRule(GrammarFileName, "stmt_block");
		DebugLocation(210, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 16)) { return retval; }

			// SugarCpp.g:211:2: ( INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT -> ^( Stmt_Block ( stmt )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:211:4: INDENT ( ( NEWLINE )+ stmt )* ( NEWLINE )* DEDENT
			{
			DebugLocation(211, 4);
			INDENT77=(IToken)Match(input,INDENT,Follow._INDENT_in_stmt_block845); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_INDENT.Add(INDENT77);

			DebugLocation(211, 11);
			// SugarCpp.g:211:11: ( ( NEWLINE )+ stmt )*
			try { DebugEnterSubRule(29);
			while (true)
			{
				int alt29=2;
				try { DebugEnterDecision(29, false);
				try
				{
					alt29 = dfa29.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(29); }
				switch ( alt29 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:211:12: ( NEWLINE )+ stmt
					{
					DebugLocation(211, 12);
					// SugarCpp.g:211:12: ( NEWLINE )+
					int cnt28=0;
					try { DebugEnterSubRule(28);
					while (true)
					{
						int alt28=2;
						try { DebugEnterDecision(28, false);
						int LA28_0 = input.LA(1);

						if ((LA28_0==NEWLINE))
						{
							alt28 = 1;
						}


						} finally { DebugExitDecision(28); }
						switch (alt28)
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:211:12: NEWLINE
							{
							DebugLocation(211, 12);
							NEWLINE78=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block848); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE78);


							}
							break;

						default:
							if (cnt28 >= 1)
								goto loop28;

							if (state.backtracking>0) {state.failed=true; return retval;}
							EarlyExitException eee28 = new EarlyExitException( 28, input );
							DebugRecognitionException(eee28);
							throw eee28;
						}
						cnt28++;
					}
					loop28:
						;

					} finally { DebugExitSubRule(28); }

					DebugLocation(211, 21);
					PushFollow(Follow._stmt_in_stmt_block851);
					stmt79=stmt();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt.Add(stmt79.Tree);

					}
					break;

				default:
					goto loop29;
				}
			}

			loop29:
				;

			} finally { DebugExitSubRule(29); }

			DebugLocation(211, 28);
			// SugarCpp.g:211:28: ( NEWLINE )*
			try { DebugEnterSubRule(30);
			while (true)
			{
				int alt30=2;
				try { DebugEnterDecision(30, false);
				int LA30_0 = input.LA(1);

				if ((LA30_0==NEWLINE))
				{
					alt30 = 1;
				}


				} finally { DebugExitDecision(30); }
				switch ( alt30 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:211:28: NEWLINE
					{
					DebugLocation(211, 28);
					NEWLINE80=(IToken)Match(input,NEWLINE,Follow._NEWLINE_in_stmt_block855); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_NEWLINE.Add(NEWLINE80);


					}
					break;

				default:
					goto loop30;
				}
			}

			loop30:
				;

			} finally { DebugExitSubRule(30); }

			DebugLocation(211, 37);
			DEDENT81=(IToken)Match(input,DEDENT,Follow._DEDENT_in_stmt_block858); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_DEDENT.Add(DEDENT81);



			{
			// AST REWRITE
			// elements: stmt
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 211:44: -> ^( Stmt_Block ( stmt )* )
			{
				DebugLocation(211, 47);
				// SugarCpp.g:211:47: ^( Stmt_Block ( stmt )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(211, 49);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Block, "Stmt_Block"), root_1);

				DebugLocation(211, 60);
				// SugarCpp.g:211:60: ( stmt )*
				while ( stream_stmt.HasNext )
				{
					DebugLocation(211, 60);
					adaptor.AddChild(root_1, stream_stmt.NextTree());

				}
				stream_stmt.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_block", 16);
			LeaveRule("stmt_block", 16);
			LeaveRule_stmt_block();
			if (state.backtracking > 0) { Memoize(input, 16, stmt_block_StartIndex); }

		}
		DebugLocation(212, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_block"); }
		return retval;

	}
	// $ANTLR end "stmt_block"

	partial void EnterRule_stmt();
	partial void LeaveRule_stmt();

	// $ANTLR start "stmt"
	// SugarCpp.g:214:1: stmt : ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try );
	[GrammarRule("stmt")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt()
	{
		EnterRule_stmt();
		EnterRule("stmt", 17);
		TraceIn("stmt", 17);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_expr82 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_if83 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_for84 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_while85 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_try86 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt");
		DebugLocation(214, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 17)) { return retval; }

			// SugarCpp.g:215:2: ( stmt_expr | stmt_if | stmt_for | stmt_while | stmt_try )
			int alt31=5;
			try { DebugEnterDecision(31, false);
			switch (input.LA(1))
			{
			case IDENT:
			case 59:
			case 106:
			case 108:
			case 109:
				{
				alt31 = 1;
				}
				break;
			case 101:
				{
				alt31 = 2;
				}
				break;
			case 100:
				{
				alt31 = 3;
				}
				break;
			case 110:
				{
				alt31 = 4;
				}
				break;
			case 107:
				{
				alt31 = 5;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 31, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(31); }
			switch (alt31)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:215:4: stmt_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(215, 4);
				PushFollow(Follow._stmt_expr_in_stmt878);
				stmt_expr82=stmt_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_expr82.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:216:4: stmt_if
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(216, 4);
				PushFollow(Follow._stmt_if_in_stmt883);
				stmt_if83=stmt_if();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_if83.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:217:4: stmt_for
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(217, 4);
				PushFollow(Follow._stmt_for_in_stmt888);
				stmt_for84=stmt_for();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_for84.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:218:4: stmt_while
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(218, 4);
				PushFollow(Follow._stmt_while_in_stmt893);
				stmt_while85=stmt_while();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_while85.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:219:4: stmt_try
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(219, 4);
				PushFollow(Follow._stmt_try_in_stmt898);
				stmt_try86=stmt_try();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_try86.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt", 17);
			LeaveRule("stmt", 17);
			LeaveRule_stmt();
			if (state.backtracking > 0) { Memoize(input, 17, stmt_StartIndex); }

		}
		DebugLocation(220, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt"); }
		return retval;

	}
	// $ANTLR end "stmt"

	partial void EnterRule_stmt_expr();
	partial void LeaveRule_stmt_expr();

	// $ANTLR start "stmt_expr"
	// SugarCpp.g:222:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );
	[GrammarRule("stmt_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_expr()
	{
		EnterRule_stmt_expr();
		EnterRule("stmt_expr", 18);
		TraceIn("stmt_expr", 18);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc87 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_return88 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using89 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef90 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_modify91 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_expr");
		DebugLocation(222, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 18)) { return retval; }

			// SugarCpp.g:223:2: ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify )
			int alt32=5;
			try { DebugEnterDecision(32, false);
			try
			{
				alt32 = dfa32.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(32); }
			switch (alt32)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:223:4: stmt_alloc
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(223, 4);
				PushFollow(Follow._stmt_alloc_in_stmt_expr909);
				stmt_alloc87=stmt_alloc();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_alloc87.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:224:4: stmt_return
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(224, 4);
				PushFollow(Follow._stmt_return_in_stmt_expr914);
				stmt_return88=stmt_return();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_return88.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:225:4: stmt_using
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(225, 4);
				PushFollow(Follow._stmt_using_in_stmt_expr919);
				stmt_using89=stmt_using();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_using89.Tree);

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:226:4: stmt_typedef
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(226, 4);
				PushFollow(Follow._stmt_typedef_in_stmt_expr924);
				stmt_typedef90=stmt_typedef();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_typedef90.Tree);

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// SugarCpp.g:227:4: stmt_modify
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(227, 4);
				PushFollow(Follow._stmt_modify_in_stmt_expr929);
				stmt_modify91=stmt_modify();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, stmt_modify91.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_expr", 18);
			LeaveRule("stmt_expr", 18);
			LeaveRule_stmt_expr();
			if (state.backtracking > 0) { Memoize(input, 18, stmt_expr_StartIndex); }

		}
		DebugLocation(228, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_expr"); }
		return retval;

	}
	// $ANTLR end "stmt_expr"

	partial void EnterRule_stmt_typedef();
	partial void LeaveRule_stmt_typedef();

	// $ANTLR start "stmt_typedef"
	// SugarCpp.g:230:1: stmt_typedef : 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) ;
	[GrammarRule("stmt_typedef")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_typedef()
	{
		EnterRule_stmt_typedef();
		EnterRule("stmt_typedef", 19);
		TraceIn("stmt_typedef", 19);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_typedef_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal92 = default(IToken);
		IToken char_literal94 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident93 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name95 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal92_tree = default(CommonTree);
		CommonTree char_literal94_tree = default(CommonTree);
		RewriteRuleITokenStream stream_108=new RewriteRuleITokenStream(adaptor,"token 108");
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		try { DebugEnterRule(GrammarFileName, "stmt_typedef");
		DebugLocation(230, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 19)) { return retval; }

			// SugarCpp.g:231:2: ( 'typedef' ident '=' type_name -> ^( Stmt_Typedef type_name ident ) )
			DebugEnterAlt(1);
			// SugarCpp.g:231:4: 'typedef' ident '=' type_name
			{
			DebugLocation(231, 4);
			string_literal92=(IToken)Match(input,108,Follow._108_in_stmt_typedef940); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_108.Add(string_literal92);

			DebugLocation(231, 14);
			PushFollow(Follow._ident_in_stmt_typedef942);
			ident93=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident93.Tree);
			DebugLocation(231, 20);
			char_literal94=(IToken)Match(input,84,Follow._84_in_stmt_typedef944); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_84.Add(char_literal94);

			DebugLocation(231, 24);
			PushFollow(Follow._type_name_in_stmt_typedef946);
			type_name95=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name95.Tree);


			{
			// AST REWRITE
			// elements: type_name, ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 231:34: -> ^( Stmt_Typedef type_name ident )
			{
				DebugLocation(231, 37);
				// SugarCpp.g:231:37: ^( Stmt_Typedef type_name ident )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(231, 39);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Typedef, "Stmt_Typedef"), root_1);

				DebugLocation(231, 52);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(231, 62);
				adaptor.AddChild(root_1, stream_ident.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_typedef", 19);
			LeaveRule("stmt_typedef", 19);
			LeaveRule_stmt_typedef();
			if (state.backtracking > 0) { Memoize(input, 19, stmt_typedef_StartIndex); }

		}
		DebugLocation(232, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_typedef"); }
		return retval;

	}
	// $ANTLR end "stmt_typedef"

	partial void EnterRule_stmt_using_item();
	partial void LeaveRule_stmt_using_item();

	// $ANTLR start "stmt_using_item"
	// SugarCpp.g:234:1: stmt_using_item : ( ident | 'namespace' );
	[GrammarRule("stmt_using_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item()
	{
		EnterRule_stmt_using_item();
		EnterRule("stmt_using_item", 20);
		TraceIn("stmt_using_item", 20);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal97 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident96 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal97_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "stmt_using_item");
		DebugLocation(234, 36);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 20)) { return retval; }

			// SugarCpp.g:234:16: ( ident | 'namespace' )
			int alt33=2;
			try { DebugEnterDecision(33, false);
			int LA33_0 = input.LA(1);

			if ((LA33_0==IDENT))
			{
				alt33 = 1;
			}
			else if ((LA33_0==104))
			{
				alt33 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 33, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(33); }
			switch (alt33)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:234:18: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 18);
				PushFollow(Follow._ident_in_stmt_using_item965);
				ident96=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident96.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:234:26: 'namespace'
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(234, 26);
				string_literal97=(IToken)Match(input,104,Follow._104_in_stmt_using_item969); if (state.failed) return retval;
				if (state.backtracking == 0) {
				string_literal97_tree = (CommonTree)adaptor.Create(string_literal97);
				adaptor.AddChild(root_0, string_literal97_tree);
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using_item", 20);
			LeaveRule("stmt_using_item", 20);
			LeaveRule_stmt_using_item();
			if (state.backtracking > 0) { Memoize(input, 20, stmt_using_item_StartIndex); }

		}
		DebugLocation(234, 36);
		} finally { DebugExitRule(GrammarFileName, "stmt_using_item"); }
		return retval;

	}
	// $ANTLR end "stmt_using_item"

	partial void EnterRule_stmt_using();
	partial void LeaveRule_stmt_using();

	// $ANTLR start "stmt_using"
	// SugarCpp.g:235:1: stmt_using : 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) ;
	[GrammarRule("stmt_using")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_using()
	{
		EnterRule_stmt_using();
		EnterRule("stmt_using", 21);
		TraceIn("stmt_using", 21);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_using_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal98 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_using_item99 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal98_tree = default(CommonTree);
		RewriteRuleITokenStream stream_109=new RewriteRuleITokenStream(adaptor,"token 109");
		RewriteRuleSubtreeStream stream_stmt_using_item=new RewriteRuleSubtreeStream(adaptor,"rule stmt_using_item");
		try { DebugEnterRule(GrammarFileName, "stmt_using");
		DebugLocation(235, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 21)) { return retval; }

			// SugarCpp.g:236:2: ( 'using' ( stmt_using_item )* -> ^( Stmt_Using ( stmt_using_item )* ) )
			DebugEnterAlt(1);
			// SugarCpp.g:236:4: 'using' ( stmt_using_item )*
			{
			DebugLocation(236, 4);
			string_literal98=(IToken)Match(input,109,Follow._109_in_stmt_using977); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_109.Add(string_literal98);

			DebugLocation(236, 12);
			// SugarCpp.g:236:12: ( stmt_using_item )*
			try { DebugEnterSubRule(34);
			while (true)
			{
				int alt34=2;
				try { DebugEnterDecision(34, false);
				try
				{
					alt34 = dfa34.Predict(input);
				}
				catch (NoViableAltException nvae)
				{
					DebugRecognitionException(nvae);
					throw;
				}
				} finally { DebugExitDecision(34); }
				switch ( alt34 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:236:12: stmt_using_item
					{
					DebugLocation(236, 12);
					PushFollow(Follow._stmt_using_item_in_stmt_using979);
					stmt_using_item99=stmt_using_item();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_stmt_using_item.Add(stmt_using_item99.Tree);

					}
					break;

				default:
					goto loop34;
				}
			}

			loop34:
				;

			} finally { DebugExitSubRule(34); }



			{
			// AST REWRITE
			// elements: stmt_using_item
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 236:29: -> ^( Stmt_Using ( stmt_using_item )* )
			{
				DebugLocation(236, 32);
				// SugarCpp.g:236:32: ^( Stmt_Using ( stmt_using_item )* )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(236, 34);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Using, "Stmt_Using"), root_1);

				DebugLocation(236, 45);
				// SugarCpp.g:236:45: ( stmt_using_item )*
				while ( stream_stmt_using_item.HasNext )
				{
					DebugLocation(236, 45);
					adaptor.AddChild(root_1, stream_stmt_using_item.NextTree());

				}
				stream_stmt_using_item.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_using", 21);
			LeaveRule("stmt_using", 21);
			LeaveRule_stmt_using();
			if (state.backtracking > 0) { Memoize(input, 21, stmt_using_StartIndex); }

		}
		DebugLocation(237, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_using"); }
		return retval;

	}
	// $ANTLR end "stmt_using"

	partial void EnterRule_stmt_return();
	partial void LeaveRule_stmt_return();

	// $ANTLR start "stmt_return"
	// SugarCpp.g:239:1: stmt_return : 'return' ( expr )? -> ^( Expr_Return ( expr )? ) ;
	[GrammarRule("stmt_return")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_return()
	{
		EnterRule_stmt_return();
		EnterRule("stmt_return", 22);
		TraceIn("stmt_return", 22);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_return_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal100 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr101 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal100_tree = default(CommonTree);
		RewriteRuleITokenStream stream_106=new RewriteRuleITokenStream(adaptor,"token 106");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_return");
		DebugLocation(239, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 22)) { return retval; }

			// SugarCpp.g:240:2: ( 'return' ( expr )? -> ^( Expr_Return ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:240:4: 'return' ( expr )?
			{
			DebugLocation(240, 4);
			string_literal100=(IToken)Match(input,106,Follow._106_in_stmt_return1000); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_106.Add(string_literal100);

			DebugLocation(240, 13);
			// SugarCpp.g:240:13: ( expr )?
			int alt35=2;
			try { DebugEnterSubRule(35);
			try { DebugEnterDecision(35, false);
			int LA35_0 = input.LA(1);

			if ((LA35_0==IDENT||LA35_0==NUMBER||LA35_0==STRING||LA35_0==52||LA35_0==57||LA35_0==59||LA35_0==61||(LA35_0>=63 && LA35_0<=64)||(LA35_0>=67 && LA35_0<=68)||LA35_0==105||LA35_0==114))
			{
				alt35 = 1;
			}
			} finally { DebugExitDecision(35); }
			switch (alt35)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:240:13: expr
				{
				DebugLocation(240, 13);
				PushFollow(Follow._expr_in_stmt_return1002);
				expr101=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr101.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(35); }



			{
			// AST REWRITE
			// elements: expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 240:19: -> ^( Expr_Return ( expr )? )
			{
				DebugLocation(240, 22);
				// SugarCpp.g:240:22: ^( Expr_Return ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(240, 24);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Return, "Expr_Return"), root_1);

				DebugLocation(240, 36);
				// SugarCpp.g:240:36: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(240, 36);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_return", 22);
			LeaveRule("stmt_return", 22);
			LeaveRule_stmt_return();
			if (state.backtracking > 0) { Memoize(input, 22, stmt_return_StartIndex); }

		}
		DebugLocation(241, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_return"); }
		return retval;

	}
	// $ANTLR end "stmt_return"

	partial void EnterRule_stmt_if();
	partial void LeaveRule_stmt_if();

	// $ANTLR start "stmt_if"
	// SugarCpp.g:243:1: stmt_if : 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) ;
	[GrammarRule("stmt_if")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_if()
	{
		EnterRule_stmt_if();
		EnterRule("stmt_if", 23);
		TraceIn("stmt_if", 23);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_if_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal102 = default(IToken);
		IToken char_literal103 = default(IToken);
		IToken char_literal105 = default(IToken);
		IToken string_literal107 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr104 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block106 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block108 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal102_tree = default(CommonTree);
		CommonTree char_literal103_tree = default(CommonTree);
		CommonTree char_literal105_tree = default(CommonTree);
		CommonTree string_literal107_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_if");
		DebugLocation(243, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 23)) { return retval; }

			// SugarCpp.g:244:2: ( 'if' '(' expr ')' stmt_block ( 'else' stmt_block )? -> ^( Stmt_If expr stmt_block ( stmt_block )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:244:4: 'if' '(' expr ')' stmt_block ( 'else' stmt_block )?
			{
			DebugLocation(244, 4);
			string_literal102=(IToken)Match(input,101,Follow._101_in_stmt_if1023); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_101.Add(string_literal102);

			DebugLocation(244, 9);
			char_literal103=(IToken)Match(input,59,Follow._59_in_stmt_if1025); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_59.Add(char_literal103);

			DebugLocation(244, 13);
			PushFollow(Follow._expr_in_stmt_if1027);
			expr104=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr104.Tree);
			DebugLocation(244, 18);
			char_literal105=(IToken)Match(input,60,Follow._60_in_stmt_if1029); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal105);

			DebugLocation(244, 22);
			PushFollow(Follow._stmt_block_in_stmt_if1031);
			stmt_block106=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block106.Tree);
			DebugLocation(244, 33);
			// SugarCpp.g:244:33: ( 'else' stmt_block )?
			int alt36=2;
			try { DebugEnterSubRule(36);
			try { DebugEnterDecision(36, false);
			int LA36_0 = input.LA(1);

			if ((LA36_0==98))
			{
				alt36 = 1;
			}
			} finally { DebugExitDecision(36); }
			switch (alt36)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:244:34: 'else' stmt_block
				{
				DebugLocation(244, 34);
				string_literal107=(IToken)Match(input,98,Follow._98_in_stmt_if1034); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_98.Add(string_literal107);

				DebugLocation(244, 41);
				PushFollow(Follow._stmt_block_in_stmt_if1036);
				stmt_block108=stmt_block();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_stmt_block.Add(stmt_block108.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(36); }



			{
			// AST REWRITE
			// elements: stmt_block, stmt_block, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 244:54: -> ^( Stmt_If expr stmt_block ( stmt_block )? )
			{
				DebugLocation(244, 57);
				// SugarCpp.g:244:57: ^( Stmt_If expr stmt_block ( stmt_block )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(244, 59);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_If, "Stmt_If"), root_1);

				DebugLocation(244, 67);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(244, 72);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(244, 83);
				// SugarCpp.g:244:83: ( stmt_block )?
				if (stream_stmt_block.HasNext)
				{
					DebugLocation(244, 83);
					adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				}
				stream_stmt_block.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_if", 23);
			LeaveRule("stmt_if", 23);
			LeaveRule_stmt_if();
			if (state.backtracking > 0) { Memoize(input, 23, stmt_if_StartIndex); }

		}
		DebugLocation(245, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_if"); }
		return retval;

	}
	// $ANTLR end "stmt_if"

	partial void EnterRule_stmt_while();
	partial void LeaveRule_stmt_while();

	// $ANTLR start "stmt_while"
	// SugarCpp.g:247:1: stmt_while : 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) ;
	[GrammarRule("stmt_while")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_while()
	{
		EnterRule_stmt_while();
		EnterRule("stmt_while", 24);
		TraceIn("stmt_while", 24);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_while_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal109 = default(IToken);
		IToken char_literal110 = default(IToken);
		IToken char_literal112 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr111 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block113 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal109_tree = default(CommonTree);
		CommonTree char_literal110_tree = default(CommonTree);
		CommonTree char_literal112_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_110=new RewriteRuleITokenStream(adaptor,"token 110");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_while");
		DebugLocation(247, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 24)) { return retval; }

			// SugarCpp.g:248:2: ( 'while' '(' expr ')' stmt_block -> ^( Stmt_While expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:248:4: 'while' '(' expr ')' stmt_block
			{
			DebugLocation(248, 4);
			string_literal109=(IToken)Match(input,110,Follow._110_in_stmt_while1062); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_110.Add(string_literal109);

			DebugLocation(248, 12);
			char_literal110=(IToken)Match(input,59,Follow._59_in_stmt_while1064); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_59.Add(char_literal110);

			DebugLocation(248, 16);
			PushFollow(Follow._expr_in_stmt_while1066);
			expr111=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr111.Tree);
			DebugLocation(248, 21);
			char_literal112=(IToken)Match(input,60,Follow._60_in_stmt_while1068); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal112);

			DebugLocation(248, 25);
			PushFollow(Follow._stmt_block_in_stmt_while1070);
			stmt_block113=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block113.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 248:36: -> ^( Stmt_While expr stmt_block )
			{
				DebugLocation(248, 39);
				// SugarCpp.g:248:39: ^( Stmt_While expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(248, 41);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_While, "Stmt_While"), root_1);

				DebugLocation(248, 52);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(248, 57);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_while", 24);
			LeaveRule("stmt_while", 24);
			LeaveRule_stmt_while();
			if (state.backtracking > 0) { Memoize(input, 24, stmt_while_StartIndex); }

		}
		DebugLocation(249, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_while"); }
		return retval;

	}
	// $ANTLR end "stmt_while"

	partial void EnterRule_stmt_for();
	partial void LeaveRule_stmt_for();

	// $ANTLR start "stmt_for"
	// SugarCpp.g:251:1: stmt_for : 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) ;
	[GrammarRule("stmt_for")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_for()
	{
		EnterRule_stmt_for();
		EnterRule("stmt_for", 25);
		TraceIn("stmt_for", 25);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_for_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal114 = default(IToken);
		IToken char_literal115 = default(IToken);
		IToken char_literal117 = default(IToken);
		IToken char_literal119 = default(IToken);
		IToken string_literal121 = default(IToken);
		IToken char_literal123 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr116 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr118 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr120 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr122 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block124 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal114_tree = default(CommonTree);
		CommonTree char_literal115_tree = default(CommonTree);
		CommonTree char_literal117_tree = default(CommonTree);
		CommonTree char_literal119_tree = default(CommonTree);
		CommonTree string_literal121_tree = default(CommonTree);
		CommonTree char_literal123_tree = default(CommonTree);
		RewriteRuleITokenStream stream_79=new RewriteRuleITokenStream(adaptor,"token 79");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_103=new RewriteRuleITokenStream(adaptor,"token 103");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_100=new RewriteRuleITokenStream(adaptor,"token 100");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			int type = 0;

		try { DebugEnterRule(GrammarFileName, "stmt_for");
		DebugLocation(251, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 25)) { return retval; }

			// SugarCpp.g:256:2: ( 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block -> {type==0}? ^( Stmt_For expr expr expr stmt_block ) -> ^( Stmt_ForEach expr expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:256:4: 'for' '(' expr ( ';' expr ';' expr | 'in' expr ) ')' stmt_block
			{
			DebugLocation(256, 4);
			string_literal114=(IToken)Match(input,100,Follow._100_in_stmt_for1096); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_100.Add(string_literal114);

			DebugLocation(256, 10);
			char_literal115=(IToken)Match(input,59,Follow._59_in_stmt_for1098); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_59.Add(char_literal115);

			DebugLocation(256, 14);
			PushFollow(Follow._expr_in_stmt_for1100);
			expr116=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr116.Tree);
			DebugLocation(256, 19);
			// SugarCpp.g:256:19: ( ';' expr ';' expr | 'in' expr )
			int alt37=2;
			try { DebugEnterSubRule(37);
			try { DebugEnterDecision(37, false);
			int LA37_0 = input.LA(1);

			if ((LA37_0==79))
			{
				alt37 = 1;
			}
			else if ((LA37_0==103))
			{
				alt37 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 37, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(37); }
			switch (alt37)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:256:20: ';' expr ';' expr
				{
				DebugLocation(256, 20);
				char_literal117=(IToken)Match(input,79,Follow._79_in_stmt_for1103); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_79.Add(char_literal117);

				DebugLocation(256, 24);
				PushFollow(Follow._expr_in_stmt_for1105);
				expr118=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr118.Tree);
				DebugLocation(256, 29);
				char_literal119=(IToken)Match(input,79,Follow._79_in_stmt_for1107); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_79.Add(char_literal119);

				DebugLocation(256, 33);
				PushFollow(Follow._expr_in_stmt_for1109);
				expr120=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr120.Tree);
				DebugLocation(256, 38);
				if (state.backtracking == 0)
				{
					type=0;
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:256:50: 'in' expr
				{
				DebugLocation(256, 50);
				string_literal121=(IToken)Match(input,103,Follow._103_in_stmt_for1115); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_103.Add(string_literal121);

				DebugLocation(256, 55);
				PushFollow(Follow._expr_in_stmt_for1117);
				expr122=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr122.Tree);
				DebugLocation(256, 60);
				if (state.backtracking == 0)
				{
					type=1;
				}

				}
				break;

			}
			} finally { DebugExitSubRule(37); }

			DebugLocation(256, 71);
			char_literal123=(IToken)Match(input,60,Follow._60_in_stmt_for1122); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal123);

			DebugLocation(256, 75);
			PushFollow(Follow._stmt_block_in_stmt_for1124);
			stmt_block124=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block124.Tree);


			{
			// AST REWRITE
			// elements: stmt_block, expr, expr, expr, stmt_block, expr, expr
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 257:4: -> {type==0}? ^( Stmt_For expr expr expr stmt_block )
			if (type==0)
			{
				DebugLocation(257, 18);
				// SugarCpp.g:257:18: ^( Stmt_For expr expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(257, 20);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_For, "Stmt_For"), root_1);

				DebugLocation(257, 29);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(257, 34);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(257, 39);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(257, 44);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}
			else // 258:4: -> ^( Stmt_ForEach expr expr stmt_block )
			{
				DebugLocation(258, 7);
				// SugarCpp.g:258:7: ^( Stmt_ForEach expr expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(258, 9);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_ForEach, "Stmt_ForEach"), root_1);

				DebugLocation(258, 22);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(258, 27);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(258, 32);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_for", 25);
			LeaveRule("stmt_for", 25);
			LeaveRule_stmt_for();
			if (state.backtracking > 0) { Memoize(input, 25, stmt_for_StartIndex); }

		}
		DebugLocation(259, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_for"); }
		return retval;

	}
	// $ANTLR end "stmt_for"

	partial void EnterRule_stmt_try();
	partial void LeaveRule_stmt_try();

	// $ANTLR start "stmt_try"
	// SugarCpp.g:261:1: stmt_try : 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) ;
	[GrammarRule("stmt_try")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_try()
	{
		EnterRule_stmt_try();
		EnterRule("stmt_try", 26);
		TraceIn("stmt_try", 26);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_try_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal125 = default(IToken);
		IToken string_literal127 = default(IToken);
		IToken char_literal128 = default(IToken);
		IToken char_literal130 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block126 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr129 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> stmt_block131 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal125_tree = default(CommonTree);
		CommonTree string_literal127_tree = default(CommonTree);
		CommonTree char_literal128_tree = default(CommonTree);
		CommonTree char_literal130_tree = default(CommonTree);
		RewriteRuleITokenStream stream_96=new RewriteRuleITokenStream(adaptor,"token 96");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_107=new RewriteRuleITokenStream(adaptor,"token 107");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_stmt_block=new RewriteRuleSubtreeStream(adaptor,"rule stmt_block");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_try");
		DebugLocation(261, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 26)) { return retval; }

			// SugarCpp.g:262:2: ( 'try' stmt_block 'catch' '(' expr ')' stmt_block -> ^( Stmt_Try stmt_block expr stmt_block ) )
			DebugEnterAlt(1);
			// SugarCpp.g:262:4: 'try' stmt_block 'catch' '(' expr ')' stmt_block
			{
			DebugLocation(262, 4);
			string_literal125=(IToken)Match(input,107,Follow._107_in_stmt_try1169); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_107.Add(string_literal125);

			DebugLocation(262, 10);
			PushFollow(Follow._stmt_block_in_stmt_try1171);
			stmt_block126=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block126.Tree);
			DebugLocation(262, 21);
			string_literal127=(IToken)Match(input,96,Follow._96_in_stmt_try1173); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_96.Add(string_literal127);

			DebugLocation(262, 29);
			char_literal128=(IToken)Match(input,59,Follow._59_in_stmt_try1175); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_59.Add(char_literal128);

			DebugLocation(262, 33);
			PushFollow(Follow._expr_in_stmt_try1177);
			expr129=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_expr.Add(expr129.Tree);
			DebugLocation(262, 38);
			char_literal130=(IToken)Match(input,60,Follow._60_in_stmt_try1179); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_60.Add(char_literal130);

			DebugLocation(262, 42);
			PushFollow(Follow._stmt_block_in_stmt_try1181);
			stmt_block131=stmt_block();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_stmt_block.Add(stmt_block131.Tree);


			{
			// AST REWRITE
			// elements: expr, stmt_block, stmt_block
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 262:53: -> ^( Stmt_Try stmt_block expr stmt_block )
			{
				DebugLocation(262, 56);
				// SugarCpp.g:262:56: ^( Stmt_Try stmt_block expr stmt_block )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(262, 58);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Stmt_Try, "Stmt_Try"), root_1);

				DebugLocation(262, 67);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());
				DebugLocation(262, 78);
				adaptor.AddChild(root_1, stream_expr.NextTree());
				DebugLocation(262, 83);
				adaptor.AddChild(root_1, stream_stmt_block.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_try", 26);
			LeaveRule("stmt_try", 26);
			LeaveRule_stmt_try();
			if (state.backtracking > 0) { Memoize(input, 26, stmt_try_StartIndex); }

		}
		DebugLocation(263, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_try"); }
		return retval;

	}
	// $ANTLR end "stmt_try"

	partial void EnterRule_ident_list();
	partial void LeaveRule_ident_list();

	// $ANTLR start "ident_list"
	// SugarCpp.g:265:1: ident_list : ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) ;
	[GrammarRule("ident_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident_list()
	{
		EnterRule_ident_list();
		EnterRule("ident_list", 27);
		TraceIn("ident_list", 27);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal133 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident132 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident134 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal133_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "ident_list");
		DebugLocation(265, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 27)) { return retval; }

			// SugarCpp.g:266:2: ( ident ( ',' ident )* -> ^( Ident_List ( ident )+ ) )
			DebugEnterAlt(1);
			// SugarCpp.g:266:4: ident ( ',' ident )*
			{
			DebugLocation(266, 4);
			PushFollow(Follow._ident_in_ident_list1204);
			ident132=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident.Add(ident132.Tree);
			DebugLocation(266, 10);
			// SugarCpp.g:266:10: ( ',' ident )*
			try { DebugEnterSubRule(38);
			while (true)
			{
				int alt38=2;
				try { DebugEnterDecision(38, false);
				int LA38_0 = input.LA(1);

				if ((LA38_0==66))
				{
					alt38 = 1;
				}


				} finally { DebugExitDecision(38); }
				switch ( alt38 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:266:11: ',' ident
					{
					DebugLocation(266, 11);
					char_literal133=(IToken)Match(input,66,Follow._66_in_ident_list1207); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_66.Add(char_literal133);

					DebugLocation(266, 15);
					PushFollow(Follow._ident_in_ident_list1209);
					ident134=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident134.Tree);

					}
					break;

				default:
					goto loop38;
				}
			}

			loop38:
				;

			} finally { DebugExitSubRule(38); }



			{
			// AST REWRITE
			// elements: ident
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 266:23: -> ^( Ident_List ( ident )+ )
			{
				DebugLocation(266, 26);
				// SugarCpp.g:266:26: ^( Ident_List ( ident )+ )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(266, 28);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Ident_List, "Ident_List"), root_1);

				DebugLocation(266, 39);
				if (!(stream_ident.HasNext))
				{
					throw new RewriteEarlyExitException();
				}
				while ( stream_ident.HasNext )
				{
					DebugLocation(266, 39);
					adaptor.AddChild(root_1, stream_ident.NextTree());

				}
				stream_ident.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident_list", 27);
			LeaveRule("ident_list", 27);
			LeaveRule_ident_list();
			if (state.backtracking > 0) { Memoize(input, 27, ident_list_StartIndex); }

		}
		DebugLocation(267, 1);
		} finally { DebugExitRule(GrammarFileName, "ident_list"); }
		return retval;

	}
	// $ANTLR end "ident_list"

	partial void EnterRule_stmt_alloc();
	partial void LeaveRule_stmt_alloc();

	// $ANTLR start "stmt_alloc"
	// SugarCpp.g:269:1: stmt_alloc : ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) ;
	[GrammarRule("stmt_alloc")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_alloc()
	{
		EnterRule_stmt_alloc();
		EnterRule("stmt_alloc", 28);
		TraceIn("stmt_alloc", 28);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_alloc_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal136 = default(IToken);
		IToken char_literal138 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident_list135 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name137 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr139 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal136_tree = default(CommonTree);
		CommonTree char_literal138_tree = default(CommonTree);
		RewriteRuleITokenStream stream_84=new RewriteRuleITokenStream(adaptor,"token 84");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_ident_list=new RewriteRuleSubtreeStream(adaptor,"rule ident_list");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");
		try { DebugEnterRule(GrammarFileName, "stmt_alloc");
		DebugLocation(269, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 28)) { return retval; }

			// SugarCpp.g:270:2: ( ident_list ':' type_name ( '=' expr )? -> ^( Expr_Alloc type_name ident_list ( expr )? ) )
			DebugEnterAlt(1);
			// SugarCpp.g:270:4: ident_list ':' type_name ( '=' expr )?
			{
			DebugLocation(270, 4);
			PushFollow(Follow._ident_list_in_stmt_alloc1231);
			ident_list135=ident_list();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_ident_list.Add(ident_list135.Tree);
			DebugLocation(270, 15);
			char_literal136=(IToken)Match(input,76,Follow._76_in_stmt_alloc1233); if (state.failed) return retval; 
			if (state.backtracking == 0) stream_76.Add(char_literal136);

			DebugLocation(270, 19);
			PushFollow(Follow._type_name_in_stmt_alloc1235);
			type_name137=type_name();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_type_name.Add(type_name137.Tree);
			DebugLocation(270, 29);
			// SugarCpp.g:270:29: ( '=' expr )?
			int alt39=2;
			try { DebugEnterSubRule(39);
			try { DebugEnterDecision(39, false);
			int LA39_0 = input.LA(1);

			if ((LA39_0==84))
			{
				alt39 = 1;
			}
			} finally { DebugExitDecision(39); }
			switch (alt39)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:270:30: '=' expr
				{
				DebugLocation(270, 30);
				char_literal138=(IToken)Match(input,84,Follow._84_in_stmt_alloc1238); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_84.Add(char_literal138);

				DebugLocation(270, 34);
				PushFollow(Follow._expr_in_stmt_alloc1240);
				expr139=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr139.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(39); }



			{
			// AST REWRITE
			// elements: ident_list, expr, type_name
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 270:41: -> ^( Expr_Alloc type_name ident_list ( expr )? )
			{
				DebugLocation(270, 44);
				// SugarCpp.g:270:44: ^( Expr_Alloc type_name ident_list ( expr )? )
				{
				CommonTree root_1 = (CommonTree)adaptor.Nil();
				DebugLocation(270, 46);
				root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Alloc, "Expr_Alloc"), root_1);

				DebugLocation(270, 57);
				adaptor.AddChild(root_1, stream_type_name.NextTree());
				DebugLocation(270, 67);
				adaptor.AddChild(root_1, stream_ident_list.NextTree());
				DebugLocation(270, 78);
				// SugarCpp.g:270:78: ( expr )?
				if (stream_expr.HasNext)
				{
					DebugLocation(270, 78);
					adaptor.AddChild(root_1, stream_expr.NextTree());

				}
				stream_expr.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_alloc", 28);
			LeaveRule("stmt_alloc", 28);
			LeaveRule_stmt_alloc();
			if (state.backtracking > 0) { Memoize(input, 28, stmt_alloc_StartIndex); }

		}
		DebugLocation(271, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_alloc"); }
		return retval;

	}
	// $ANTLR end "stmt_alloc"

	partial void EnterRule_stmt_modify();
	partial void LeaveRule_stmt_modify();

	// $ANTLR start "stmt_modify"
	// SugarCpp.g:273:1: stmt_modify : lvalue ( modify_expr_op ^ cond_expr )? ;
	[GrammarRule("stmt_modify")]
	private AstParserRuleReturnScope<CommonTree, IToken> stmt_modify()
	{
		EnterRule_stmt_modify();
		EnterRule("stmt_modify", 29);
		TraceIn("stmt_modify", 29);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int stmt_modify_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lvalue140 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op141 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cond_expr142 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "stmt_modify");
		DebugLocation(273, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 29)) { return retval; }

			// SugarCpp.g:274:2: ( lvalue ( modify_expr_op ^ cond_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:274:4: lvalue ( modify_expr_op ^ cond_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(274, 4);
			PushFollow(Follow._lvalue_in_stmt_modify1266);
			lvalue140=lvalue();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lvalue140.Tree);
			DebugLocation(274, 11);
			// SugarCpp.g:274:11: ( modify_expr_op ^ cond_expr )?
			int alt40=2;
			try { DebugEnterSubRule(40);
			try { DebugEnterDecision(40, false);
			int LA40_0 = input.LA(1);

			if ((LA40_0==55||LA40_0==58||LA40_0==62||LA40_0==65||LA40_0==69||LA40_0==75||LA40_0==78||LA40_0==82||LA40_0==84||LA40_0==90||LA40_0==94||LA40_0==112))
			{
				alt40 = 1;
			}
			} finally { DebugExitDecision(40); }
			switch (alt40)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:274:12: modify_expr_op ^ cond_expr
				{
				DebugLocation(274, 26);
				PushFollow(Follow._modify_expr_op_in_stmt_modify1269);
				modify_expr_op141=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op141.Tree, root_0);
				DebugLocation(274, 28);
				PushFollow(Follow._cond_expr_in_stmt_modify1272);
				cond_expr142=cond_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr142.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(40); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("stmt_modify", 29);
			LeaveRule("stmt_modify", 29);
			LeaveRule_stmt_modify();
			if (state.backtracking > 0) { Memoize(input, 29, stmt_modify_StartIndex); }

		}
		DebugLocation(275, 1);
		} finally { DebugExitRule(GrammarFileName, "stmt_modify"); }
		return retval;

	}
	// $ANTLR end "stmt_modify"

	partial void EnterRule_expr();
	partial void LeaveRule_expr();

	// $ANTLR start "expr"
	// SugarCpp.g:277:1: expr : lambda_expr ;
	[GrammarRule("expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr()
	{
		EnterRule_expr();
		EnterRule("expr", 30);
		TraceIn("expr", 30);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> lambda_expr143 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "expr");
		DebugLocation(277, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 30)) { return retval; }

			// SugarCpp.g:278:2: ( lambda_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:278:4: lambda_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(278, 4);
			PushFollow(Follow._lambda_expr_in_expr1285);
			lambda_expr143=lambda_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, lambda_expr143.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr", 30);
			LeaveRule("expr", 30);
			LeaveRule_expr();
			if (state.backtracking > 0) { Memoize(input, 30, expr_StartIndex); }

		}
		DebugLocation(279, 1);
		} finally { DebugExitRule(GrammarFileName, "expr"); }
		return retval;

	}
	// $ANTLR end "expr"

	partial void EnterRule_lambda_expr();
	partial void LeaveRule_lambda_expr();

	// $ANTLR start "lambda_expr"
	// SugarCpp.g:281:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );
	[GrammarRule("lambda_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> lambda_expr()
	{
		EnterRule_lambda_expr();
		EnterRule("lambda_expr", 31);
		TraceIn("lambda_expr", 31);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lambda_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal144 = default(IToken);
		IToken char_literal146 = default(IToken);
		IToken string_literal147 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> func_args145 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr148 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr149 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal144_tree = default(CommonTree);
		CommonTree char_literal146_tree = default(CommonTree);
		CommonTree string_literal147_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_86=new RewriteRuleITokenStream(adaptor,"token 86");
		RewriteRuleSubtreeStream stream_modify_expr=new RewriteRuleSubtreeStream(adaptor,"rule modify_expr");
		RewriteRuleSubtreeStream stream_func_args=new RewriteRuleSubtreeStream(adaptor,"rule func_args");
		try { DebugEnterRule(GrammarFileName, "lambda_expr");
		DebugLocation(281, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 31)) { return retval; }

			// SugarCpp.g:282:2: ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr )
			int alt41=2;
			try { DebugEnterDecision(41, false);
			try
			{
				alt41 = dfa41.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(41); }
			switch (alt41)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:282:4: '(' func_args ')' '=>' modify_expr
				{
				DebugLocation(282, 4);
				char_literal144=(IToken)Match(input,59,Follow._59_in_lambda_expr1296); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal144);

				DebugLocation(282, 8);
				PushFollow(Follow._func_args_in_lambda_expr1298);
				func_args145=func_args();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_func_args.Add(func_args145.Tree);
				DebugLocation(282, 18);
				char_literal146=(IToken)Match(input,60,Follow._60_in_lambda_expr1300); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal146);

				DebugLocation(282, 22);
				string_literal147=(IToken)Match(input,86,Follow._86_in_lambda_expr1302); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_86.Add(string_literal147);

				DebugLocation(282, 27);
				PushFollow(Follow._modify_expr_in_lambda_expr1304);
				modify_expr148=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_modify_expr.Add(modify_expr148.Tree);


				{
				// AST REWRITE
				// elements: modify_expr, func_args
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 282:39: -> ^( Expr_Lambda func_args modify_expr )
				{
					DebugLocation(282, 42);
					// SugarCpp.g:282:42: ^( Expr_Lambda func_args modify_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(282, 44);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Lambda, "Expr_Lambda"), root_1);

					DebugLocation(282, 56);
					adaptor.AddChild(root_1, stream_func_args.NextTree());
					DebugLocation(282, 66);
					adaptor.AddChild(root_1, stream_modify_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:283:4: modify_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(283, 4);
				PushFollow(Follow._modify_expr_in_lambda_expr1319);
				modify_expr149=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr149.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lambda_expr", 31);
			LeaveRule("lambda_expr", 31);
			LeaveRule_lambda_expr();
			if (state.backtracking > 0) { Memoize(input, 31, lambda_expr_StartIndex); }

		}
		DebugLocation(284, 1);
		} finally { DebugExitRule(GrammarFileName, "lambda_expr"); }
		return retval;

	}
	// $ANTLR end "lambda_expr"

	partial void EnterRule_modify_expr_op();
	partial void LeaveRule_modify_expr_op();

	// $ANTLR start "modify_expr_op"
	// SugarCpp.g:286:1: modify_expr_op : ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' );
	[GrammarRule("modify_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op()
	{
		EnterRule_modify_expr_op();
		EnterRule("modify_expr_op", 32);
		TraceIn("modify_expr_op", 32);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set150 = default(IToken);

		CommonTree set150_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "modify_expr_op");
		DebugLocation(286, 99);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 32)) { return retval; }

			// SugarCpp.g:286:15: ( ':=' | '=' | '+=' | '-=' | '*=' | '/=' | '%=' | '&=' | '^=' | '|=' | '<<=' | '>>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(286, 15);

			set150=(IToken)input.LT(1);
			if (input.LA(1)==55||input.LA(1)==58||input.LA(1)==62||input.LA(1)==65||input.LA(1)==69||input.LA(1)==75||input.LA(1)==78||input.LA(1)==82||input.LA(1)==84||input.LA(1)==90||input.LA(1)==94||input.LA(1)==112)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set150));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr_op", 32);
			LeaveRule("modify_expr_op", 32);
			LeaveRule_modify_expr_op();
			if (state.backtracking > 0) { Memoize(input, 32, modify_expr_op_StartIndex); }

		}
		DebugLocation(286, 99);
		} finally { DebugExitRule(GrammarFileName, "modify_expr_op"); }
		return retval;

	}
	// $ANTLR end "modify_expr_op"

	partial void EnterRule_modify_expr();
	partial void LeaveRule_modify_expr();

	// $ANTLR start "modify_expr"
	// SugarCpp.g:287:1: modify_expr : cond_expr ( modify_expr_op ^ modify_expr )? ;
	[GrammarRule("modify_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> modify_expr()
	{
		EnterRule_modify_expr();
		EnterRule("modify_expr", 33);
		TraceIn("modify_expr", 33);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int modify_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr151 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr_op152 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> modify_expr153 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "modify_expr");
		DebugLocation(287, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 33)) { return retval; }

			// SugarCpp.g:288:2: ( cond_expr ( modify_expr_op ^ modify_expr )? )
			DebugEnterAlt(1);
			// SugarCpp.g:288:4: cond_expr ( modify_expr_op ^ modify_expr )?
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(288, 4);
			PushFollow(Follow._cond_expr_in_modify_expr1381);
			cond_expr151=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr151.Tree);
			DebugLocation(288, 14);
			// SugarCpp.g:288:14: ( modify_expr_op ^ modify_expr )?
			int alt42=2;
			try { DebugEnterSubRule(42);
			try { DebugEnterDecision(42, false);
			int LA42_0 = input.LA(1);

			if ((LA42_0==55||LA42_0==58||LA42_0==62||LA42_0==65||LA42_0==69||LA42_0==75||LA42_0==78||LA42_0==82||LA42_0==84||LA42_0==90||LA42_0==94||LA42_0==112))
			{
				alt42 = 1;
			}
			} finally { DebugExitDecision(42); }
			switch (alt42)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:288:15: modify_expr_op ^ modify_expr
				{
				DebugLocation(288, 29);
				PushFollow(Follow._modify_expr_op_in_modify_expr1384);
				modify_expr_op152=modify_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) root_0 = (CommonTree)adaptor.BecomeRoot(modify_expr_op152.Tree, root_0);
				DebugLocation(288, 31);
				PushFollow(Follow._modify_expr_in_modify_expr1387);
				modify_expr153=modify_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, modify_expr153.Tree);

				}
				break;

			}
			} finally { DebugExitSubRule(42); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("modify_expr", 33);
			LeaveRule("modify_expr", 33);
			LeaveRule_modify_expr();
			if (state.backtracking > 0) { Memoize(input, 33, modify_expr_StartIndex); }

		}
		DebugLocation(289, 1);
		} finally { DebugExitRule(GrammarFileName, "modify_expr"); }
		return retval;

	}
	// $ANTLR end "modify_expr"

	partial void EnterRule_cond_expr_item();
	partial void LeaveRule_cond_expr_item();

	// $ANTLR start "cond_expr_item"
	// SugarCpp.g:291:1: cond_expr_item : cond_expr ;
	[GrammarRule("cond_expr_item")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr_item()
	{
		EnterRule_cond_expr_item();
		EnterRule("cond_expr_item", 34);
		TraceIn("cond_expr_item", 34);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_item_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> cond_expr154 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		try { DebugEnterRule(GrammarFileName, "cond_expr_item");
		DebugLocation(291, 26);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 34)) { return retval; }

			// SugarCpp.g:291:15: ( cond_expr )
			DebugEnterAlt(1);
			// SugarCpp.g:291:17: cond_expr
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(291, 17);
			PushFollow(Follow._cond_expr_in_cond_expr_item1398);
			cond_expr154=cond_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, cond_expr154.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr_item", 34);
			LeaveRule("cond_expr_item", 34);
			LeaveRule_cond_expr_item();
			if (state.backtracking > 0) { Memoize(input, 34, cond_expr_item_StartIndex); }

		}
		DebugLocation(291, 26);
		} finally { DebugExitRule(GrammarFileName, "cond_expr_item"); }
		return retval;

	}
	// $ANTLR end "cond_expr_item"

	partial void EnterRule_cond_expr();
	partial void LeaveRule_cond_expr();

	// $ANTLR start "cond_expr"
	// SugarCpp.g:292:1: cond_expr : (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? ;
	[GrammarRule("cond_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cond_expr()
	{
		EnterRule_cond_expr();
		EnterRule("cond_expr", 35);
		TraceIn("cond_expr", 35);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cond_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal155 = default(IToken);
		IToken string_literal156 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal155_tree = default(CommonTree);
		CommonTree string_literal156_tree = default(CommonTree);
		RewriteRuleITokenStream stream_98=new RewriteRuleITokenStream(adaptor,"token 98");
		RewriteRuleITokenStream stream_101=new RewriteRuleITokenStream(adaptor,"token 101");
		RewriteRuleSubtreeStream stream_cond_expr_item=new RewriteRuleSubtreeStream(adaptor,"rule cond_expr_item");
		RewriteRuleSubtreeStream stream_or_expr=new RewriteRuleSubtreeStream(adaptor,"rule or_expr");
		try { DebugEnterRule(GrammarFileName, "cond_expr");
		DebugLocation(292, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 35)) { return retval; }

			// SugarCpp.g:293:2: ( (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:293:4: (a= or_expr -> $a) ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			{
			DebugLocation(293, 4);
			// SugarCpp.g:293:4: (a= or_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:293:5: a= or_expr
			{
			DebugLocation(293, 6);
			PushFollow(Follow._or_expr_in_cond_expr1410);
			a=or_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_or_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 293:15: -> $a
			{
				DebugLocation(293, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(293, 22);
			// SugarCpp.g:293:22: ( 'if' a= cond_expr_item 'else' b= cond_expr_item -> ^( Expr_Cond $a $cond_expr $b) )?
			int alt43=2;
			try { DebugEnterSubRule(43);
			try { DebugEnterDecision(43, false);
			int LA43_0 = input.LA(1);

			if ((LA43_0==101))
			{
				alt43 = 1;
			}
			} finally { DebugExitDecision(43); }
			switch (alt43)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:293:23: 'if' a= cond_expr_item 'else' b= cond_expr_item
				{
				DebugLocation(293, 23);
				string_literal155=(IToken)Match(input,101,Follow._101_in_cond_expr1419); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_101.Add(string_literal155);

				DebugLocation(293, 29);
				PushFollow(Follow._cond_expr_item_in_cond_expr1423);
				a=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(a.Tree);
				DebugLocation(293, 45);
				string_literal156=(IToken)Match(input,98,Follow._98_in_cond_expr1425); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_98.Add(string_literal156);

				DebugLocation(293, 53);
				PushFollow(Follow._cond_expr_item_in_cond_expr1429);
				b=cond_expr_item();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cond_expr_item.Add(b.Tree);


				{
				// AST REWRITE
				// elements: a, cond_expr, b
				// token labels: 
				// rule labels: retval, b, a
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);
				RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 293:69: -> ^( Expr_Cond $a $cond_expr $b)
				{
					DebugLocation(293, 72);
					// SugarCpp.g:293:72: ^( Expr_Cond $a $cond_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(293, 74);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Cond, "Expr_Cond"), root_1);

					DebugLocation(293, 85);
					adaptor.AddChild(root_1, stream_a.NextTree());
					DebugLocation(293, 88);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(293, 99);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(43); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cond_expr", 35);
			LeaveRule("cond_expr", 35);
			LeaveRule_cond_expr();
			if (state.backtracking > 0) { Memoize(input, 35, cond_expr_StartIndex); }

		}
		DebugLocation(294, 1);
		} finally { DebugExitRule(GrammarFileName, "cond_expr"); }
		return retval;

	}
	// $ANTLR end "cond_expr"

	partial void EnterRule_or_expr();
	partial void LeaveRule_or_expr();

	// $ANTLR start "or_expr"
	// SugarCpp.g:296:1: or_expr : (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* ;
	[GrammarRule("or_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> or_expr()
	{
		EnterRule_or_expr();
		EnterRule("or_expr", 36);
		TraceIn("or_expr", 36);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int or_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal157 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal157_tree = default(CommonTree);
		RewriteRuleITokenStream stream_113=new RewriteRuleITokenStream(adaptor,"token 113");
		RewriteRuleSubtreeStream stream_and_expr=new RewriteRuleSubtreeStream(adaptor,"rule and_expr");
		try { DebugEnterRule(GrammarFileName, "or_expr");
		DebugLocation(296, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 36)) { return retval; }

			// SugarCpp.g:297:2: ( (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:297:4: (a= and_expr -> $a) ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			{
			DebugLocation(297, 4);
			// SugarCpp.g:297:4: (a= and_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:297:5: a= and_expr
			{
			DebugLocation(297, 6);
			PushFollow(Follow._and_expr_in_or_expr1460);
			a=and_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_and_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 297:16: -> $a
			{
				DebugLocation(297, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(297, 23);
			// SugarCpp.g:297:23: ( '||' b= and_expr -> ^( Expr_Bin '||' $or_expr $b) )*
			try { DebugEnterSubRule(44);
			while (true)
			{
				int alt44=2;
				try { DebugEnterDecision(44, false);
				int LA44_0 = input.LA(1);

				if ((LA44_0==113))
				{
					alt44 = 1;
				}


				} finally { DebugExitDecision(44); }
				switch ( alt44 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:297:24: '||' b= and_expr
					{
					DebugLocation(297, 24);
					string_literal157=(IToken)Match(input,113,Follow._113_in_or_expr1469); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_113.Add(string_literal157);

					DebugLocation(297, 30);
					PushFollow(Follow._and_expr_in_or_expr1473);
					b=and_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_and_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, or_expr, 113
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 297:40: -> ^( Expr_Bin '||' $or_expr $b)
					{
						DebugLocation(297, 43);
						// SugarCpp.g:297:43: ^( Expr_Bin '||' $or_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(297, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(297, 54);
						adaptor.AddChild(root_1, stream_113.NextNode());
						DebugLocation(297, 60);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(297, 69);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop44;
				}
			}

			loop44:
				;

			} finally { DebugExitSubRule(44); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("or_expr", 36);
			LeaveRule("or_expr", 36);
			LeaveRule_or_expr();
			if (state.backtracking > 0) { Memoize(input, 36, or_expr_StartIndex); }

		}
		DebugLocation(298, 1);
		} finally { DebugExitRule(GrammarFileName, "or_expr"); }
		return retval;

	}
	// $ANTLR end "or_expr"

	partial void EnterRule_and_expr();
	partial void LeaveRule_and_expr();

	// $ANTLR start "and_expr"
	// SugarCpp.g:300:1: and_expr : (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* ;
	[GrammarRule("and_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> and_expr()
	{
		EnterRule_and_expr();
		EnterRule("and_expr", 37);
		TraceIn("and_expr", 37);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int and_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal158 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal158_tree = default(CommonTree);
		RewriteRuleITokenStream stream_56=new RewriteRuleITokenStream(adaptor,"token 56");
		RewriteRuleSubtreeStream stream_bit_or=new RewriteRuleSubtreeStream(adaptor,"rule bit_or");
		try { DebugEnterRule(GrammarFileName, "and_expr");
		DebugLocation(300, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 37)) { return retval; }

			// SugarCpp.g:301:2: ( (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:301:4: (a= bit_or -> $a) ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			{
			DebugLocation(301, 4);
			// SugarCpp.g:301:4: (a= bit_or -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:301:5: a= bit_or
			{
			DebugLocation(301, 6);
			PushFollow(Follow._bit_or_in_and_expr1503);
			a=bit_or();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_or.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 301:14: -> $a
			{
				DebugLocation(301, 18);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(301, 21);
			// SugarCpp.g:301:21: ( '&&' b= bit_or -> ^( Expr_Bin '&&' $and_expr $b) )*
			try { DebugEnterSubRule(45);
			while (true)
			{
				int alt45=2;
				try { DebugEnterDecision(45, false);
				int LA45_0 = input.LA(1);

				if ((LA45_0==56))
				{
					alt45 = 1;
				}


				} finally { DebugExitDecision(45); }
				switch ( alt45 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:301:22: '&&' b= bit_or
					{
					DebugLocation(301, 22);
					string_literal158=(IToken)Match(input,56,Follow._56_in_and_expr1512); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_56.Add(string_literal158);

					DebugLocation(301, 28);
					PushFollow(Follow._bit_or_in_and_expr1516);
					b=bit_or();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_or.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 56, b, and_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 301:36: -> ^( Expr_Bin '&&' $and_expr $b)
					{
						DebugLocation(301, 39);
						// SugarCpp.g:301:39: ^( Expr_Bin '&&' $and_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(301, 41);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(301, 50);
						adaptor.AddChild(root_1, stream_56.NextNode());
						DebugLocation(301, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(301, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop45;
				}
			}

			loop45:
				;

			} finally { DebugExitSubRule(45); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("and_expr", 37);
			LeaveRule("and_expr", 37);
			LeaveRule_and_expr();
			if (state.backtracking > 0) { Memoize(input, 37, and_expr_StartIndex); }

		}
		DebugLocation(302, 1);
		} finally { DebugExitRule(GrammarFileName, "and_expr"); }
		return retval;

	}
	// $ANTLR end "and_expr"

	partial void EnterRule_bit_or();
	partial void LeaveRule_bit_or();

	// $ANTLR start "bit_or"
	// SugarCpp.g:304:1: bit_or : (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* ;
	[GrammarRule("bit_or")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_or()
	{
		EnterRule_bit_or();
		EnterRule("bit_or", 38);
		TraceIn("bit_or", 38);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_or_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal159 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal159_tree = default(CommonTree);
		RewriteRuleITokenStream stream_111=new RewriteRuleITokenStream(adaptor,"token 111");
		RewriteRuleSubtreeStream stream_bit_xor=new RewriteRuleSubtreeStream(adaptor,"rule bit_xor");
		try { DebugEnterRule(GrammarFileName, "bit_or");
		DebugLocation(304, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 38)) { return retval; }

			// SugarCpp.g:305:2: ( (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:305:4: (a= bit_xor -> $a) ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			{
			DebugLocation(305, 4);
			// SugarCpp.g:305:4: (a= bit_xor -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:305:5: a= bit_xor
			{
			DebugLocation(305, 6);
			PushFollow(Follow._bit_xor_in_bit_or1546);
			a=bit_xor();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_xor.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 305:15: -> $a
			{
				DebugLocation(305, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(305, 22);
			// SugarCpp.g:305:22: ( '|' b= bit_xor -> ^( Expr_Bin '|' $bit_or $b) )*
			try { DebugEnterSubRule(46);
			while (true)
			{
				int alt46=2;
				try { DebugEnterDecision(46, false);
				int LA46_0 = input.LA(1);

				if ((LA46_0==111))
				{
					alt46 = 1;
				}


				} finally { DebugExitDecision(46); }
				switch ( alt46 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:305:23: '|' b= bit_xor
					{
					DebugLocation(305, 23);
					char_literal159=(IToken)Match(input,111,Follow._111_in_bit_or1555); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_111.Add(char_literal159);

					DebugLocation(305, 28);
					PushFollow(Follow._bit_xor_in_bit_or1559);
					b=bit_xor();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_xor.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 111, bit_or
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 305:37: -> ^( Expr_Bin '|' $bit_or $b)
					{
						DebugLocation(305, 40);
						// SugarCpp.g:305:40: ^( Expr_Bin '|' $bit_or $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(305, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(305, 51);
						adaptor.AddChild(root_1, stream_111.NextNode());
						DebugLocation(305, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(305, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop46;
				}
			}

			loop46:
				;

			} finally { DebugExitSubRule(46); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_or", 38);
			LeaveRule("bit_or", 38);
			LeaveRule_bit_or();
			if (state.backtracking > 0) { Memoize(input, 38, bit_or_StartIndex); }

		}
		DebugLocation(306, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_or"); }
		return retval;

	}
	// $ANTLR end "bit_or"

	partial void EnterRule_bit_xor();
	partial void LeaveRule_bit_xor();

	// $ANTLR start "bit_xor"
	// SugarCpp.g:308:1: bit_xor : (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* ;
	[GrammarRule("bit_xor")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_xor()
	{
		EnterRule_bit_xor();
		EnterRule("bit_xor", 39);
		TraceIn("bit_xor", 39);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_xor_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal160 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal160_tree = default(CommonTree);
		RewriteRuleITokenStream stream_93=new RewriteRuleITokenStream(adaptor,"token 93");
		RewriteRuleSubtreeStream stream_bit_and=new RewriteRuleSubtreeStream(adaptor,"rule bit_and");
		try { DebugEnterRule(GrammarFileName, "bit_xor");
		DebugLocation(308, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 39)) { return retval; }

			// SugarCpp.g:309:2: ( (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:309:4: (a= bit_and -> $a) ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			{
			DebugLocation(309, 4);
			// SugarCpp.g:309:4: (a= bit_and -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:309:5: a= bit_and
			{
			DebugLocation(309, 6);
			PushFollow(Follow._bit_and_in_bit_xor1589);
			a=bit_and();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_bit_and.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 309:15: -> $a
			{
				DebugLocation(309, 19);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(309, 22);
			// SugarCpp.g:309:22: ( '^' b= bit_and -> ^( Expr_Bin '^' $bit_xor $b) )*
			try { DebugEnterSubRule(47);
			while (true)
			{
				int alt47=2;
				try { DebugEnterDecision(47, false);
				int LA47_0 = input.LA(1);

				if ((LA47_0==93))
				{
					alt47 = 1;
				}


				} finally { DebugExitDecision(47); }
				switch ( alt47 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:309:23: '^' b= bit_and
					{
					DebugLocation(309, 23);
					char_literal160=(IToken)Match(input,93,Follow._93_in_bit_xor1598); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_93.Add(char_literal160);

					DebugLocation(309, 28);
					PushFollow(Follow._bit_and_in_bit_xor1602);
					b=bit_and();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_bit_and.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, bit_xor, 93
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 309:37: -> ^( Expr_Bin '^' $bit_xor $b)
					{
						DebugLocation(309, 40);
						// SugarCpp.g:309:40: ^( Expr_Bin '^' $bit_xor $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(309, 42);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(309, 51);
						adaptor.AddChild(root_1, stream_93.NextNode());
						DebugLocation(309, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(309, 65);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop47;
				}
			}

			loop47:
				;

			} finally { DebugExitSubRule(47); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_xor", 39);
			LeaveRule("bit_xor", 39);
			LeaveRule_bit_xor();
			if (state.backtracking > 0) { Memoize(input, 39, bit_xor_StartIndex); }

		}
		DebugLocation(310, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_xor"); }
		return retval;

	}
	// $ANTLR end "bit_xor"

	partial void EnterRule_bit_and();
	partial void LeaveRule_bit_and();

	// $ANTLR start "bit_and"
	// SugarCpp.g:312:1: bit_and : (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* ;
	[GrammarRule("bit_and")]
	private AstParserRuleReturnScope<CommonTree, IToken> bit_and()
	{
		EnterRule_bit_and();
		EnterRule("bit_and", 40);
		TraceIn("bit_and", 40);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int bit_and_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal161 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal161_tree = default(CommonTree);
		RewriteRuleITokenStream stream_57=new RewriteRuleITokenStream(adaptor,"token 57");
		RewriteRuleSubtreeStream stream_cmp_equ_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr");
		try { DebugEnterRule(GrammarFileName, "bit_and");
		DebugLocation(312, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 40)) { return retval; }

			// SugarCpp.g:313:2: ( (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:313:4: (a= cmp_equ_expr -> $a) ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			{
			DebugLocation(313, 4);
			// SugarCpp.g:313:4: (a= cmp_equ_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:313:5: a= cmp_equ_expr
			{
			DebugLocation(313, 6);
			PushFollow(Follow._cmp_equ_expr_in_bit_and1632);
			a=cmp_equ_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_equ_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 313:20: -> $a
			{
				DebugLocation(313, 24);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(313, 27);
			// SugarCpp.g:313:27: ( '&' b= cmp_equ_expr -> ^( Expr_Bin '&' $bit_and $b) )*
			try { DebugEnterSubRule(48);
			while (true)
			{
				int alt48=2;
				try { DebugEnterDecision(48, false);
				int LA48_0 = input.LA(1);

				if ((LA48_0==57))
				{
					alt48 = 1;
				}


				} finally { DebugExitDecision(48); }
				switch ( alt48 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:313:28: '&' b= cmp_equ_expr
					{
					DebugLocation(313, 28);
					char_literal161=(IToken)Match(input,57,Follow._57_in_bit_and1641); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_57.Add(char_literal161);

					DebugLocation(313, 33);
					PushFollow(Follow._cmp_equ_expr_in_bit_and1645);
					b=cmp_equ_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_cmp_equ_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 57, bit_and, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 313:47: -> ^( Expr_Bin '&' $bit_and $b)
					{
						DebugLocation(313, 50);
						// SugarCpp.g:313:50: ^( Expr_Bin '&' $bit_and $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(313, 52);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(313, 61);
						adaptor.AddChild(root_1, stream_57.NextNode());
						DebugLocation(313, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(313, 75);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop48;
				}
			}

			loop48:
				;

			} finally { DebugExitSubRule(48); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("bit_and", 40);
			LeaveRule("bit_and", 40);
			LeaveRule_bit_and();
			if (state.backtracking > 0) { Memoize(input, 40, bit_and_StartIndex); }

		}
		DebugLocation(314, 1);
		} finally { DebugExitRule(GrammarFileName, "bit_and"); }
		return retval;

	}
	// $ANTLR end "bit_and"

	partial void EnterRule_cmp_equ_expr_op();
	partial void LeaveRule_cmp_equ_expr_op();

	// $ANTLR start "cmp_equ_expr_op"
	// SugarCpp.g:316:1: cmp_equ_expr_op : ( '==' | '!=' );
	[GrammarRule("cmp_equ_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op()
	{
		EnterRule_cmp_equ_expr_op();
		EnterRule("cmp_equ_expr_op", 41);
		TraceIn("cmp_equ_expr_op", 41);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set162 = default(IToken);

		CommonTree set162_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr_op");
		DebugLocation(316, 29);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 41)) { return retval; }

			// SugarCpp.g:316:16: ( '==' | '!=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(316, 16);

			set162=(IToken)input.LT(1);
			if (input.LA(1)==53||input.LA(1)==85)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set162));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr_op", 41);
			LeaveRule("cmp_equ_expr_op", 41);
			LeaveRule_cmp_equ_expr_op();
			if (state.backtracking > 0) { Memoize(input, 41, cmp_equ_expr_op_StartIndex); }

		}
		DebugLocation(316, 29);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr_op"

	partial void EnterRule_cmp_equ_expr();
	partial void LeaveRule_cmp_equ_expr();

	// $ANTLR start "cmp_equ_expr"
	// SugarCpp.g:317:1: cmp_equ_expr : (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? ;
	[GrammarRule("cmp_equ_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr()
	{
		EnterRule_cmp_equ_expr();
		EnterRule("cmp_equ_expr", 42);
		TraceIn("cmp_equ_expr", 42);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_equ_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_equ_expr_op163 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_equ_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_equ_expr_op");
		RewriteRuleSubtreeStream stream_cmp_expr=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_equ_expr");
		DebugLocation(317, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 42)) { return retval; }

			// SugarCpp.g:318:2: ( (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:318:4: (a= cmp_expr -> $a) ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			{
			DebugLocation(318, 4);
			// SugarCpp.g:318:4: (a= cmp_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:318:5: a= cmp_expr
			{
			DebugLocation(318, 6);
			PushFollow(Follow._cmp_expr_in_cmp_equ_expr1686);
			a=cmp_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_cmp_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 318:16: -> $a
			{
				DebugLocation(318, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(318, 23);
			// SugarCpp.g:318:23: ( cmp_equ_expr_op b= cmp_expr -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b) )?
			int alt49=2;
			try { DebugEnterSubRule(49);
			try { DebugEnterDecision(49, false);
			int LA49_0 = input.LA(1);

			if ((LA49_0==53||LA49_0==85))
			{
				alt49 = 1;
			}
			} finally { DebugExitDecision(49); }
			switch (alt49)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:318:24: cmp_equ_expr_op b= cmp_expr
				{
				DebugLocation(318, 24);
				PushFollow(Follow._cmp_equ_expr_op_in_cmp_equ_expr1695);
				cmp_equ_expr_op163=cmp_equ_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_equ_expr_op.Add(cmp_equ_expr_op163.Tree);
				DebugLocation(318, 41);
				PushFollow(Follow._cmp_expr_in_cmp_equ_expr1699);
				b=cmp_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: b, cmp_equ_expr_op, cmp_equ_expr
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 318:51: -> ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
				{
					DebugLocation(318, 54);
					// SugarCpp.g:318:54: ^( Expr_Bin cmp_equ_expr_op $cmp_equ_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(318, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(318, 65);
					adaptor.AddChild(root_1, stream_cmp_equ_expr_op.NextTree());
					DebugLocation(318, 82);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(318, 96);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(49); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_equ_expr", 42);
			LeaveRule("cmp_equ_expr", 42);
			LeaveRule_cmp_equ_expr();
			if (state.backtracking > 0) { Memoize(input, 42, cmp_equ_expr_StartIndex); }

		}
		DebugLocation(319, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_equ_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_equ_expr"

	partial void EnterRule_cmp_expr_op();
	partial void LeaveRule_cmp_expr_op();

	// $ANTLR start "cmp_expr_op"
	// SugarCpp.g:321:1: cmp_expr_op : ( '<' | '<=' | '>' | '>=' );
	[GrammarRule("cmp_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op()
	{
		EnterRule_cmp_expr_op();
		EnterRule("cmp_expr_op", 43);
		TraceIn("cmp_expr_op", 43);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set164 = default(IToken);

		CommonTree set164_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "cmp_expr_op");
		DebugLocation(321, 37);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 43)) { return retval; }

			// SugarCpp.g:321:12: ( '<' | '<=' | '>' | '>=' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(321, 12);

			set164=(IToken)input.LT(1);
			if (input.LA(1)==80||input.LA(1)==83||(input.LA(1)>=87 && input.LA(1)<=88))
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set164));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr_op", 43);
			LeaveRule("cmp_expr_op", 43);
			LeaveRule_cmp_expr_op();
			if (state.backtracking > 0) { Memoize(input, 43, cmp_expr_op_StartIndex); }

		}
		DebugLocation(321, 37);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr_op"); }
		return retval;

	}
	// $ANTLR end "cmp_expr_op"

	partial void EnterRule_cmp_expr();
	partial void LeaveRule_cmp_expr();

	// $ANTLR start "cmp_expr"
	// SugarCpp.g:322:1: cmp_expr : (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? ;
	[GrammarRule("cmp_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> cmp_expr()
	{
		EnterRule_cmp_expr();
		EnterRule("cmp_expr", 44);
		TraceIn("cmp_expr", 44);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int cmp_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> cmp_expr_op165 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_cmp_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule cmp_expr_op");
		RewriteRuleSubtreeStream stream_shift_expr=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr");
		try { DebugEnterRule(GrammarFileName, "cmp_expr");
		DebugLocation(322, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 44)) { return retval; }

			// SugarCpp.g:323:2: ( (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )? )
			DebugEnterAlt(1);
			// SugarCpp.g:323:4: (a= shift_expr -> $a) ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			{
			DebugLocation(323, 4);
			// SugarCpp.g:323:4: (a= shift_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:323:5: a= shift_expr
			{
			DebugLocation(323, 6);
			PushFollow(Follow._shift_expr_in_cmp_expr1749);
			a=shift_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_shift_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 323:18: -> $a
			{
				DebugLocation(323, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(323, 25);
			// SugarCpp.g:323:25: ( cmp_expr_op b= shift_expr -> ^( Expr_Bin cmp_expr_op $cmp_expr $b) )?
			int alt50=2;
			try { DebugEnterSubRule(50);
			try { DebugEnterDecision(50, false);
			int LA50_0 = input.LA(1);

			if ((LA50_0==80||LA50_0==83||(LA50_0>=87 && LA50_0<=88)))
			{
				alt50 = 1;
			}
			} finally { DebugExitDecision(50); }
			switch (alt50)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:323:26: cmp_expr_op b= shift_expr
				{
				DebugLocation(323, 26);
				PushFollow(Follow._cmp_expr_op_in_cmp_expr1758);
				cmp_expr_op165=cmp_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_cmp_expr_op.Add(cmp_expr_op165.Tree);
				DebugLocation(323, 39);
				PushFollow(Follow._shift_expr_in_cmp_expr1762);
				b=shift_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_shift_expr.Add(b.Tree);


				{
				// AST REWRITE
				// elements: cmp_expr, b, cmp_expr_op
				// token labels: 
				// rule labels: retval, b
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
				RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 323:51: -> ^( Expr_Bin cmp_expr_op $cmp_expr $b)
				{
					DebugLocation(323, 54);
					// SugarCpp.g:323:54: ^( Expr_Bin cmp_expr_op $cmp_expr $b)
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(323, 56);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

					DebugLocation(323, 65);
					adaptor.AddChild(root_1, stream_cmp_expr_op.NextTree());
					DebugLocation(323, 78);
					adaptor.AddChild(root_1, stream_retval.NextTree());
					DebugLocation(323, 88);
					adaptor.AddChild(root_1, stream_b.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			} finally { DebugExitSubRule(50); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("cmp_expr", 44);
			LeaveRule("cmp_expr", 44);
			LeaveRule_cmp_expr();
			if (state.backtracking > 0) { Memoize(input, 44, cmp_expr_StartIndex); }

		}
		DebugLocation(324, 1);
		} finally { DebugExitRule(GrammarFileName, "cmp_expr"); }
		return retval;

	}
	// $ANTLR end "cmp_expr"

	partial void EnterRule_shift_expr_op();
	partial void LeaveRule_shift_expr_op();

	// $ANTLR start "shift_expr_op"
	// SugarCpp.g:326:1: shift_expr_op : ( '<<' | '>>' );
	[GrammarRule("shift_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op()
	{
		EnterRule_shift_expr_op();
		EnterRule("shift_expr_op", 45);
		TraceIn("shift_expr_op", 45);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set166 = default(IToken);

		CommonTree set166_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "shift_expr_op");
		DebugLocation(326, 27);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 45)) { return retval; }

			// SugarCpp.g:326:14: ( '<<' | '>>' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(326, 14);

			set166=(IToken)input.LT(1);
			if (input.LA(1)==81||input.LA(1)==89)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set166));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr_op", 45);
			LeaveRule("shift_expr_op", 45);
			LeaveRule_shift_expr_op();
			if (state.backtracking > 0) { Memoize(input, 45, shift_expr_op_StartIndex); }

		}
		DebugLocation(326, 27);
		} finally { DebugExitRule(GrammarFileName, "shift_expr_op"); }
		return retval;

	}
	// $ANTLR end "shift_expr_op"

	partial void EnterRule_shift_expr();
	partial void LeaveRule_shift_expr();

	// $ANTLR start "shift_expr"
	// SugarCpp.g:327:1: shift_expr : (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* ;
	[GrammarRule("shift_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> shift_expr()
	{
		EnterRule_shift_expr();
		EnterRule("shift_expr", 46);
		TraceIn("shift_expr", 46);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int shift_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> shift_expr_op167 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_shift_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule shift_expr_op");
		RewriteRuleSubtreeStream stream_add_expr=new RewriteRuleSubtreeStream(adaptor,"rule add_expr");
		try { DebugEnterRule(GrammarFileName, "shift_expr");
		DebugLocation(327, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 46)) { return retval; }

			// SugarCpp.g:328:2: ( (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:328:4: (a= add_expr -> $a) ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			{
			DebugLocation(328, 4);
			// SugarCpp.g:328:4: (a= add_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:328:5: a= add_expr
			{
			DebugLocation(328, 6);
			PushFollow(Follow._add_expr_in_shift_expr1803);
			a=add_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_add_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 328:16: -> $a
			{
				DebugLocation(328, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(328, 23);
			// SugarCpp.g:328:23: ( shift_expr_op b= add_expr -> ^( Expr_Bin shift_expr_op $shift_expr $b) )*
			try { DebugEnterSubRule(51);
			while (true)
			{
				int alt51=2;
				try { DebugEnterDecision(51, false);
				int LA51_0 = input.LA(1);

				if ((LA51_0==81||LA51_0==89))
				{
					alt51 = 1;
				}


				} finally { DebugExitDecision(51); }
				switch ( alt51 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:328:24: shift_expr_op b= add_expr
					{
					DebugLocation(328, 24);
					PushFollow(Follow._shift_expr_op_in_shift_expr1812);
					shift_expr_op167=shift_expr_op();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_shift_expr_op.Add(shift_expr_op167.Tree);
					DebugLocation(328, 39);
					PushFollow(Follow._add_expr_in_shift_expr1816);
					b=add_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_add_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: shift_expr, shift_expr_op, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 328:49: -> ^( Expr_Bin shift_expr_op $shift_expr $b)
					{
						DebugLocation(328, 52);
						// SugarCpp.g:328:52: ^( Expr_Bin shift_expr_op $shift_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(328, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(328, 63);
						adaptor.AddChild(root_1, stream_shift_expr_op.NextTree());
						DebugLocation(328, 78);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(328, 90);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop51;
				}
			}

			loop51:
				;

			} finally { DebugExitSubRule(51); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("shift_expr", 46);
			LeaveRule("shift_expr", 46);
			LeaveRule_shift_expr();
			if (state.backtracking > 0) { Memoize(input, 46, shift_expr_StartIndex); }

		}
		DebugLocation(329, 1);
		} finally { DebugExitRule(GrammarFileName, "shift_expr"); }
		return retval;

	}
	// $ANTLR end "shift_expr"

	partial void EnterRule_add_expr();
	partial void LeaveRule_add_expr();

	// $ANTLR start "add_expr"
	// SugarCpp.g:331:1: add_expr : (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* ;
	[GrammarRule("add_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> add_expr()
	{
		EnterRule_add_expr();
		EnterRule("add_expr", 47);
		TraceIn("add_expr", 47);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int add_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal168 = default(IToken);
		IToken char_literal169 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal168_tree = default(CommonTree);
		CommonTree char_literal169_tree = default(CommonTree);
		RewriteRuleITokenStream stream_67=new RewriteRuleITokenStream(adaptor,"token 67");
		RewriteRuleITokenStream stream_63=new RewriteRuleITokenStream(adaptor,"token 63");
		RewriteRuleSubtreeStream stream_infix_expr=new RewriteRuleSubtreeStream(adaptor,"rule infix_expr");
		try { DebugEnterRule(GrammarFileName, "add_expr");
		DebugLocation(331, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 47)) { return retval; }

			// SugarCpp.g:332:2: ( (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:332:4: (a= infix_expr -> $a) ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			{
			DebugLocation(332, 4);
			// SugarCpp.g:332:4: (a= infix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:332:5: a= infix_expr
			{
			DebugLocation(332, 6);
			PushFollow(Follow._infix_expr_in_add_expr1846);
			a=infix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_infix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 332:18: -> $a
			{
				DebugLocation(332, 22);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(332, 25);
			// SugarCpp.g:332:25: ( '+' b= infix_expr -> ^( Expr_Bin '+' $add_expr $b) | '-' b= infix_expr -> ^( Expr_Bin '-' $add_expr $b) )*
			try { DebugEnterSubRule(52);
			while (true)
			{
				int alt52=3;
				try { DebugEnterDecision(52, false);
				int LA52_0 = input.LA(1);

				if ((LA52_0==63))
				{
					alt52 = 1;
				}
				else if ((LA52_0==67))
				{
					alt52 = 2;
				}


				} finally { DebugExitDecision(52); }
				switch ( alt52 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:332:27: '+' b= infix_expr
					{
					DebugLocation(332, 27);
					char_literal168=(IToken)Match(input,63,Follow._63_in_add_expr1856); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_63.Add(char_literal168);

					DebugLocation(332, 32);
					PushFollow(Follow._infix_expr_in_add_expr1860);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 63, add_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 332:44: -> ^( Expr_Bin '+' $add_expr $b)
					{
						DebugLocation(332, 47);
						// SugarCpp.g:332:47: ^( Expr_Bin '+' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(332, 49);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(332, 58);
						adaptor.AddChild(root_1, stream_63.NextNode());
						DebugLocation(332, 63);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(332, 73);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:333:12: '-' b= infix_expr
					{
					DebugLocation(333, 12);
					char_literal169=(IToken)Match(input,67,Follow._67_in_add_expr1887); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_67.Add(char_literal169);

					DebugLocation(333, 17);
					PushFollow(Follow._infix_expr_in_add_expr1891);
					b=infix_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: add_expr, 67, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 333:29: -> ^( Expr_Bin '-' $add_expr $b)
					{
						DebugLocation(333, 32);
						// SugarCpp.g:333:32: ^( Expr_Bin '-' $add_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(333, 34);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(333, 43);
						adaptor.AddChild(root_1, stream_67.NextNode());
						DebugLocation(333, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(333, 58);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop52;
				}
			}

			loop52:
				;

			} finally { DebugExitSubRule(52); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("add_expr", 47);
			LeaveRule("add_expr", 47);
			LeaveRule_add_expr();
			if (state.backtracking > 0) { Memoize(input, 47, add_expr_StartIndex); }

		}
		DebugLocation(335, 1);
		} finally { DebugExitRule(GrammarFileName, "add_expr"); }
		return retval;

	}
	// $ANTLR end "add_expr"

	partial void EnterRule_infix_expr();
	partial void LeaveRule_infix_expr();

	// $ANTLR start "infix_expr"
	// SugarCpp.g:337:1: infix_expr : (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* ;
	[GrammarRule("infix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_expr()
	{
		EnterRule_infix_expr();
		EnterRule("infix_expr", 48);
		TraceIn("infix_expr", 48);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> infix_func170 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		RewriteRuleSubtreeStream stream_infix_func=new RewriteRuleSubtreeStream(adaptor,"rule infix_func");
		RewriteRuleSubtreeStream stream_mul_expr=new RewriteRuleSubtreeStream(adaptor,"rule mul_expr");
		try { DebugEnterRule(GrammarFileName, "infix_expr");
		DebugLocation(337, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 48)) { return retval; }

			// SugarCpp.g:338:2: ( (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:338:4: (a= mul_expr -> $a) ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			{
			DebugLocation(338, 4);
			// SugarCpp.g:338:4: (a= mul_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:338:5: a= mul_expr
			{
			DebugLocation(338, 6);
			PushFollow(Follow._mul_expr_in_infix_expr1931);
			a=mul_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_mul_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 338:16: -> $a
			{
				DebugLocation(338, 20);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(338, 23);
			// SugarCpp.g:338:23: ( infix_func b= mul_expr -> ^( Expr_Infix infix_func $infix_expr $b) )*
			try { DebugEnterSubRule(53);
			while (true)
			{
				int alt53=2;
				try { DebugEnterDecision(53, false);
				int LA53_0 = input.LA(1);

				if ((LA53_0==95))
				{
					alt53 = 1;
				}


				} finally { DebugExitDecision(53); }
				switch ( alt53 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:338:25: infix_func b= mul_expr
					{
					DebugLocation(338, 25);
					PushFollow(Follow._infix_func_in_infix_expr1941);
					infix_func170=infix_func();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_infix_func.Add(infix_func170.Tree);
					DebugLocation(338, 37);
					PushFollow(Follow._mul_expr_in_infix_expr1945);
					b=mul_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_mul_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: infix_expr, b, infix_func
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 338:48: -> ^( Expr_Infix infix_func $infix_expr $b)
					{
						DebugLocation(338, 51);
						// SugarCpp.g:338:51: ^( Expr_Infix infix_func $infix_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(338, 53);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Infix, "Expr_Infix"), root_1);

						DebugLocation(338, 64);
						adaptor.AddChild(root_1, stream_infix_func.NextTree());
						DebugLocation(338, 76);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(338, 88);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop53;
				}
			}

			loop53:
				;

			} finally { DebugExitSubRule(53); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_expr", 48);
			LeaveRule("infix_expr", 48);
			LeaveRule_infix_expr();
			if (state.backtracking > 0) { Memoize(input, 48, infix_expr_StartIndex); }

		}
		DebugLocation(339, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_expr"); }
		return retval;

	}
	// $ANTLR end "infix_expr"

	partial void EnterRule_mul_expr();
	partial void LeaveRule_mul_expr();

	// $ANTLR start "mul_expr"
	// SugarCpp.g:341:1: mul_expr : (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* ;
	[GrammarRule("mul_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> mul_expr()
	{
		EnterRule_mul_expr();
		EnterRule("mul_expr", 49);
		TraceIn("mul_expr", 49);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int mul_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal171 = default(IToken);
		IToken char_literal172 = default(IToken);
		IToken char_literal173 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal171_tree = default(CommonTree);
		CommonTree char_literal172_tree = default(CommonTree);
		CommonTree char_literal173_tree = default(CommonTree);
		RewriteRuleITokenStream stream_54=new RewriteRuleITokenStream(adaptor,"token 54");
		RewriteRuleITokenStream stream_61=new RewriteRuleITokenStream(adaptor,"token 61");
		RewriteRuleITokenStream stream_74=new RewriteRuleITokenStream(adaptor,"token 74");
		RewriteRuleSubtreeStream stream_selector_expr=new RewriteRuleSubtreeStream(adaptor,"rule selector_expr");
		try { DebugEnterRule(GrammarFileName, "mul_expr");
		DebugLocation(341, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 49)) { return retval; }

			// SugarCpp.g:342:2: ( (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:342:4: (a= selector_expr -> $a) ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			{
			DebugLocation(342, 4);
			// SugarCpp.g:342:4: (a= selector_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:342:5: a= selector_expr
			{
			DebugLocation(342, 6);
			PushFollow(Follow._selector_expr_in_mul_expr1977);
			a=selector_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_selector_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 342:21: -> $a
			{
				DebugLocation(342, 25);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(342, 28);
			// SugarCpp.g:342:28: ( '*' b= selector_expr -> ^( Expr_Bin '*' $mul_expr $b) | '/' b= selector_expr -> ^( Expr_Bin '/' $mul_expr $b) | '%' b= selector_expr -> ^( Expr_Bin '%' $mul_expr $b) )*
			try { DebugEnterSubRule(54);
			while (true)
			{
				int alt54=4;
				try { DebugEnterDecision(54, false);
				switch (input.LA(1))
				{
				case 61:
					{
					alt54 = 1;
					}
					break;
				case 74:
					{
					alt54 = 2;
					}
					break;
				case 54:
					{
					alt54 = 3;
					}
					break;
				}

				} finally { DebugExitDecision(54); }
				switch ( alt54 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:342:30: '*' b= selector_expr
					{
					DebugLocation(342, 30);
					char_literal171=(IToken)Match(input,61,Follow._61_in_mul_expr1987); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_61.Add(char_literal171);

					DebugLocation(342, 35);
					PushFollow(Follow._selector_expr_in_mul_expr1991);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, mul_expr, 61
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 342:50: -> ^( Expr_Bin '*' $mul_expr $b)
					{
						DebugLocation(342, 53);
						// SugarCpp.g:342:53: ^( Expr_Bin '*' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(342, 55);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(342, 64);
						adaptor.AddChild(root_1, stream_61.NextNode());
						DebugLocation(342, 69);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(342, 79);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:343:15: '/' b= selector_expr
					{
					DebugLocation(343, 15);
					char_literal172=(IToken)Match(input,74,Follow._74_in_mul_expr2021); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_74.Add(char_literal172);

					DebugLocation(343, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2025);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: 74, mul_expr, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 343:35: -> ^( Expr_Bin '/' $mul_expr $b)
					{
						DebugLocation(343, 38);
						// SugarCpp.g:343:38: ^( Expr_Bin '/' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(343, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(343, 49);
						adaptor.AddChild(root_1, stream_74.NextNode());
						DebugLocation(343, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(343, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:344:15: '%' b= selector_expr
					{
					DebugLocation(344, 15);
					char_literal173=(IToken)Match(input,54,Follow._54_in_mul_expr2055); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_54.Add(char_literal173);

					DebugLocation(344, 20);
					PushFollow(Follow._selector_expr_in_mul_expr2059);
					b=selector_expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_selector_expr.Add(b.Tree);


					{
					// AST REWRITE
					// elements: b, 54, mul_expr
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 344:35: -> ^( Expr_Bin '%' $mul_expr $b)
					{
						DebugLocation(344, 38);
						// SugarCpp.g:344:38: ^( Expr_Bin '%' $mul_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(344, 40);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bin, "Expr_Bin"), root_1);

						DebugLocation(344, 49);
						adaptor.AddChild(root_1, stream_54.NextNode());
						DebugLocation(344, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(344, 64);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop54;
				}
			}

			loop54:
				;

			} finally { DebugExitSubRule(54); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("mul_expr", 49);
			LeaveRule("mul_expr", 49);
			LeaveRule_mul_expr();
			if (state.backtracking > 0) { Memoize(input, 49, mul_expr_StartIndex); }

		}
		DebugLocation(346, 1);
		} finally { DebugExitRule(GrammarFileName, "mul_expr"); }
		return retval;

	}
	// $ANTLR end "mul_expr"

	partial void EnterRule_selector_expr();
	partial void LeaveRule_selector_expr();

	// $ANTLR start "selector_expr"
	// SugarCpp.g:348:1: selector_expr : (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* ;
	[GrammarRule("selector_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> selector_expr()
	{
		EnterRule_selector_expr();
		EnterRule("selector_expr", 50);
		TraceIn("selector_expr", 50);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int selector_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal174 = default(IToken);
		IToken string_literal175 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> b = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal174_tree = default(CommonTree);
		CommonTree string_literal175_tree = default(CommonTree);
		RewriteRuleITokenStream stream_71=new RewriteRuleITokenStream(adaptor,"token 71");
		RewriteRuleITokenStream stream_73=new RewriteRuleITokenStream(adaptor,"token 73");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		try { DebugEnterRule(GrammarFileName, "selector_expr");
		DebugLocation(348, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 50)) { return retval; }

			// SugarCpp.g:349:2: ( (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:349:4: (a= prefix_expr -> $a) ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			{
			DebugLocation(349, 4);
			// SugarCpp.g:349:4: (a= prefix_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:349:5: a= prefix_expr
			{
			DebugLocation(349, 6);
			PushFollow(Follow._prefix_expr_in_selector_expr2102);
			a=prefix_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_prefix_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 349:19: -> $a
			{
				DebugLocation(349, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(349, 26);
			// SugarCpp.g:349:26: ( '->*' b= ident -> ^( Expr_Access '->*' $selector_expr $b) | '.*' b= ident -> ^( Expr_Access '.*' $selector_expr $b) )*
			try { DebugEnterSubRule(55);
			while (true)
			{
				int alt55=3;
				try { DebugEnterDecision(55, false);
				int LA55_0 = input.LA(1);

				if ((LA55_0==71))
				{
					alt55 = 1;
				}
				else if ((LA55_0==73))
				{
					alt55 = 2;
				}


				} finally { DebugExitDecision(55); }
				switch ( alt55 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:349:28: '->*' b= ident
					{
					DebugLocation(349, 28);
					string_literal174=(IToken)Match(input,71,Follow._71_in_selector_expr2112); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_71.Add(string_literal174);

					DebugLocation(349, 35);
					PushFollow(Follow._ident_in_selector_expr2116);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, 71, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 349:42: -> ^( Expr_Access '->*' $selector_expr $b)
					{
						DebugLocation(349, 45);
						// SugarCpp.g:349:45: ^( Expr_Access '->*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(349, 47);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(349, 59);
						adaptor.AddChild(root_1, stream_71.NextNode());
						DebugLocation(349, 66);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(349, 81);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:350:13: '.*' b= ident
					{
					DebugLocation(350, 13);
					string_literal175=(IToken)Match(input,73,Follow._73_in_selector_expr2144); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_73.Add(string_literal175);

					DebugLocation(350, 20);
					PushFollow(Follow._ident_in_selector_expr2149);
					b=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(b.Tree);


					{
					// AST REWRITE
					// elements: selector_expr, 73, b
					// token labels: 
					// rule labels: retval, b
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
					RewriteRuleSubtreeStream stream_b=new RewriteRuleSubtreeStream(adaptor,"rule b",b!=null?b.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 350:27: -> ^( Expr_Access '.*' $selector_expr $b)
					{
						DebugLocation(350, 30);
						// SugarCpp.g:350:30: ^( Expr_Access '.*' $selector_expr $b)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(350, 32);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(350, 44);
						adaptor.AddChild(root_1, stream_73.NextNode());
						DebugLocation(350, 51);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(350, 66);
						adaptor.AddChild(root_1, stream_b.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop55;
				}
			}

			loop55:
				;

			} finally { DebugExitSubRule(55); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("selector_expr", 50);
			LeaveRule("selector_expr", 50);
			LeaveRule_selector_expr();
			if (state.backtracking > 0) { Memoize(input, 50, selector_expr_StartIndex); }

		}
		DebugLocation(352, 1);
		} finally { DebugExitRule(GrammarFileName, "selector_expr"); }
		return retval;

	}
	// $ANTLR end "selector_expr"

	partial void EnterRule_prefix_expr_op();
	partial void LeaveRule_prefix_expr_op();

	// $ANTLR start "prefix_expr_op"
	// SugarCpp.g:354:1: prefix_expr_op : ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' );
	[GrammarRule("prefix_expr_op")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op()
	{
		EnterRule_prefix_expr_op();
		EnterRule("prefix_expr_op", 51);
		TraceIn("prefix_expr_op", 51);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_op_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken set176 = default(IToken);

		CommonTree set176_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "prefix_expr_op");
		DebugLocation(354, 64);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 51)) { return retval; }

			// SugarCpp.g:354:15: ( '!' | '~' | '++' | '--' | '-' | '+' | '*' | '&' )
			DebugEnterAlt(1);
			// SugarCpp.g:
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(354, 15);

			set176=(IToken)input.LT(1);
			if (input.LA(1)==52||input.LA(1)==57||input.LA(1)==61||(input.LA(1)>=63 && input.LA(1)<=64)||(input.LA(1)>=67 && input.LA(1)<=68)||input.LA(1)==114)
			{
				input.Consume();
				if (state.backtracking == 0) adaptor.AddChild(root_0, (CommonTree)adaptor.Create(set176));
				state.errorRecovery=false;state.failed=false;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr_op", 51);
			LeaveRule("prefix_expr_op", 51);
			LeaveRule_prefix_expr_op();
			if (state.backtracking > 0) { Memoize(input, 51, prefix_expr_op_StartIndex); }

		}
		DebugLocation(354, 64);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr_op"); }
		return retval;

	}
	// $ANTLR end "prefix_expr_op"

	partial void EnterRule_prefix_expr();
	partial void LeaveRule_prefix_expr();

	// $ANTLR start "prefix_expr"
	// SugarCpp.g:355:1: prefix_expr : ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr );
	[GrammarRule("prefix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> prefix_expr()
	{
		EnterRule_prefix_expr();
		EnterRule("prefix_expr", 52);
		TraceIn("prefix_expr", 52);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int prefix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal179 = default(IToken);
		IToken char_literal181 = default(IToken);
		IToken char_literal183 = default(IToken);
		IToken char_literal184 = default(IToken);
		IToken char_literal186 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr_op177 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> prefix_expr178 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> type_name180 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list182 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list185 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> suffix_expr187 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal179_tree = default(CommonTree);
		CommonTree char_literal181_tree = default(CommonTree);
		CommonTree char_literal183_tree = default(CommonTree);
		CommonTree char_literal184_tree = default(CommonTree);
		CommonTree char_literal186_tree = default(CommonTree);
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_105=new RewriteRuleITokenStream(adaptor,"token 105");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_prefix_expr=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr");
		RewriteRuleSubtreeStream stream_type_name=new RewriteRuleSubtreeStream(adaptor,"rule type_name");
		RewriteRuleSubtreeStream stream_prefix_expr_op=new RewriteRuleSubtreeStream(adaptor,"rule prefix_expr_op");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "prefix_expr");
		DebugLocation(355, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 52)) { return retval; }

			// SugarCpp.g:356:2: ( ( prefix_expr_op prefix_expr ) -> ^( Expr_Prefix prefix_expr_op prefix_expr ) | 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) ) | suffix_expr )
			int alt58=3;
			try { DebugEnterDecision(58, false);
			switch (input.LA(1))
			{
			case 52:
			case 57:
			case 61:
			case 63:
			case 64:
			case 67:
			case 68:
			case 114:
				{
				alt58 = 1;
				}
				break;
			case 105:
				{
				alt58 = 2;
				}
				break;
			case IDENT:
			case NUMBER:
			case STRING:
			case 59:
				{
				alt58 = 3;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 58, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(58); }
			switch (alt58)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:356:4: ( prefix_expr_op prefix_expr )
				{
				DebugLocation(356, 4);
				// SugarCpp.g:356:4: ( prefix_expr_op prefix_expr )
				DebugEnterAlt(1);
				// SugarCpp.g:356:5: prefix_expr_op prefix_expr
				{
				DebugLocation(356, 5);
				PushFollow(Follow._prefix_expr_op_in_prefix_expr2224);
				prefix_expr_op177=prefix_expr_op();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr_op.Add(prefix_expr_op177.Tree);
				DebugLocation(356, 20);
				PushFollow(Follow._prefix_expr_in_prefix_expr2226);
				prefix_expr178=prefix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_prefix_expr.Add(prefix_expr178.Tree);

				}



				{
				// AST REWRITE
				// elements: prefix_expr_op, prefix_expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 356:33: -> ^( Expr_Prefix prefix_expr_op prefix_expr )
				{
					DebugLocation(356, 36);
					// SugarCpp.g:356:36: ^( Expr_Prefix prefix_expr_op prefix_expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(356, 38);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Prefix, "Expr_Prefix"), root_1);

					DebugLocation(356, 50);
					adaptor.AddChild(root_1, stream_prefix_expr_op.NextTree());
					DebugLocation(356, 65);
					adaptor.AddChild(root_1, stream_prefix_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:357:4: 'new' type_name ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				{
				DebugLocation(357, 4);
				string_literal179=(IToken)Match(input,105,Follow._105_in_prefix_expr2242); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_105.Add(string_literal179);

				DebugLocation(357, 10);
				PushFollow(Follow._type_name_in_prefix_expr2244);
				type_name180=type_name();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_type_name.Add(type_name180.Tree);
				DebugLocation(357, 20);
				// SugarCpp.g:357:20: ( '(' ( expr_list )? ')' -> ^( Expr_New_Type type_name ( expr_list )? ) | '[' expr_list ']' -> ^( Expr_New_Array type_name expr_list ) )
				int alt57=2;
				try { DebugEnterSubRule(57);
				try { DebugEnterDecision(57, false);
				int LA57_0 = input.LA(1);

				if ((LA57_0==59))
				{
					alt57 = 1;
				}
				else if ((LA57_0==91))
				{
					alt57 = 2;
				}
				else
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 57, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(57); }
				switch (alt57)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:357:22: '(' ( expr_list )? ')'
					{
					DebugLocation(357, 22);
					char_literal181=(IToken)Match(input,59,Follow._59_in_prefix_expr2248); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_59.Add(char_literal181);

					DebugLocation(357, 26);
					// SugarCpp.g:357:26: ( expr_list )?
					int alt56=2;
					try { DebugEnterSubRule(56);
					try { DebugEnterDecision(56, false);
					int LA56_0 = input.LA(1);

					if ((LA56_0==IDENT||LA56_0==NUMBER||LA56_0==STRING||LA56_0==52||LA56_0==57||LA56_0==59||LA56_0==61||(LA56_0>=63 && LA56_0<=64)||(LA56_0>=67 && LA56_0<=68)||LA56_0==105||LA56_0==114))
					{
						alt56 = 1;
					}
					} finally { DebugExitDecision(56); }
					switch (alt56)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:357:26: expr_list
						{
						DebugLocation(357, 26);
						PushFollow(Follow._expr_list_in_prefix_expr2250);
						expr_list182=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list182.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(56); }

					DebugLocation(357, 37);
					char_literal183=(IToken)Match(input,60,Follow._60_in_prefix_expr2253); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal183);



					{
					// AST REWRITE
					// elements: type_name, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 357:41: -> ^( Expr_New_Type type_name ( expr_list )? )
					{
						DebugLocation(357, 44);
						// SugarCpp.g:357:44: ^( Expr_New_Type type_name ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(357, 46);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Type, "Expr_New_Type"), root_1);

						DebugLocation(357, 60);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(357, 70);
						// SugarCpp.g:357:70: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(357, 70);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:358:10: '[' expr_list ']'
					{
					DebugLocation(358, 10);
					char_literal184=(IToken)Match(input,91,Follow._91_in_prefix_expr2275); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal184);

					DebugLocation(358, 14);
					PushFollow(Follow._expr_list_in_prefix_expr2277);
					expr_list185=expr_list();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_expr_list.Add(expr_list185.Tree);
					DebugLocation(358, 24);
					char_literal186=(IToken)Match(input,92,Follow._92_in_prefix_expr2279); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal186);



					{
					// AST REWRITE
					// elements: expr_list, type_name
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 358:28: -> ^( Expr_New_Array type_name expr_list )
					{
						DebugLocation(358, 31);
						// SugarCpp.g:358:31: ^( Expr_New_Array type_name expr_list )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(358, 33);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_New_Array, "Expr_New_Array"), root_1);

						DebugLocation(358, 48);
						adaptor.AddChild(root_1, stream_type_name.NextTree());
						DebugLocation(358, 58);
						adaptor.AddChild(root_1, stream_expr_list.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				}
				} finally { DebugExitSubRule(57); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:359:4: suffix_expr
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(359, 4);
				PushFollow(Follow._suffix_expr_in_prefix_expr2295);
				suffix_expr187=suffix_expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, suffix_expr187.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_expr", 52);
			LeaveRule("prefix_expr", 52);
			LeaveRule_prefix_expr();
			if (state.backtracking > 0) { Memoize(input, 52, prefix_expr_StartIndex); }

		}
		DebugLocation(360, 1);
		} finally { DebugExitRule(GrammarFileName, "prefix_expr"); }
		return retval;

	}
	// $ANTLR end "prefix_expr"

	partial void EnterRule_expr_list();
	partial void LeaveRule_expr_list();

	// $ANTLR start "expr_list"
	// SugarCpp.g:362:1: expr_list : expr ( ',' ! expr )* ;
	[GrammarRule("expr_list")]
	private AstParserRuleReturnScope<CommonTree, IToken> expr_list()
	{
		EnterRule_expr_list();
		EnterRule("expr_list", 53);
		TraceIn("expr_list", 53);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int expr_list_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal189 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> expr188 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr190 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal189_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "expr_list");
		DebugLocation(362, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 53)) { return retval; }

			// SugarCpp.g:363:2: ( expr ( ',' ! expr )* )
			DebugEnterAlt(1);
			// SugarCpp.g:363:4: expr ( ',' ! expr )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(363, 4);
			PushFollow(Follow._expr_in_expr_list2307);
			expr188=expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, expr188.Tree);
			DebugLocation(363, 9);
			// SugarCpp.g:363:9: ( ',' ! expr )*
			try { DebugEnterSubRule(59);
			while (true)
			{
				int alt59=2;
				try { DebugEnterDecision(59, false);
				int LA59_0 = input.LA(1);

				if ((LA59_0==66))
				{
					alt59 = 1;
				}


				} finally { DebugExitDecision(59); }
				switch ( alt59 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:363:10: ',' ! expr
					{
					DebugLocation(363, 13);
					char_literal189=(IToken)Match(input,66,Follow._66_in_expr_list2310); if (state.failed) return retval;
					DebugLocation(363, 15);
					PushFollow(Follow._expr_in_expr_list2313);
					expr190=expr();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) adaptor.AddChild(root_0, expr190.Tree);

					}
					break;

				default:
					goto loop59;
				}
			}

			loop59:
				;

			} finally { DebugExitSubRule(59); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("expr_list", 53);
			LeaveRule("expr_list", 53);
			LeaveRule_expr_list();
			if (state.backtracking > 0) { Memoize(input, 53, expr_list_StartIndex); }

		}
		DebugLocation(364, 1);
		} finally { DebugExitRule(GrammarFileName, "expr_list"); }
		return retval;

	}
	// $ANTLR end "expr_list"

	partial void EnterRule_suffix_expr();
	partial void LeaveRule_suffix_expr();

	// $ANTLR start "suffix_expr"
	// SugarCpp.g:366:1: suffix_expr : (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* ;
	[GrammarRule("suffix_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> suffix_expr()
	{
		EnterRule_suffix_expr();
		EnterRule("suffix_expr", 54);
		TraceIn("suffix_expr", 54);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int suffix_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal191 = default(IToken);
		IToken string_literal192 = default(IToken);
		IToken char_literal193 = default(IToken);
		IToken string_literal195 = default(IToken);
		IToken string_literal197 = default(IToken);
		IToken char_literal200 = default(IToken);
		IToken char_literal202 = default(IToken);
		IToken char_literal203 = default(IToken);
		IToken char_literal205 = default(IToken);
		IToken char_literal206 = default(IToken);
		IToken char_literal208 = default(IToken);
		IToken char_literal210 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident194 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident196 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident198 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter199 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list201 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list204 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident207 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list209 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal191_tree = default(CommonTree);
		CommonTree string_literal192_tree = default(CommonTree);
		CommonTree char_literal193_tree = default(CommonTree);
		CommonTree string_literal195_tree = default(CommonTree);
		CommonTree string_literal197_tree = default(CommonTree);
		CommonTree char_literal200_tree = default(CommonTree);
		CommonTree char_literal202_tree = default(CommonTree);
		CommonTree char_literal203_tree = default(CommonTree);
		CommonTree char_literal205_tree = default(CommonTree);
		CommonTree char_literal206_tree = default(CommonTree);
		CommonTree char_literal208_tree = default(CommonTree);
		CommonTree char_literal210_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleITokenStream stream_76=new RewriteRuleITokenStream(adaptor,"token 76");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_atom_expr=new RewriteRuleSubtreeStream(adaptor,"rule atom_expr");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "suffix_expr");
		DebugLocation(366, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 54)) { return retval; }

			// SugarCpp.g:367:2: ( (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:367:4: (a= atom_expr -> $a) ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			{
			DebugLocation(367, 4);
			// SugarCpp.g:367:4: (a= atom_expr -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:367:5: a= atom_expr
			{
			DebugLocation(367, 6);
			PushFollow(Follow._atom_expr_in_suffix_expr2329);
			a=atom_expr();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_atom_expr.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 367:17: -> $a
			{
				DebugLocation(367, 21);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(367, 24);
			// SugarCpp.g:367:24: ( '++' -> ^( Expr_Suffix '++' $suffix_expr) | '--' -> ^( Expr_Suffix '--' $suffix_expr) | '.' ident -> ^( Expr_Access '.' $suffix_expr ident ) | '->' ident -> ^( Expr_Access '->' $suffix_expr ident ) | '::' ident -> ^( Expr_Access '::' $suffix_expr ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $suffix_expr ( expr_list )? ) | ':' ident '(' ( expr_list )? ')' -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? ) )*
			try { DebugEnterSubRule(64);
			while (true)
			{
				int alt64=9;
				try { DebugEnterDecision(64, false);
				switch (input.LA(1))
				{
				case 80:
					{
					int LA64_10 = input.LA(2);

					if ((EvaluatePredicate(synpred108_SugarCpp_fragment)))
					{
						alt64 = 6;
					}


					}
					break;
				case 91:
					{
					int LA64_29 = input.LA(2);

					if ((EvaluatePredicate(synpred110_SugarCpp_fragment)))
					{
						alt64 = 7;
					}


					}
					break;
				case 64:
					{
					alt64 = 1;
					}
					break;
				case 68:
					{
					alt64 = 2;
					}
					break;
				case 72:
					{
					alt64 = 3;
					}
					break;
				case 70:
					{
					alt64 = 4;
					}
					break;
				case 77:
					{
					alt64 = 5;
					}
					break;
				case 59:
					{
					alt64 = 6;
					}
					break;
				case 76:
					{
					alt64 = 8;
					}
					break;
				}

				} finally { DebugExitDecision(64); }
				switch ( alt64 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:367:26: '++'
					{
					DebugLocation(367, 26);
					string_literal191=(IToken)Match(input,64,Follow._64_in_suffix_expr2339); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_64.Add(string_literal191);



					{
					// AST REWRITE
					// elements: suffix_expr, 64
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 367:31: -> ^( Expr_Suffix '++' $suffix_expr)
					{
						DebugLocation(367, 34);
						// SugarCpp.g:367:34: ^( Expr_Suffix '++' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(367, 36);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(367, 48);
						adaptor.AddChild(root_1, stream_64.NextNode());
						DebugLocation(367, 54);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:368:14: '--'
					{
					DebugLocation(368, 14);
					string_literal192=(IToken)Match(input,68,Follow._68_in_suffix_expr2365); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(string_literal192);



					{
					// AST REWRITE
					// elements: suffix_expr, 68
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 368:19: -> ^( Expr_Suffix '--' $suffix_expr)
					{
						DebugLocation(368, 22);
						// SugarCpp.g:368:22: ^( Expr_Suffix '--' $suffix_expr)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(368, 24);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(368, 36);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(368, 42);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:369:11: '.' ident
					{
					DebugLocation(369, 11);
					char_literal193=(IToken)Match(input,72,Follow._72_in_suffix_expr2388); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal193);

					DebugLocation(369, 15);
					PushFollow(Follow._ident_in_suffix_expr2390);
					ident194=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident194.Tree);


					{
					// AST REWRITE
					// elements: ident, 72, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 369:21: -> ^( Expr_Access '.' $suffix_expr ident )
					{
						DebugLocation(369, 24);
						// SugarCpp.g:369:24: ^( Expr_Access '.' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(369, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(369, 38);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(369, 43);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(369, 55);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:370:11: '->' ident
					{
					DebugLocation(370, 11);
					string_literal195=(IToken)Match(input,70,Follow._70_in_suffix_expr2415); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal195);

					DebugLocation(370, 16);
					PushFollow(Follow._ident_in_suffix_expr2417);
					ident196=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident196.Tree);


					{
					// AST REWRITE
					// elements: 70, suffix_expr, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 370:22: -> ^( Expr_Access '->' $suffix_expr ident )
					{
						DebugLocation(370, 25);
						// SugarCpp.g:370:25: ^( Expr_Access '->' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(370, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(370, 39);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(370, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(370, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:371:11: '::' ident
					{
					DebugLocation(371, 11);
					string_literal197=(IToken)Match(input,77,Follow._77_in_suffix_expr2442); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_77.Add(string_literal197);

					DebugLocation(371, 16);
					PushFollow(Follow._ident_in_suffix_expr2444);
					ident198=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident198.Tree);


					{
					// AST REWRITE
					// elements: 77, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 371:22: -> ^( Expr_Access '::' $suffix_expr ident )
					{
						DebugLocation(371, 25);
						// SugarCpp.g:371:25: ^( Expr_Access '::' $suffix_expr ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(371, 27);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(371, 39);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(371, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(371, 57);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:372:11: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(372, 11);
					// SugarCpp.g:372:11: ( generic_parameter )?
					int alt60=2;
					try { DebugEnterSubRule(60);
					try { DebugEnterDecision(60, false);
					int LA60_0 = input.LA(1);

					if ((LA60_0==80))
					{
						alt60 = 1;
					}
					} finally { DebugExitDecision(60); }
					switch (alt60)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:372:11: generic_parameter
						{
						DebugLocation(372, 11);
						PushFollow(Follow._generic_parameter_in_suffix_expr2469);
						generic_parameter199=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter199.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(60); }

					DebugLocation(372, 30);
					char_literal200=(IToken)Match(input,59,Follow._59_in_suffix_expr2472); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_59.Add(char_literal200);

					DebugLocation(372, 34);
					// SugarCpp.g:372:34: ( expr_list )?
					int alt61=2;
					try { DebugEnterSubRule(61);
					try { DebugEnterDecision(61, false);
					int LA61_0 = input.LA(1);

					if ((LA61_0==IDENT||LA61_0==NUMBER||LA61_0==STRING||LA61_0==52||LA61_0==57||LA61_0==59||LA61_0==61||(LA61_0>=63 && LA61_0<=64)||(LA61_0>=67 && LA61_0<=68)||LA61_0==105||LA61_0==114))
					{
						alt61 = 1;
					}
					} finally { DebugExitDecision(61); }
					switch (alt61)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:372:34: expr_list
						{
						DebugLocation(372, 34);
						PushFollow(Follow._expr_list_in_suffix_expr2474);
						expr_list201=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list201.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(61); }

					DebugLocation(372, 45);
					char_literal202=(IToken)Match(input,60,Follow._60_in_suffix_expr2477); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal202);



					{
					// AST REWRITE
					// elements: suffix_expr, generic_parameter, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 372:49: -> ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(372, 52);
						// SugarCpp.g:372:52: ^( Expr_Call $suffix_expr ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(372, 54);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(372, 65);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(372, 77);
						// SugarCpp.g:372:77: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(372, 77);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(372, 96);
						// SugarCpp.g:372:96: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(372, 96);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:373:11: '[' ( expr_list )? ']'
					{
					DebugLocation(373, 11);
					char_literal203=(IToken)Match(input,91,Follow._91_in_suffix_expr2504); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal203);

					DebugLocation(373, 15);
					// SugarCpp.g:373:15: ( expr_list )?
					int alt62=2;
					try { DebugEnterSubRule(62);
					try { DebugEnterDecision(62, false);
					int LA62_0 = input.LA(1);

					if ((LA62_0==IDENT||LA62_0==NUMBER||LA62_0==STRING||LA62_0==52||LA62_0==57||LA62_0==59||LA62_0==61||(LA62_0>=63 && LA62_0<=64)||(LA62_0>=67 && LA62_0<=68)||LA62_0==105||LA62_0==114))
					{
						alt62 = 1;
					}
					} finally { DebugExitDecision(62); }
					switch (alt62)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:373:15: expr_list
						{
						DebugLocation(373, 15);
						PushFollow(Follow._expr_list_in_suffix_expr2506);
						expr_list204=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list204.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(62); }

					DebugLocation(373, 26);
					char_literal205=(IToken)Match(input,92,Follow._92_in_suffix_expr2509); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal205);



					{
					// AST REWRITE
					// elements: expr_list, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 373:30: -> ^( Expr_Dict $suffix_expr ( expr_list )? )
					{
						DebugLocation(373, 33);
						// SugarCpp.g:373:33: ^( Expr_Dict $suffix_expr ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(373, 35);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(373, 46);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(373, 58);
						// SugarCpp.g:373:58: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(373, 58);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 8:
					DebugEnterAlt(8);
					// SugarCpp.g:374:11: ':' ident '(' ( expr_list )? ')'
					{
					DebugLocation(374, 11);
					char_literal206=(IToken)Match(input,76,Follow._76_in_suffix_expr2533); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_76.Add(char_literal206);

					DebugLocation(374, 15);
					PushFollow(Follow._ident_in_suffix_expr2535);
					ident207=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident207.Tree);
					DebugLocation(374, 21);
					char_literal208=(IToken)Match(input,59,Follow._59_in_suffix_expr2537); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_59.Add(char_literal208);

					DebugLocation(374, 25);
					// SugarCpp.g:374:25: ( expr_list )?
					int alt63=2;
					try { DebugEnterSubRule(63);
					try { DebugEnterDecision(63, false);
					int LA63_0 = input.LA(1);

					if ((LA63_0==IDENT||LA63_0==NUMBER||LA63_0==STRING||LA63_0==52||LA63_0==57||LA63_0==59||LA63_0==61||(LA63_0>=63 && LA63_0<=64)||(LA63_0>=67 && LA63_0<=68)||LA63_0==105||LA63_0==114))
					{
						alt63 = 1;
					}
					} finally { DebugExitDecision(63); }
					switch (alt63)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:374:25: expr_list
						{
						DebugLocation(374, 25);
						PushFollow(Follow._expr_list_in_suffix_expr2539);
						expr_list209=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list209.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(63); }

					DebugLocation(374, 36);
					char_literal210=(IToken)Match(input,60,Follow._60_in_suffix_expr2542); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal210);



					{
					// AST REWRITE
					// elements: expr_list, ident, suffix_expr
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 374:40: -> ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
					{
						DebugLocation(374, 43);
						// SugarCpp.g:374:43: ^( Expr_Call_With $suffix_expr ident ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(374, 45);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call_With, "Expr_Call_With"), root_1);

						DebugLocation(374, 61);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(374, 73);
						adaptor.AddChild(root_1, stream_ident.NextTree());
						DebugLocation(374, 79);
						// SugarCpp.g:374:79: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(374, 79);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop64;
				}
			}

			loop64:
				;

			} finally { DebugExitSubRule(64); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("suffix_expr", 54);
			LeaveRule("suffix_expr", 54);
			LeaveRule_suffix_expr();
			if (state.backtracking > 0) { Memoize(input, 54, suffix_expr_StartIndex); }

		}
		DebugLocation(376, 1);
		} finally { DebugExitRule(GrammarFileName, "suffix_expr"); }
		return retval;

	}
	// $ANTLR end "suffix_expr"

	partial void EnterRule_atom_expr();
	partial void LeaveRule_atom_expr();

	// $ANTLR start "atom_expr"
	// SugarCpp.g:378:1: atom_expr : ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) );
	[GrammarRule("atom_expr")]
	private AstParserRuleReturnScope<CommonTree, IToken> atom_expr()
	{
		EnterRule_atom_expr();
		EnterRule("atom_expr", 55);
		TraceIn("atom_expr", 55);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int atom_expr_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken NUMBER211 = default(IToken);
		IToken STRING213 = default(IToken);
		IToken char_literal214 = default(IToken);
		IToken char_literal216 = default(IToken);
		IToken char_literal218 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident212 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr215 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr217 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree NUMBER211_tree = default(CommonTree);
		CommonTree STRING213_tree = default(CommonTree);
		CommonTree char_literal214_tree = default(CommonTree);
		CommonTree char_literal216_tree = default(CommonTree);
		CommonTree char_literal218_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_expr=new RewriteRuleSubtreeStream(adaptor,"rule expr");

			bool more_than_one = false;

		try { DebugEnterRule(GrammarFileName, "atom_expr");
		DebugLocation(378, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 55)) { return retval; }

			// SugarCpp.g:383:2: ( NUMBER | ident | STRING | '(' expr ( ',' expr )* ')' -> { more_than_one }? ^( Expr_Tuple ( expr )+ ) -> ^( Expr_Bracket expr ) )
			int alt66=4;
			try { DebugEnterDecision(66, false);
			switch (input.LA(1))
			{
			case NUMBER:
				{
				alt66 = 1;
				}
				break;
			case IDENT:
				{
				alt66 = 2;
				}
				break;
			case STRING:
				{
				alt66 = 3;
				}
				break;
			case 59:
				{
				alt66 = 4;
				}
				break;
			default:
				{
					if (state.backtracking>0) {state.failed=true; return retval;}
					NoViableAltException nvae = new NoViableAltException("", 66, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(66); }
			switch (alt66)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:383:4: NUMBER
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(383, 4);
				NUMBER211=(IToken)Match(input,NUMBER,Follow._NUMBER_in_atom_expr2586); if (state.failed) return retval;
				if (state.backtracking == 0) {
				NUMBER211_tree = (CommonTree)adaptor.Create(NUMBER211);
				adaptor.AddChild(root_0, NUMBER211_tree);
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:384:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(384, 4);
				PushFollow(Follow._ident_in_atom_expr2591);
				ident212=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident212.Tree);

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// SugarCpp.g:385:4: STRING
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(385, 4);
				STRING213=(IToken)Match(input,STRING,Follow._STRING_in_atom_expr2596); if (state.failed) return retval;
				if (state.backtracking == 0) {
				STRING213_tree = (CommonTree)adaptor.Create(STRING213);
				adaptor.AddChild(root_0, STRING213_tree);
				}

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// SugarCpp.g:386:4: '(' expr ( ',' expr )* ')'
				{
				DebugLocation(386, 4);
				char_literal214=(IToken)Match(input,59,Follow._59_in_atom_expr2601); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal214);

				DebugLocation(386, 8);
				PushFollow(Follow._expr_in_atom_expr2603);
				expr215=expr();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) stream_expr.Add(expr215.Tree);
				DebugLocation(386, 13);
				// SugarCpp.g:386:13: ( ',' expr )*
				try { DebugEnterSubRule(65);
				while (true)
				{
					int alt65=2;
					try { DebugEnterDecision(65, false);
					int LA65_0 = input.LA(1);

					if ((LA65_0==66))
					{
						alt65 = 1;
					}


					} finally { DebugExitDecision(65); }
					switch ( alt65 )
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:386:14: ',' expr
						{
						DebugLocation(386, 14);
						char_literal216=(IToken)Match(input,66,Follow._66_in_atom_expr2606); if (state.failed) return retval; 
						if (state.backtracking == 0) stream_66.Add(char_literal216);

						DebugLocation(386, 18);
						PushFollow(Follow._expr_in_atom_expr2608);
						expr217=expr();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr.Add(expr217.Tree);
						DebugLocation(386, 23);
						if (state.backtracking == 0)
						{
							 more_than_one = true; 
						}

						}
						break;

					default:
						goto loop65;
					}
				}

				loop65:
					;

				} finally { DebugExitSubRule(65); }

				DebugLocation(386, 52);
				char_literal218=(IToken)Match(input,60,Follow._60_in_atom_expr2615); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal218);



				{
				// AST REWRITE
				// elements: expr, expr
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 387:3: -> { more_than_one }? ^( Expr_Tuple ( expr )+ )
				if ( more_than_one )
				{
					DebugLocation(387, 25);
					// SugarCpp.g:387:25: ^( Expr_Tuple ( expr )+ )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(387, 27);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Tuple, "Expr_Tuple"), root_1);

					DebugLocation(387, 38);
					if (!(stream_expr.HasNext))
					{
						throw new RewriteEarlyExitException();
					}
					while ( stream_expr.HasNext )
					{
						DebugLocation(387, 38);
						adaptor.AddChild(root_1, stream_expr.NextTree());

					}
					stream_expr.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}
				else // 388:3: -> ^( Expr_Bracket expr )
				{
					DebugLocation(388, 6);
					// SugarCpp.g:388:6: ^( Expr_Bracket expr )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(388, 8);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Bracket, "Expr_Bracket"), root_1);

					DebugLocation(388, 21);
					adaptor.AddChild(root_1, stream_expr.NextTree());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("atom_expr", 55);
			LeaveRule("atom_expr", 55);
			LeaveRule_atom_expr();
			if (state.backtracking > 0) { Memoize(input, 55, atom_expr_StartIndex); }

		}
		DebugLocation(389, 1);
		} finally { DebugExitRule(GrammarFileName, "atom_expr"); }
		return retval;

	}
	// $ANTLR end "atom_expr"

	partial void EnterRule_lvalue();
	partial void LeaveRule_lvalue();

	// $ANTLR start "lvalue"
	// SugarCpp.g:391:1: lvalue : (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* ;
	[GrammarRule("lvalue")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue()
	{
		EnterRule_lvalue();
		EnterRule("lvalue", 56);
		TraceIn("lvalue", 56);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken string_literal219 = default(IToken);
		IToken string_literal220 = default(IToken);
		IToken char_literal221 = default(IToken);
		IToken string_literal223 = default(IToken);
		IToken string_literal225 = default(IToken);
		IToken char_literal228 = default(IToken);
		IToken char_literal230 = default(IToken);
		IToken char_literal231 = default(IToken);
		IToken char_literal233 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> a = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident222 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident224 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident226 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> generic_parameter227 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list229 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> expr_list232 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree string_literal219_tree = default(CommonTree);
		CommonTree string_literal220_tree = default(CommonTree);
		CommonTree char_literal221_tree = default(CommonTree);
		CommonTree string_literal223_tree = default(CommonTree);
		CommonTree string_literal225_tree = default(CommonTree);
		CommonTree char_literal228_tree = default(CommonTree);
		CommonTree char_literal230_tree = default(CommonTree);
		CommonTree char_literal231_tree = default(CommonTree);
		CommonTree char_literal233_tree = default(CommonTree);
		RewriteRuleITokenStream stream_77=new RewriteRuleITokenStream(adaptor,"token 77");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_68=new RewriteRuleITokenStream(adaptor,"token 68");
		RewriteRuleITokenStream stream_92=new RewriteRuleITokenStream(adaptor,"token 92");
		RewriteRuleITokenStream stream_91=new RewriteRuleITokenStream(adaptor,"token 91");
		RewriteRuleITokenStream stream_64=new RewriteRuleITokenStream(adaptor,"token 64");
		RewriteRuleITokenStream stream_70=new RewriteRuleITokenStream(adaptor,"token 70");
		RewriteRuleITokenStream stream_72=new RewriteRuleITokenStream(adaptor,"token 72");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_ident=new RewriteRuleSubtreeStream(adaptor,"rule ident");
		RewriteRuleSubtreeStream stream_lvalue_atom=new RewriteRuleSubtreeStream(adaptor,"rule lvalue_atom");
		RewriteRuleSubtreeStream stream_generic_parameter=new RewriteRuleSubtreeStream(adaptor,"rule generic_parameter");
		RewriteRuleSubtreeStream stream_expr_list=new RewriteRuleSubtreeStream(adaptor,"rule expr_list");
		try { DebugEnterRule(GrammarFileName, "lvalue");
		DebugLocation(391, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 56)) { return retval; }

			// SugarCpp.g:392:2: ( (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )* )
			DebugEnterAlt(1);
			// SugarCpp.g:392:4: (a= lvalue_atom -> $a) ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			{
			DebugLocation(392, 4);
			// SugarCpp.g:392:4: (a= lvalue_atom -> $a)
			DebugEnterAlt(1);
			// SugarCpp.g:392:5: a= lvalue_atom
			{
			DebugLocation(392, 6);
			PushFollow(Follow._lvalue_atom_in_lvalue2652);
			a=lvalue_atom();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) stream_lvalue_atom.Add(a.Tree);


			{
			// AST REWRITE
			// elements: a
			// token labels: 
			// rule labels: retval, a
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			if (state.backtracking == 0) {
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);
			RewriteRuleSubtreeStream stream_a=new RewriteRuleSubtreeStream(adaptor,"rule a",a!=null?a.Tree:null);

			root_0 = (CommonTree)adaptor.Nil();
			// 392:19: -> $a
			{
				DebugLocation(392, 23);
				adaptor.AddChild(root_0, stream_a.NextTree());

			}

			retval.Tree = root_0;
			}
			}

			}

			DebugLocation(392, 26);
			// SugarCpp.g:392:26: ( '++' -> ^( Expr_Suffix '++' $lvalue) | '--' -> ^( Expr_Suffix '--' $lvalue) | '.' ident -> ^( Expr_Access '.' $lvalue ident ) | '->' ident -> ^( Expr_Access '->' $lvalue ident ) | '::' ident -> ^( Expr_Access '::' $lvalue ident ) | ( generic_parameter )? '(' ( expr_list )? ')' -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? ) | '[' ( expr_list )? ']' -> ^( Expr_Dict $lvalue ( expr_list )? ) )*
			try { DebugEnterSubRule(70);
			while (true)
			{
				int alt70=8;
				try { DebugEnterDecision(70, false);
				switch (input.LA(1))
				{
				case 64:
					{
					alt70 = 1;
					}
					break;
				case 68:
					{
					alt70 = 2;
					}
					break;
				case 72:
					{
					alt70 = 3;
					}
					break;
				case 70:
					{
					alt70 = 4;
					}
					break;
				case 77:
					{
					alt70 = 5;
					}
					break;
				case 59:
				case 80:
					{
					alt70 = 6;
					}
					break;
				case 91:
					{
					alt70 = 7;
					}
					break;
				}

				} finally { DebugExitDecision(70); }
				switch ( alt70 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:392:28: '++'
					{
					DebugLocation(392, 28);
					string_literal219=(IToken)Match(input,64,Follow._64_in_lvalue2662); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_64.Add(string_literal219);



					{
					// AST REWRITE
					// elements: lvalue, 64
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 392:33: -> ^( Expr_Suffix '++' $lvalue)
					{
						DebugLocation(392, 36);
						// SugarCpp.g:392:36: ^( Expr_Suffix '++' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(392, 38);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(392, 50);
						adaptor.AddChild(root_1, stream_64.NextNode());
						DebugLocation(392, 56);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// SugarCpp.g:393:16: '--'
					{
					DebugLocation(393, 16);
					string_literal220=(IToken)Match(input,68,Follow._68_in_lvalue2690); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_68.Add(string_literal220);



					{
					// AST REWRITE
					// elements: lvalue, 68
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 393:21: -> ^( Expr_Suffix '--' $lvalue)
					{
						DebugLocation(393, 24);
						// SugarCpp.g:393:24: ^( Expr_Suffix '--' $lvalue)
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(393, 26);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Suffix, "Expr_Suffix"), root_1);

						DebugLocation(393, 38);
						adaptor.AddChild(root_1, stream_68.NextNode());
						DebugLocation(393, 44);
						adaptor.AddChild(root_1, stream_retval.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 3:
					DebugEnterAlt(3);
					// SugarCpp.g:394:13: '.' ident
					{
					DebugLocation(394, 13);
					char_literal221=(IToken)Match(input,72,Follow._72_in_lvalue2715); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_72.Add(char_literal221);

					DebugLocation(394, 17);
					PushFollow(Follow._ident_in_lvalue2717);
					ident222=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident222.Tree);


					{
					// AST REWRITE
					// elements: lvalue, 72, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 394:23: -> ^( Expr_Access '.' $lvalue ident )
					{
						DebugLocation(394, 26);
						// SugarCpp.g:394:26: ^( Expr_Access '.' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(394, 28);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(394, 40);
						adaptor.AddChild(root_1, stream_72.NextNode());
						DebugLocation(394, 45);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(394, 52);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 4:
					DebugEnterAlt(4);
					// SugarCpp.g:395:13: '->' ident
					{
					DebugLocation(395, 13);
					string_literal223=(IToken)Match(input,70,Follow._70_in_lvalue2744); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_70.Add(string_literal223);

					DebugLocation(395, 18);
					PushFollow(Follow._ident_in_lvalue2746);
					ident224=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident224.Tree);


					{
					// AST REWRITE
					// elements: lvalue, 70, ident
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 395:24: -> ^( Expr_Access '->' $lvalue ident )
					{
						DebugLocation(395, 27);
						// SugarCpp.g:395:27: ^( Expr_Access '->' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(395, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(395, 41);
						adaptor.AddChild(root_1, stream_70.NextNode());
						DebugLocation(395, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(395, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 5:
					DebugEnterAlt(5);
					// SugarCpp.g:396:13: '::' ident
					{
					DebugLocation(396, 13);
					string_literal225=(IToken)Match(input,77,Follow._77_in_lvalue2773); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_77.Add(string_literal225);

					DebugLocation(396, 18);
					PushFollow(Follow._ident_in_lvalue2775);
					ident226=ident();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_ident.Add(ident226.Tree);


					{
					// AST REWRITE
					// elements: ident, 77, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 396:24: -> ^( Expr_Access '::' $lvalue ident )
					{
						DebugLocation(396, 27);
						// SugarCpp.g:396:27: ^( Expr_Access '::' $lvalue ident )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(396, 29);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Access, "Expr_Access"), root_1);

						DebugLocation(396, 41);
						adaptor.AddChild(root_1, stream_77.NextNode());
						DebugLocation(396, 47);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(396, 54);
						adaptor.AddChild(root_1, stream_ident.NextTree());

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 6:
					DebugEnterAlt(6);
					// SugarCpp.g:397:13: ( generic_parameter )? '(' ( expr_list )? ')'
					{
					DebugLocation(397, 13);
					// SugarCpp.g:397:13: ( generic_parameter )?
					int alt67=2;
					try { DebugEnterSubRule(67);
					try { DebugEnterDecision(67, false);
					int LA67_0 = input.LA(1);

					if ((LA67_0==80))
					{
						alt67 = 1;
					}
					} finally { DebugExitDecision(67); }
					switch (alt67)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:397:13: generic_parameter
						{
						DebugLocation(397, 13);
						PushFollow(Follow._generic_parameter_in_lvalue2802);
						generic_parameter227=generic_parameter();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_generic_parameter.Add(generic_parameter227.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(67); }

					DebugLocation(397, 32);
					char_literal228=(IToken)Match(input,59,Follow._59_in_lvalue2805); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_59.Add(char_literal228);

					DebugLocation(397, 36);
					// SugarCpp.g:397:36: ( expr_list )?
					int alt68=2;
					try { DebugEnterSubRule(68);
					try { DebugEnterDecision(68, false);
					int LA68_0 = input.LA(1);

					if ((LA68_0==IDENT||LA68_0==NUMBER||LA68_0==STRING||LA68_0==52||LA68_0==57||LA68_0==59||LA68_0==61||(LA68_0>=63 && LA68_0<=64)||(LA68_0>=67 && LA68_0<=68)||LA68_0==105||LA68_0==114))
					{
						alt68 = 1;
					}
					} finally { DebugExitDecision(68); }
					switch (alt68)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:397:36: expr_list
						{
						DebugLocation(397, 36);
						PushFollow(Follow._expr_list_in_lvalue2807);
						expr_list229=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list229.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(68); }

					DebugLocation(397, 47);
					char_literal230=(IToken)Match(input,60,Follow._60_in_lvalue2810); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_60.Add(char_literal230);



					{
					// AST REWRITE
					// elements: generic_parameter, lvalue, expr_list
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 397:51: -> ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
					{
						DebugLocation(397, 54);
						// SugarCpp.g:397:54: ^( Expr_Call $lvalue ( generic_parameter )? ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(397, 56);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Call, "Expr_Call"), root_1);

						DebugLocation(397, 67);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(397, 74);
						// SugarCpp.g:397:74: ( generic_parameter )?
						if (stream_generic_parameter.HasNext)
						{
							DebugLocation(397, 74);
							adaptor.AddChild(root_1, stream_generic_parameter.NextTree());

						}
						stream_generic_parameter.Reset();
						DebugLocation(397, 93);
						// SugarCpp.g:397:93: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(397, 93);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;
				case 7:
					DebugEnterAlt(7);
					// SugarCpp.g:398:13: '[' ( expr_list )? ']'
					{
					DebugLocation(398, 13);
					char_literal231=(IToken)Match(input,91,Follow._91_in_lvalue2839); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_91.Add(char_literal231);

					DebugLocation(398, 17);
					// SugarCpp.g:398:17: ( expr_list )?
					int alt69=2;
					try { DebugEnterSubRule(69);
					try { DebugEnterDecision(69, false);
					int LA69_0 = input.LA(1);

					if ((LA69_0==IDENT||LA69_0==NUMBER||LA69_0==STRING||LA69_0==52||LA69_0==57||LA69_0==59||LA69_0==61||(LA69_0>=63 && LA69_0<=64)||(LA69_0>=67 && LA69_0<=68)||LA69_0==105||LA69_0==114))
					{
						alt69 = 1;
					}
					} finally { DebugExitDecision(69); }
					switch (alt69)
					{
					case 1:
						DebugEnterAlt(1);
						// SugarCpp.g:398:17: expr_list
						{
						DebugLocation(398, 17);
						PushFollow(Follow._expr_list_in_lvalue2841);
						expr_list232=expr_list();
						PopFollow();
						if (state.failed) return retval;
						if (state.backtracking == 0) stream_expr_list.Add(expr_list232.Tree);

						}
						break;

					}
					} finally { DebugExitSubRule(69); }

					DebugLocation(398, 28);
					char_literal233=(IToken)Match(input,92,Follow._92_in_lvalue2844); if (state.failed) return retval; 
					if (state.backtracking == 0) stream_92.Add(char_literal233);



					{
					// AST REWRITE
					// elements: expr_list, lvalue
					// token labels: 
					// rule labels: retval
					// token list labels: 
					// rule list labels: 
					// wildcard labels: 
					if (state.backtracking == 0) {
					retval.Tree = root_0;
					RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

					root_0 = (CommonTree)adaptor.Nil();
					// 398:32: -> ^( Expr_Dict $lvalue ( expr_list )? )
					{
						DebugLocation(398, 35);
						// SugarCpp.g:398:35: ^( Expr_Dict $lvalue ( expr_list )? )
						{
						CommonTree root_1 = (CommonTree)adaptor.Nil();
						DebugLocation(398, 37);
						root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Expr_Dict, "Expr_Dict"), root_1);

						DebugLocation(398, 48);
						adaptor.AddChild(root_1, stream_retval.NextTree());
						DebugLocation(398, 55);
						// SugarCpp.g:398:55: ( expr_list )?
						if (stream_expr_list.HasNext)
						{
							DebugLocation(398, 55);
							adaptor.AddChild(root_1, stream_expr_list.NextTree());

						}
						stream_expr_list.Reset();

						adaptor.AddChild(root_0, root_1);
						}

					}

					retval.Tree = root_0;
					}
					}

					}
					break;

				default:
					goto loop70;
				}
			}

			loop70:
				;

			} finally { DebugExitSubRule(70); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue", 56);
			LeaveRule("lvalue", 56);
			LeaveRule_lvalue();
			if (state.backtracking > 0) { Memoize(input, 56, lvalue_StartIndex); }

		}
		DebugLocation(400, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue"); }
		return retval;

	}
	// $ANTLR end "lvalue"

	partial void EnterRule_lvalue_atom();
	partial void LeaveRule_lvalue_atom();

	// $ANTLR start "lvalue_atom"
	// SugarCpp.g:402:1: lvalue_atom : ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident );
	[GrammarRule("lvalue_atom")]
	private AstParserRuleReturnScope<CommonTree, IToken> lvalue_atom()
	{
		EnterRule_lvalue_atom();
		EnterRule("lvalue_atom", 57);
		TraceIn("lvalue_atom", 57);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int lvalue_atom_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal234 = default(IToken);
		IToken char_literal236 = default(IToken);
		IToken char_literal238 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue235 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> lvalue237 = default(AstParserRuleReturnScope<CommonTree, IToken>);
		AstParserRuleReturnScope<CommonTree, IToken> ident239 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal234_tree = default(CommonTree);
		CommonTree char_literal236_tree = default(CommonTree);
		CommonTree char_literal238_tree = default(CommonTree);
		RewriteRuleITokenStream stream_66=new RewriteRuleITokenStream(adaptor,"token 66");
		RewriteRuleITokenStream stream_59=new RewriteRuleITokenStream(adaptor,"token 59");
		RewriteRuleITokenStream stream_60=new RewriteRuleITokenStream(adaptor,"token 60");
		RewriteRuleSubtreeStream stream_lvalue=new RewriteRuleSubtreeStream(adaptor,"rule lvalue");
		try { DebugEnterRule(GrammarFileName, "lvalue_atom");
		DebugLocation(402, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 57)) { return retval; }

			// SugarCpp.g:403:2: ( '(' ( lvalue ( ',' lvalue )* )? ')' -> ^( Match_Tuple ( lvalue )* ) | ident )
			int alt73=2;
			try { DebugEnterDecision(73, false);
			int LA73_0 = input.LA(1);

			if ((LA73_0==59))
			{
				alt73 = 1;
			}
			else if ((LA73_0==IDENT))
			{
				alt73 = 2;
			}
			else
			{
				if (state.backtracking>0) {state.failed=true; return retval;}
				NoViableAltException nvae = new NoViableAltException("", 73, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(73); }
			switch (alt73)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:403:4: '(' ( lvalue ( ',' lvalue )* )? ')'
				{
				DebugLocation(403, 4);
				char_literal234=(IToken)Match(input,59,Follow._59_in_lvalue_atom2883); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_59.Add(char_literal234);

				DebugLocation(403, 8);
				// SugarCpp.g:403:8: ( lvalue ( ',' lvalue )* )?
				int alt72=2;
				try { DebugEnterSubRule(72);
				try { DebugEnterDecision(72, false);
				int LA72_0 = input.LA(1);

				if ((LA72_0==IDENT||LA72_0==59))
				{
					alt72 = 1;
				}
				} finally { DebugExitDecision(72); }
				switch (alt72)
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:403:9: lvalue ( ',' lvalue )*
					{
					DebugLocation(403, 9);
					PushFollow(Follow._lvalue_in_lvalue_atom2886);
					lvalue235=lvalue();
					PopFollow();
					if (state.failed) return retval;
					if (state.backtracking == 0) stream_lvalue.Add(lvalue235.Tree);
					DebugLocation(403, 16);
					// SugarCpp.g:403:16: ( ',' lvalue )*
					try { DebugEnterSubRule(71);
					while (true)
					{
						int alt71=2;
						try { DebugEnterDecision(71, false);
						int LA71_0 = input.LA(1);

						if ((LA71_0==66))
						{
							alt71 = 1;
						}


						} finally { DebugExitDecision(71); }
						switch ( alt71 )
						{
						case 1:
							DebugEnterAlt(1);
							// SugarCpp.g:403:17: ',' lvalue
							{
							DebugLocation(403, 17);
							char_literal236=(IToken)Match(input,66,Follow._66_in_lvalue_atom2889); if (state.failed) return retval; 
							if (state.backtracking == 0) stream_66.Add(char_literal236);

							DebugLocation(403, 21);
							PushFollow(Follow._lvalue_in_lvalue_atom2891);
							lvalue237=lvalue();
							PopFollow();
							if (state.failed) return retval;
							if (state.backtracking == 0) stream_lvalue.Add(lvalue237.Tree);

							}
							break;

						default:
							goto loop71;
						}
					}

					loop71:
						;

					} finally { DebugExitSubRule(71); }


					}
					break;

				}
				} finally { DebugExitSubRule(72); }

				DebugLocation(403, 32);
				char_literal238=(IToken)Match(input,60,Follow._60_in_lvalue_atom2897); if (state.failed) return retval; 
				if (state.backtracking == 0) stream_60.Add(char_literal238);



				{
				// AST REWRITE
				// elements: lvalue
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				if (state.backtracking == 0) {
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (CommonTree)adaptor.Nil();
				// 403:36: -> ^( Match_Tuple ( lvalue )* )
				{
					DebugLocation(403, 39);
					// SugarCpp.g:403:39: ^( Match_Tuple ( lvalue )* )
					{
					CommonTree root_1 = (CommonTree)adaptor.Nil();
					DebugLocation(403, 41);
					root_1 = (CommonTree)adaptor.BecomeRoot((CommonTree)adaptor.Create(Match_Tuple, "Match_Tuple"), root_1);

					DebugLocation(403, 53);
					// SugarCpp.g:403:53: ( lvalue )*
					while ( stream_lvalue.HasNext )
					{
						DebugLocation(403, 53);
						adaptor.AddChild(root_1, stream_lvalue.NextTree());

					}
					stream_lvalue.Reset();

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}
				}

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// SugarCpp.g:404:4: ident
				{
				root_0 = (CommonTree)adaptor.Nil();

				DebugLocation(404, 4);
				PushFollow(Follow._ident_in_lvalue_atom2911);
				ident239=ident();
				PopFollow();
				if (state.failed) return retval;
				if (state.backtracking == 0) adaptor.AddChild(root_0, ident239.Tree);

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("lvalue_atom", 57);
			LeaveRule("lvalue_atom", 57);
			LeaveRule_lvalue_atom();
			if (state.backtracking > 0) { Memoize(input, 57, lvalue_atom_StartIndex); }

		}
		DebugLocation(405, 1);
		} finally { DebugExitRule(GrammarFileName, "lvalue_atom"); }
		return retval;

	}
	// $ANTLR end "lvalue_atom"

	partial void EnterRule_ident();
	partial void LeaveRule_ident();

	// $ANTLR start "ident"
	// SugarCpp.g:407:1: ident : IDENT ( '::' IDENT )* ;
	[GrammarRule("ident")]
	private AstParserRuleReturnScope<CommonTree, IToken> ident()
	{
		EnterRule_ident();
		EnterRule("ident", 58);
		TraceIn("ident", 58);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int ident_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken IDENT240 = default(IToken);
		IToken string_literal241 = default(IToken);
		IToken IDENT242 = default(IToken);

		CommonTree IDENT240_tree = default(CommonTree);
		CommonTree string_literal241_tree = default(CommonTree);
		CommonTree IDENT242_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "ident");
		DebugLocation(407, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 58)) { return retval; }

			// SugarCpp.g:408:2: ( IDENT ( '::' IDENT )* )
			DebugEnterAlt(1);
			// SugarCpp.g:408:4: IDENT ( '::' IDENT )*
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(408, 4);
			IDENT240=(IToken)Match(input,IDENT,Follow._IDENT_in_ident2922); if (state.failed) return retval;
			if (state.backtracking == 0) {
			IDENT240_tree = (CommonTree)adaptor.Create(IDENT240);
			adaptor.AddChild(root_0, IDENT240_tree);
			}
			DebugLocation(408, 10);
			// SugarCpp.g:408:10: ( '::' IDENT )*
			try { DebugEnterSubRule(74);
			while (true)
			{
				int alt74=2;
				try { DebugEnterDecision(74, false);
				int LA74_0 = input.LA(1);

				if ((LA74_0==77))
				{
					int LA74_2 = input.LA(2);

					if ((LA74_2==IDENT))
					{
						int LA74_3 = input.LA(3);

						if ((EvaluatePredicate(synpred130_SugarCpp_fragment)))
						{
							alt74 = 1;
						}


					}


				}


				} finally { DebugExitDecision(74); }
				switch ( alt74 )
				{
				case 1:
					DebugEnterAlt(1);
					// SugarCpp.g:408:11: '::' IDENT
					{
					DebugLocation(408, 11);
					string_literal241=(IToken)Match(input,77,Follow._77_in_ident2925); if (state.failed) return retval;
					if (state.backtracking == 0) {
					string_literal241_tree = (CommonTree)adaptor.Create(string_literal241);
					adaptor.AddChild(root_0, string_literal241_tree);
					}
					DebugLocation(408, 16);
					IDENT242=(IToken)Match(input,IDENT,Follow._IDENT_in_ident2927); if (state.failed) return retval;
					if (state.backtracking == 0) {
					IDENT242_tree = (CommonTree)adaptor.Create(IDENT242);
					adaptor.AddChild(root_0, IDENT242_tree);
					}

					}
					break;

				default:
					goto loop74;
				}
			}

			loop74:
				;

			} finally { DebugExitSubRule(74); }


			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("ident", 58);
			LeaveRule("ident", 58);
			LeaveRule_ident();
			if (state.backtracking > 0) { Memoize(input, 58, ident_StartIndex); }

		}
		DebugLocation(409, 1);
		} finally { DebugExitRule(GrammarFileName, "ident"); }
		return retval;

	}
	// $ANTLR end "ident"

	partial void EnterRule_infix_func();
	partial void LeaveRule_infix_func();

	// $ANTLR start "infix_func"
	// SugarCpp.g:411:1: infix_func : '`' ! ident '`' !;
	[GrammarRule("infix_func")]
	private AstParserRuleReturnScope<CommonTree, IToken> infix_func()
	{
		EnterRule_infix_func();
		EnterRule("infix_func", 59);
		TraceIn("infix_func", 59);
		AstParserRuleReturnScope<CommonTree, IToken> retval = new AstParserRuleReturnScope<CommonTree, IToken>();
		retval.Start = (IToken)input.LT(1);
		int infix_func_StartIndex = input.Index;

		CommonTree root_0 = default(CommonTree);

		IToken char_literal243 = default(IToken);
		IToken char_literal245 = default(IToken);
		AstParserRuleReturnScope<CommonTree, IToken> ident244 = default(AstParserRuleReturnScope<CommonTree, IToken>);

		CommonTree char_literal243_tree = default(CommonTree);
		CommonTree char_literal245_tree = default(CommonTree);
		try { DebugEnterRule(GrammarFileName, "infix_func");
		DebugLocation(411, 1);
		try
		{
			if (state.backtracking > 0 && AlreadyParsedRule(input, 59)) { return retval; }

			// SugarCpp.g:412:2: ( '`' ! ident '`' !)
			DebugEnterAlt(1);
			// SugarCpp.g:412:4: '`' ! ident '`' !
			{
			root_0 = (CommonTree)adaptor.Nil();

			DebugLocation(412, 7);
			char_literal243=(IToken)Match(input,95,Follow._95_in_infix_func2940); if (state.failed) return retval;
			DebugLocation(412, 9);
			PushFollow(Follow._ident_in_infix_func2943);
			ident244=ident();
			PopFollow();
			if (state.failed) return retval;
			if (state.backtracking == 0) adaptor.AddChild(root_0, ident244.Tree);
			DebugLocation(412, 18);
			char_literal245=(IToken)Match(input,95,Follow._95_in_infix_func2945); if (state.failed) return retval;

			}

			retval.Stop = (IToken)input.LT(-1);

			if (state.backtracking == 0) {
			retval.Tree = (CommonTree)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);
			}
		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (CommonTree)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("infix_func", 59);
			LeaveRule("infix_func", 59);
			LeaveRule_infix_func();
			if (state.backtracking > 0) { Memoize(input, 59, infix_func_StartIndex); }

		}
		DebugLocation(413, 1);
		} finally { DebugExitRule(GrammarFileName, "infix_func"); }
		return retval;

	}
	// $ANTLR end "infix_func"

	partial void EnterRule_synpred108_SugarCpp_fragment();
	partial void LeaveRule_synpred108_SugarCpp_fragment();

	// $ANTLR start synpred108_SugarCpp
	public void synpred108_SugarCpp_fragment()
	{
		EnterRule_synpred108_SugarCpp_fragment();
		EnterRule("synpred108_SugarCpp_fragment", 167);
		TraceIn("synpred108_SugarCpp_fragment", 167);
		try
		{
			// SugarCpp.g:372:11: ( ( generic_parameter )? '(' ( expr_list )? ')' )
			DebugEnterAlt(1);
			// SugarCpp.g:372:11: ( generic_parameter )? '(' ( expr_list )? ')'
			{
			DebugLocation(372, 11);
			// SugarCpp.g:372:11: ( generic_parameter )?
			int alt89=2;
			try { DebugEnterSubRule(89);
			try { DebugEnterDecision(89, false);
			int LA89_0 = input.LA(1);

			if ((LA89_0==80))
			{
				alt89 = 1;
			}
			} finally { DebugExitDecision(89); }
			switch (alt89)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:372:11: generic_parameter
				{
				DebugLocation(372, 11);
				PushFollow(Follow._generic_parameter_in_synpred108_SugarCpp2469);
				generic_parameter();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(89); }

			DebugLocation(372, 30);
			Match(input,59,Follow._59_in_synpred108_SugarCpp2472); if (state.failed) return;
			DebugLocation(372, 34);
			// SugarCpp.g:372:34: ( expr_list )?
			int alt90=2;
			try { DebugEnterSubRule(90);
			try { DebugEnterDecision(90, false);
			int LA90_0 = input.LA(1);

			if ((LA90_0==IDENT||LA90_0==NUMBER||LA90_0==STRING||LA90_0==52||LA90_0==57||LA90_0==59||LA90_0==61||(LA90_0>=63 && LA90_0<=64)||(LA90_0>=67 && LA90_0<=68)||LA90_0==105||LA90_0==114))
			{
				alt90 = 1;
			}
			} finally { DebugExitDecision(90); }
			switch (alt90)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:372:34: expr_list
				{
				DebugLocation(372, 34);
				PushFollow(Follow._expr_list_in_synpred108_SugarCpp2474);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(90); }

			DebugLocation(372, 45);
			Match(input,60,Follow._60_in_synpred108_SugarCpp2477); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred108_SugarCpp_fragment", 167);
			LeaveRule("synpred108_SugarCpp_fragment", 167);
			LeaveRule_synpred108_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred108_SugarCpp

	partial void EnterRule_synpred110_SugarCpp_fragment();
	partial void LeaveRule_synpred110_SugarCpp_fragment();

	// $ANTLR start synpred110_SugarCpp
	public void synpred110_SugarCpp_fragment()
	{
		EnterRule_synpred110_SugarCpp_fragment();
		EnterRule("synpred110_SugarCpp_fragment", 169);
		TraceIn("synpred110_SugarCpp_fragment", 169);
		try
		{
			// SugarCpp.g:373:11: ( '[' ( expr_list )? ']' )
			DebugEnterAlt(1);
			// SugarCpp.g:373:11: '[' ( expr_list )? ']'
			{
			DebugLocation(373, 11);
			Match(input,91,Follow._91_in_synpred110_SugarCpp2504); if (state.failed) return;
			DebugLocation(373, 15);
			// SugarCpp.g:373:15: ( expr_list )?
			int alt91=2;
			try { DebugEnterSubRule(91);
			try { DebugEnterDecision(91, false);
			int LA91_0 = input.LA(1);

			if ((LA91_0==IDENT||LA91_0==NUMBER||LA91_0==STRING||LA91_0==52||LA91_0==57||LA91_0==59||LA91_0==61||(LA91_0>=63 && LA91_0<=64)||(LA91_0>=67 && LA91_0<=68)||LA91_0==105||LA91_0==114))
			{
				alt91 = 1;
			}
			} finally { DebugExitDecision(91); }
			switch (alt91)
			{
			case 1:
				DebugEnterAlt(1);
				// SugarCpp.g:373:15: expr_list
				{
				DebugLocation(373, 15);
				PushFollow(Follow._expr_list_in_synpred110_SugarCpp2506);
				expr_list();
				PopFollow();
				if (state.failed) return;

				}
				break;

			}
			} finally { DebugExitSubRule(91); }

			DebugLocation(373, 26);
			Match(input,92,Follow._92_in_synpred110_SugarCpp2509); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred110_SugarCpp_fragment", 169);
			LeaveRule("synpred110_SugarCpp_fragment", 169);
			LeaveRule_synpred110_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred110_SugarCpp

	partial void EnterRule_synpred130_SugarCpp_fragment();
	partial void LeaveRule_synpred130_SugarCpp_fragment();

	// $ANTLR start synpred130_SugarCpp
	public void synpred130_SugarCpp_fragment()
	{
		EnterRule_synpred130_SugarCpp_fragment();
		EnterRule("synpred130_SugarCpp_fragment", 189);
		TraceIn("synpred130_SugarCpp_fragment", 189);
		try
		{
			// SugarCpp.g:408:11: ( '::' IDENT )
			DebugEnterAlt(1);
			// SugarCpp.g:408:11: '::' IDENT
			{
			DebugLocation(408, 11);
			Match(input,77,Follow._77_in_synpred130_SugarCpp2925); if (state.failed) return;
			DebugLocation(408, 16);
			Match(input,IDENT,Follow._IDENT_in_synpred130_SugarCpp2927); if (state.failed) return;

			}

		}
		finally
		{
			TraceOut("synpred130_SugarCpp_fragment", 189);
			LeaveRule("synpred130_SugarCpp_fragment", 189);
			LeaveRule_synpred130_SugarCpp_fragment();
		}
	}
	// $ANTLR end synpred130_SugarCpp
	#endregion Rules

	#region Synpreds
	private bool EvaluatePredicate(System.Action fragment)
	{
		bool success = false;
		state.backtracking++;
		try { DebugBeginBacktrack(state.backtracking);
		int start = input.Mark();
		try
		{
			fragment();
		}
		catch ( RecognitionException re )
		{
			System.Console.Error.WriteLine("impossible: "+re);
		}
		success = !state.failed;
		input.Rewind(start);
		} finally { DebugEndBacktrack(state.backtracking, success); }
		state.backtracking--;
		state.failed=false;
		return success;
	}
	#endregion Synpreds


	#region DFA
	private DFA3 dfa3;
	private DFA4 dfa4;
	private DFA7 dfa7;
	private DFA14 dfa14;
	private DFA29 dfa29;
	private DFA32 dfa32;
	private DFA34 dfa34;
	private DFA41 dfa41;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa3 = new DFA3( this );
		dfa4 = new DFA4( this );
		dfa7 = new DFA7( this );
		dfa14 = new DFA14( this );
		dfa29 = new DFA29( this );
		dfa32 = new DFA32( this );
		dfa34 = new DFA34( this );
		dfa41 = new DFA41( this );
	}

	private class DFA3 : DFA
	{
		private const string DFA3_eotS =
			"\x4\xFFFF";
		private const string DFA3_eofS =
			"\x2\x2\x2\xFFFF";
		private const string DFA3_minS =
			"\x2\x7\x2\xFFFF";
		private const string DFA3_maxS =
			"\x2\x6D\x2\xFFFF";
		private const string DFA3_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA3_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA3_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x5\xFFFF\x1\x1\x3E\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x5\xFFFF\x1\x1\x3E\xFFFF\x1\x3\x1\xFFFF\x1\x3"+
				"\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA3_eot = DFA.UnpackEncodedString(DFA3_eotS);
		private static readonly short[] DFA3_eof = DFA.UnpackEncodedString(DFA3_eofS);
		private static readonly char[] DFA3_min = DFA.UnpackEncodedStringToUnsignedChars(DFA3_minS);
		private static readonly char[] DFA3_max = DFA.UnpackEncodedStringToUnsignedChars(DFA3_maxS);
		private static readonly short[] DFA3_accept = DFA.UnpackEncodedString(DFA3_acceptS);
		private static readonly short[] DFA3_special = DFA.UnpackEncodedString(DFA3_specialS);
		private static readonly short[][] DFA3_transition;

		static DFA3()
		{
			int numStates = DFA3_transitionS.Length;
			DFA3_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA3_transition[i] = DFA.UnpackEncodedString(DFA3_transitionS[i]);
			}
		}

		public DFA3( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 3;
			this.eot = DFA3_eot;
			this.eof = DFA3_eof;
			this.min = DFA3_min;
			this.max = DFA3_max;
			this.accept = DFA3_accept;
			this.special = DFA3_special;
			this.transition = DFA3_transition;
		}

		public override string Description { get { return "()+ loopback of 151:4: ( ( NEWLINE )* node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA4 : DFA
	{
		private const string DFA4_eotS =
			"\xC\xFFFF";
		private const string DFA4_eofS =
			"\xC\xFFFF";
		private const string DFA4_minS =
			"\x2\x1C\x6\xFFFF\x1\x1C\x2\xFFFF\x1\x1C";
		private const string DFA4_maxS =
			"\x1\x6D\x1\x5B\x6\xFFFF\x1\x1C\x2\xFFFF\x1\x5B";
		private const string DFA4_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\x7\x1\x8\x1\xFFFF\x1\x1\x1\x6\x1"+
			"\xFFFF";
		private const string DFA4_specialS =
			"\xC\xFFFF}>";
		private static readonly string[] DFA4_transitionS =
			{
				"\x1\x1\x44\xFFFF\x1\x4\x1\xFFFF\x1\x3\x2\xFFFF\x1\x2\x1\xFFFF\x1\x5"+
				"\x3\xFFFF\x1\x7\x1\x6",
				"\x1\x9\x1C\xFFFF\x1\x9\x3\xFFFF\x1\x9\x4\xFFFF\x1\xA\x9\xFFFF\x1\xA"+
				"\x1\x8\x2\xFFFF\x1\x9\xA\xFFFF\x1\x9",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xB",
				"",
				"",
				"\x1\x9\x1C\xFFFF\x1\x9\x3\xFFFF\x1\x9\x4\xFFFF\x1\xA\x9\xFFFF\x1\xA"+
				"\x1\x8\x2\xFFFF\x1\x9\xA\xFFFF\x1\x9"
			};

		private static readonly short[] DFA4_eot = DFA.UnpackEncodedString(DFA4_eotS);
		private static readonly short[] DFA4_eof = DFA.UnpackEncodedString(DFA4_eofS);
		private static readonly char[] DFA4_min = DFA.UnpackEncodedStringToUnsignedChars(DFA4_minS);
		private static readonly char[] DFA4_max = DFA.UnpackEncodedStringToUnsignedChars(DFA4_maxS);
		private static readonly short[] DFA4_accept = DFA.UnpackEncodedString(DFA4_acceptS);
		private static readonly short[] DFA4_special = DFA.UnpackEncodedString(DFA4_specialS);
		private static readonly short[][] DFA4_transition;

		static DFA4()
		{
			int numStates = DFA4_transitionS.Length;
			DFA4_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA4_transition[i] = DFA.UnpackEncodedString(DFA4_transitionS[i]);
			}
		}

		public DFA4( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 4;
			this.eot = DFA4_eot;
			this.eof = DFA4_eof;
			this.min = DFA4_min;
			this.max = DFA4_max;
			this.accept = DFA4_accept;
			this.special = DFA4_special;
			this.transition = DFA4_transition;
		}

		public override string Description { get { return "154:1: node : ( func_def | import_def | enum_def | class_def | namespace_def | stmt_alloc | stmt_using | stmt_typedef );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x4\xFFFF";
		private const string DFA7_eofS =
			"\x4\xFFFF";
		private const string DFA7_minS =
			"\x2\x7\x2\xFFFF";
		private const string DFA7_maxS =
			"\x1\x22\x1\x28\x2\xFFFF";
		private const string DFA7_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA7_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x1\x2\x1A\xFFFF\x1\x1",
				"\x1\x2\x1A\xFFFF\x1\x1\x5\xFFFF\x1\x3",
				"",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "()* loopback of 166:29: ( ( NEWLINE )+ STRING )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA14 : DFA
	{
		private const string DFA14_eotS =
			"\x4\xFFFF";
		private const string DFA14_eofS =
			"\x4\xFFFF";
		private const string DFA14_minS =
			"\x2\x7\x2\xFFFF";
		private const string DFA14_maxS =
			"\x2\x6D\x2\xFFFF";
		private const string DFA14_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA14_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA14_transitionS =
			{
				"\x1\x2\x14\xFFFF\x1\x3\x5\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"\x1\x2\x14\xFFFF\x1\x3\x5\xFFFF\x1\x1\x38\xFFFF\x1\x3\x5\xFFFF\x1\x3"+
				"\x1\xFFFF\x1\x3\x2\xFFFF\x1\x3\x1\xFFFF\x1\x3\x3\xFFFF\x2\x3",
				"",
				""
			};

		private static readonly short[] DFA14_eot = DFA.UnpackEncodedString(DFA14_eotS);
		private static readonly short[] DFA14_eof = DFA.UnpackEncodedString(DFA14_eofS);
		private static readonly char[] DFA14_min = DFA.UnpackEncodedStringToUnsignedChars(DFA14_minS);
		private static readonly char[] DFA14_max = DFA.UnpackEncodedStringToUnsignedChars(DFA14_maxS);
		private static readonly short[] DFA14_accept = DFA.UnpackEncodedString(DFA14_acceptS);
		private static readonly short[] DFA14_special = DFA.UnpackEncodedString(DFA14_specialS);
		private static readonly short[][] DFA14_transition;

		static DFA14()
		{
			int numStates = DFA14_transitionS.Length;
			DFA14_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA14_transition[i] = DFA.UnpackEncodedString(DFA14_transitionS[i]);
			}
		}

		public DFA14( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 14;
			this.eot = DFA14_eot;
			this.eof = DFA14_eof;
			this.min = DFA14_min;
			this.max = DFA14_max;
			this.accept = DFA14_accept;
			this.special = DFA14_special;
			this.transition = DFA14_transition;
		}

		public override string Description { get { return "()+ loopback of 182:4: ( ( NEWLINE )* class_node )+"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA29 : DFA
	{
		private const string DFA29_eotS =
			"\x4\xFFFF";
		private const string DFA29_eofS =
			"\x4\xFFFF";
		private const string DFA29_minS =
			"\x2\x7\x2\xFFFF";
		private const string DFA29_maxS =
			"\x1\x22\x1\x6E\x2\xFFFF";
		private const string DFA29_acceptS =
			"\x2\xFFFF\x1\x2\x1\x1";
		private const string DFA29_specialS =
			"\x4\xFFFF}>";
		private static readonly string[] DFA29_transitionS =
			{
				"\x1\x2\x1A\xFFFF\x1\x1",
				"\x1\x2\x14\xFFFF\x1\x3\x5\xFFFF\x1\x1\x18\xFFFF\x1\x3\x28\xFFFF\x2"+
				"\x3\x4\xFFFF\x5\x3",
				"",
				""
			};

		private static readonly short[] DFA29_eot = DFA.UnpackEncodedString(DFA29_eotS);
		private static readonly short[] DFA29_eof = DFA.UnpackEncodedString(DFA29_eofS);
		private static readonly char[] DFA29_min = DFA.UnpackEncodedStringToUnsignedChars(DFA29_minS);
		private static readonly char[] DFA29_max = DFA.UnpackEncodedStringToUnsignedChars(DFA29_maxS);
		private static readonly short[] DFA29_accept = DFA.UnpackEncodedString(DFA29_acceptS);
		private static readonly short[] DFA29_special = DFA.UnpackEncodedString(DFA29_specialS);
		private static readonly short[][] DFA29_transition;

		static DFA29()
		{
			int numStates = DFA29_transitionS.Length;
			DFA29_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA29_transition[i] = DFA.UnpackEncodedString(DFA29_transitionS[i]);
			}
		}

		public DFA29( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 29;
			this.eot = DFA29_eot;
			this.eof = DFA29_eof;
			this.min = DFA29_min;
			this.max = DFA29_max;
			this.accept = DFA29_accept;
			this.special = DFA29_special;
			this.transition = DFA29_transition;
		}

		public override string Description { get { return "()* loopback of 211:11: ( ( NEWLINE )+ stmt )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA32 : DFA
	{
		private const string DFA32_eotS =
			"\xB\xFFFF";
		private const string DFA32_eofS =
			"\x1\xFFFF\x1\x5\x6\xFFFF\x1\x5\x1\xFFFF\x1\x5";
		private const string DFA32_minS =
			"\x1\x1C\x1\x7\x4\xFFFF\x1\x1C\x1\xFFFF\x1\x7\x1\x1C\x1\x7";
		private const string DFA32_maxS =
			"\x1\x6D\x1\x70\x4\xFFFF\x1\x1C\x1\xFFFF\x1\x70\x1\x1C\x1\x70";
		private const string DFA32_acceptS =
			"\x2\xFFFF\x1\x2\x1\x3\x1\x4\x1\x5\x1\xFFFF\x1\x1\x3\xFFFF";
		private const string DFA32_specialS =
			"\xB\xFFFF}>";
		private static readonly string[] DFA32_transitionS =
			{
				"\x1\x1\x1E\xFFFF\x1\x5\x2E\xFFFF\x1\x2\x1\xFFFF\x1\x4\x1\x3",
				"\x1\x5\x1A\xFFFF\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x6\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x2\x5\x2\xFFFF\x1\x5\x11\xFFFF\x1\x5",
				"",
				"",
				"",
				"",
				"\x1\x8",
				"",
				"\x1\x5\x1A\xFFFF\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x9\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x2\x5\x2\xFFFF\x1\x5\x11\xFFFF\x1\x5",
				"\x1\xA",
				"\x1\x5\x1A\xFFFF\x1\x5\x14\xFFFF\x1\x5\x2\xFFFF\x2\x5\x2\xFFFF\x1\x5"+
				"\x1\xFFFF\x2\x5\x1\x7\x1\xFFFF\x3\x5\x1\xFFFF\x1\x5\x2\xFFFF\x1\x5\x1"+
				"\x7\x1\x9\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x1\xFFFF\x1\x5\x5\xFFFF"+
				"\x2\x5\x2\xFFFF\x1\x5\x11\xFFFF\x1\x5"
			};

		private static readonly short[] DFA32_eot = DFA.UnpackEncodedString(DFA32_eotS);
		private static readonly short[] DFA32_eof = DFA.UnpackEncodedString(DFA32_eofS);
		private static readonly char[] DFA32_min = DFA.UnpackEncodedStringToUnsignedChars(DFA32_minS);
		private static readonly char[] DFA32_max = DFA.UnpackEncodedStringToUnsignedChars(DFA32_maxS);
		private static readonly short[] DFA32_accept = DFA.UnpackEncodedString(DFA32_acceptS);
		private static readonly short[] DFA32_special = DFA.UnpackEncodedString(DFA32_specialS);
		private static readonly short[][] DFA32_transition;

		static DFA32()
		{
			int numStates = DFA32_transitionS.Length;
			DFA32_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA32_transition[i] = DFA.UnpackEncodedString(DFA32_transitionS[i]);
			}
		}

		public DFA32( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 32;
			this.eot = DFA32_eot;
			this.eof = DFA32_eof;
			this.min = DFA32_min;
			this.max = DFA32_max;
			this.accept = DFA32_accept;
			this.special = DFA32_special;
			this.transition = DFA32_transition;
		}

		public override string Description { get { return "222:1: stmt_expr : ( stmt_alloc | stmt_return | stmt_using | stmt_typedef | stmt_modify );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA34 : DFA
	{
		private const string DFA34_eotS =
			"\x17\xFFFF";
		private const string DFA34_eofS =
			"\x1\x1\x1\xFFFF\x2\x7\x2\xFFFF\x1\x7\x1\xFFFF\x2\x7\x3\xFFFF\x1\x7\x1"+
			"\xFFFF\x1\x7\x7\xFFFF";
		private const string DFA34_minS =
			"\x1\x7\x1\xFFFF\x2\x7\x2\x1C\x1\x7\x1\xFFFF\x2\x7\x3\x1C\x1\x7\x1\x39"+
			"\x1\x7\x3\x1C\x2\x39\x1\x1C\x1\x39";
		private const string DFA34_maxS =
			"\x1\x6D\x1\xFFFF\x2\x6D\x1\x1C\x1\x5C\x1\x6D\x1\xFFFF\x2\x6D\x1\x1C\x1"+
			"\x57\x1\x1C\x1\x6D\x1\x5B\x1\x6D\x2\x1C\x3\x5B\x1\x1C\x1\x5B";
		private const string DFA34_acceptS =
			"\x1\xFFFF\x1\x2\x5\xFFFF\x1\x1\xF\xFFFF";
		private const string DFA34_specialS =
			"\x17\xFFFF}>";
		private static readonly string[] DFA34_transitionS =
			{
				"\x1\x1\x14\xFFFF\x1\x2\x5\xFFFF\x1\x1\x38\xFFFF\x1\x1\x5\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x1\x2\xFFFF\x1\x1\x1\xFFFF\x1\x3\x3\xFFFF\x2\x1",
				"",
				"\x1\x7\x14\xFFFF\x1\x6\x5\xFFFF\x1\x7\x16\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x4\xFFFF\x1\x1\x9\xFFFF\x1\x1\x1\x4\x2\xFFFF\x1\x1\xA\xFFFF\x1\x5\x5"+
				"\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF\x2"+
				"\x7",
				"\x1\x7\x14\xFFFF\x1\x8\x5\xFFFF\x1\x7\x38\xFFFF\x1\x7\x5\xFFFF\x1\x7"+
				"\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF\x2\x7",
				"\x1\x9",
				"\x1\x7\x3F\xFFFF\x1\x1",
				"\x1\x7\x14\xFFFF\x1\x7\x5\xFFFF\x1\x7\x16\xFFFF\x1\x7\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xA\x2\xFFFF\x1\xB\xA"+
				"\xFFFF\x1\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1"+
				"\x7\x3\xFFFF\x2\x7",
				"",
				"\x1\x7\x14\xFFFF\x1\x7\x1\x1\x4\xFFFF\x1\x7\x16\xFFFF\x1\x7\x3\xFFFF"+
				"\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xC\x2\xFFFF\x1\x7\xA\xFFFF\x1"+
				"\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF"+
				"\x2\x7",
				"\x1\x7\x14\xFFFF\x1\x6\x5\xFFFF\x1\x7\x16\xFFFF\x1\x1\x3\xFFFF\x1\x1"+
				"\x4\xFFFF\x1\x1\x9\xFFFF\x1\x1\x1\x4\x2\xFFFF\x1\x1\xA\xFFFF\x1\x5\x5"+
				"\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF\x2"+
				"\x7",
				"\x1\xD",
				"\x1\xE\x3A\xFFFF\x1\x7",
				"\x1\xF",
				"\x1\x7\x14\xFFFF\x1\x7\x5\xFFFF\x1\x7\x16\xFFFF\x1\x7\x1\xFFFF\x1\x1"+
				"\x1\xFFFF\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xA\x2\xFFFF\x1\xB\xA"+
				"\xFFFF\x1\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1"+
				"\x7\x3\xFFFF\x2\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x10\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7",
				"\x1\x7\x14\xFFFF\x1\x7\x1\x1\x4\xFFFF\x1\x7\x16\xFFFF\x1\x7\x3\xFFFF"+
				"\x1\x7\x4\xFFFF\x1\x7\x9\xFFFF\x1\x7\x1\xC\x2\xFFFF\x1\x7\xA\xFFFF\x1"+
				"\x7\x5\xFFFF\x1\x7\x1\xFFFF\x1\x7\x2\xFFFF\x1\x7\x1\xFFFF\x1\x7\x3\xFFFF"+
				"\x2\x7",
				"\x1\x13",
				"\x1\x14",
				"\x1\x7\x1C\xFFFF\x1\x7\x1\xFFFF\x1\x1\x1\xFFFF\x1\x7\x1D\xFFFF\x1\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x10\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x15\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7",
				"\x1\x16",
				"\x1\x7\x3\xFFFF\x1\x7\x4\xFFFF\x1\x11\xA\xFFFF\x1\x15\x2\xFFFF\x1\x7"+
				"\x6\xFFFF\x1\x12\x3\xFFFF\x1\x7"
			};

		private static readonly short[] DFA34_eot = DFA.UnpackEncodedString(DFA34_eotS);
		private static readonly short[] DFA34_eof = DFA.UnpackEncodedString(DFA34_eofS);
		private static readonly char[] DFA34_min = DFA.UnpackEncodedStringToUnsignedChars(DFA34_minS);
		private static readonly char[] DFA34_max = DFA.UnpackEncodedStringToUnsignedChars(DFA34_maxS);
		private static readonly short[] DFA34_accept = DFA.UnpackEncodedString(DFA34_acceptS);
		private static readonly short[] DFA34_special = DFA.UnpackEncodedString(DFA34_specialS);
		private static readonly short[][] DFA34_transition;

		static DFA34()
		{
			int numStates = DFA34_transitionS.Length;
			DFA34_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA34_transition[i] = DFA.UnpackEncodedString(DFA34_transitionS[i]);
			}
		}

		public DFA34( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 34;
			this.eot = DFA34_eot;
			this.eof = DFA34_eof;
			this.min = DFA34_min;
			this.max = DFA34_max;
			this.accept = DFA34_accept;
			this.special = DFA34_special;
			this.transition = DFA34_transition;
		}

		public override string Description { get { return "()* loopback of 236:12: ( stmt_using_item )*"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA41 : DFA
	{
		private const string DFA41_eotS =
			"\x17\xFFFF";
		private const string DFA41_eofS =
			"\x17\xFFFF";
		private const string DFA41_minS =
			"\x2\x1C\x1\xFFFF\x1\x35\x3\x1C\x2\x35\x1\x39\x4\x1C\x1\xFFFF\x2\x35\x2"+
			"\x39\x2\x1C\x1\x35\x1\x39";
		private const string DFA41_maxS =
			"\x2\x72\x1\xFFFF\x1\x71\x1\x1C\x1\x72\x1\x1C\x2\x71\x1\x5B\x4\x1C\x1"+
			"\xFFFF\x2\x71\x2\x5B\x2\x1C\x1\x71\x1\x5B";
		private const string DFA41_acceptS =
			"\x2\xFFFF\x1\x2\xB\xFFFF\x1\x1\x8\xFFFF";
		private const string DFA41_specialS =
			"\x17\xFFFF}>";
		private static readonly string[] DFA41_transitionS =
			{
				"\x1\x2\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2\x1"+
				"\xFFFF\x1\x1\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x24\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"\x1\x3\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x24\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"",
				"\xD\x2\x1\x5\x9\x2\x1\x6\x1\x4\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\x7",
				"\x1\x8\x6\xFFFF\x1\x2\x4\xFFFF\x1\x2\xB\xFFFF\x1\x2\x4\xFFFF\x1\x2"+
				"\x1\xFFFF\x1\x2\x1\xFFFF\x1\x2\x1\xFFFF\x2\x2\x2\xFFFF\x2\x2\x24\xFFFF"+
				"\x1\x2\x8\xFFFF\x1\x2",
				"\x1\x9",
				"\xD\x2\x1\x5\x9\x2\x1\x6\x1\xA\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\xD\x2\x1\x5\x9\x2\x1\xC\x1\xB\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE",
				"\x1\xF",
				"\x1\x10",
				"\x1\x11",
				"\x1\x12",
				"",
				"\xD\x2\x1\x5\x9\x2\x1\x6\x1\xA\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\xD\x2\x1\x5\x9\x2\x1\xC\x1\x13\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\x14\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\xD\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE",
				"\x1\x15",
				"\x1\x16",
				"\xD\x2\x1\x5\x9\x2\x1\xC\x1\x13\x1\x2\x1\xFFFF\x6\x2\x1\xFFFF\x5\x2"+
				"\x1\xFFFF\x3\x2\x5\xFFFF\x1\x2\x9\xFFFF\x3\x2",
				"\x1\xE\x1\xFFFF\x1\x2\x2\xE\x4\xFFFF\x1\xE\xA\xFFFF\x1\x14\x2\xFFFF"+
				"\x1\xE\x3\xFFFF\x1\xE\x6\xFFFF\x1\xE"
			};

		private static readonly short[] DFA41_eot = DFA.UnpackEncodedString(DFA41_eotS);
		private static readonly short[] DFA41_eof = DFA.UnpackEncodedString(DFA41_eofS);
		private static readonly char[] DFA41_min = DFA.UnpackEncodedStringToUnsignedChars(DFA41_minS);
		private static readonly char[] DFA41_max = DFA.UnpackEncodedStringToUnsignedChars(DFA41_maxS);
		private static readonly short[] DFA41_accept = DFA.UnpackEncodedString(DFA41_acceptS);
		private static readonly short[] DFA41_special = DFA.UnpackEncodedString(DFA41_specialS);
		private static readonly short[][] DFA41_transition;

		static DFA41()
		{
			int numStates = DFA41_transitionS.Length;
			DFA41_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA41_transition[i] = DFA.UnpackEncodedString(DFA41_transitionS[i]);
			}
		}

		public DFA41( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 41;
			this.eot = DFA41_eot;
			this.eof = DFA41_eof;
			this.min = DFA41_min;
			this.max = DFA41_max;
			this.accept = DFA41_accept;
			this.special = DFA41_special;
			this.transition = DFA41_transition;
		}

		public override string Description { get { return "281:1: lambda_expr : ( '(' func_args ')' '=>' modify_expr -> ^( Expr_Lambda func_args modify_expr ) | modify_expr );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}


	#endregion DFA

	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _overall_block_in_root400 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _NEWLINE_in_root403 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _EOF_in_root406 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_overall_block418 = new BitSet(new ulong[]{0x410000000UL,0x314A00000000UL});
		public static readonly BitSet _node_in_overall_block421 = new BitSet(new ulong[]{0x410000002UL,0x314A00000000UL});
		public static readonly BitSet _func_def_in_node434 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _import_def_in_node439 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _enum_def_in_node444 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _class_def_in_node449 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _namespace_def_in_node454 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_node459 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_node464 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_node469 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _102_in_import_def480 = new BitSet(new ulong[]{0x10020000002UL});
		public static readonly BitSet _STRING_in_import_def482 = new BitSet(new ulong[]{0x20000002UL});
		public static readonly BitSet _INDENT_in_import_def486 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _NEWLINE_in_import_def489 = new BitSet(new ulong[]{0x10400000000UL});
		public static readonly BitSet _STRING_in_import_def492 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _NEWLINE_in_import_def496 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _DEDENT_in_import_def499 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _99_in_enum_def521 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_enum_def523 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_enum_def525 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_enum_def527 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_enum_def530 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_enum_def532 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _104_in_namespace_def554 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_namespace_def556 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _INDENT_in_namespace_def558 = new BitSet(new ulong[]{0x410000000UL,0x314A00000000UL});
		public static readonly BitSet _overall_block_in_namespace_def560 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _NEWLINE_in_namespace_def562 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _DEDENT_in_namespace_def565 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _97_in_class_def586 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_class_def588 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _INDENT_in_class_def590 = new BitSet(new ulong[]{0x410000000UL,0x314A08000000UL});
		public static readonly BitSet _class_block_in_class_def592 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _NEWLINE_in_class_def594 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _DEDENT_in_class_def597 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _NEWLINE_in_class_block619 = new BitSet(new ulong[]{0x410000000UL,0x314A08000000UL});
		public static readonly BitSet _class_node_in_class_block622 = new BitSet(new ulong[]{0x410000002UL,0x314A08000000UL});
		public static readonly BitSet _91_in_attribute634 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_attribute636 = new BitSet(new ulong[]{0x0UL,0x10000004UL});
		public static readonly BitSet _66_in_attribute639 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_attribute641 = new BitSet(new ulong[]{0x0UL,0x10000004UL});
		public static readonly BitSet _92_in_attribute645 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _attribute_in_class_node666 = new BitSet(new ulong[]{0x400000000UL});
		public static readonly BitSet _NEWLINE_in_class_node668 = new BitSet(new ulong[]{0x410000000UL,0x314A08000000UL});
		public static readonly BitSet _node_in_class_node674 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _61_in_type_name_op683 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_type_name_op687 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_type_name_op689 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _57_in_type_name_op693 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_type_name702 = new BitSet(new ulong[]{0x2200000000000002UL,0x8010000UL});
		public static readonly BitSet _80_in_type_name705 = new BitSet(new ulong[]{0x10000000UL,0x800000UL});
		public static readonly BitSet _type_name_in_type_name708 = new BitSet(new ulong[]{0x0UL,0x800004UL});
		public static readonly BitSet _66_in_type_name711 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _type_name_in_type_name713 = new BitSet(new ulong[]{0x0UL,0x800004UL});
		public static readonly BitSet _87_in_type_name719 = new BitSet(new ulong[]{0x2200000000000002UL,0x8000000UL});
		public static readonly BitSet _type_name_op_in_type_name723 = new BitSet(new ulong[]{0x2200000000000002UL,0x8000000UL});
		public static readonly BitSet _80_in_generic_parameter757 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_generic_parameter759 = new BitSet(new ulong[]{0x0UL,0x800004UL});
		public static readonly BitSet _66_in_generic_parameter762 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_generic_parameter765 = new BitSet(new ulong[]{0x0UL,0x800004UL});
		public static readonly BitSet _87_in_generic_parameter769 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_func_args780 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_func_args783 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _stmt_alloc_in_func_args785 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _type_name_in_func_def807 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_func_def809 = new BitSet(new ulong[]{0x800000000000000UL,0x10000UL});
		public static readonly BitSet _generic_parameter_in_func_def811 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_func_def814 = new BitSet(new ulong[]{0x1000000010000000UL});
		public static readonly BitSet _func_args_in_func_def816 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_func_def819 = new BitSet(new ulong[]{0x20000000UL,0x100000UL});
		public static readonly BitSet _stmt_block_in_func_def823 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _84_in_func_def827 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_func_def829 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _INDENT_in_stmt_block845 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _NEWLINE_in_stmt_block848 = new BitSet(new ulong[]{0x800000410000000UL,0x7C3000000000UL});
		public static readonly BitSet _stmt_in_stmt_block851 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _NEWLINE_in_stmt_block855 = new BitSet(new ulong[]{0x400000080UL});
		public static readonly BitSet _DEDENT_in_stmt_block858 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_expr_in_stmt878 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_if_in_stmt883 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_for_in_stmt888 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_while_in_stmt893 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_try_in_stmt898 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_alloc_in_stmt_expr909 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_return_in_stmt_expr914 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_using_in_stmt_expr919 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_typedef_in_stmt_expr924 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _stmt_modify_in_stmt_expr929 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _108_in_stmt_typedef940 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_stmt_typedef942 = new BitSet(new ulong[]{0x0UL,0x100000UL});
		public static readonly BitSet _84_in_stmt_typedef944 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _type_name_in_stmt_typedef946 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_stmt_using_item965 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _104_in_stmt_using_item969 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _109_in_stmt_using977 = new BitSet(new ulong[]{0x10000002UL,0x10000000000UL});
		public static readonly BitSet _stmt_using_item_in_stmt_using979 = new BitSet(new ulong[]{0x10000002UL,0x10000000000UL});
		public static readonly BitSet _106_in_stmt_return1000 = new BitSet(new ulong[]{0xAA10010810000002UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_return1002 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _101_in_stmt_if1023 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_stmt_if1025 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_if1027 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_if1029 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1031 = new BitSet(new ulong[]{0x2UL,0x400000000UL});
		public static readonly BitSet _98_in_stmt_if1034 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_block_in_stmt_if1036 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _110_in_stmt_while1062 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_stmt_while1064 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_while1066 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_while1068 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_block_in_stmt_while1070 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _100_in_stmt_for1096 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_stmt_for1098 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_for1100 = new BitSet(new ulong[]{0x0UL,0x8000008000UL});
		public static readonly BitSet _79_in_stmt_for1103 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_for1105 = new BitSet(new ulong[]{0x0UL,0x8000UL});
		public static readonly BitSet _79_in_stmt_for1107 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_for1109 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _103_in_stmt_for1115 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_for1117 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_for1122 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_block_in_stmt_for1124 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _107_in_stmt_try1169 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1171 = new BitSet(new ulong[]{0x0UL,0x100000000UL});
		public static readonly BitSet _96_in_stmt_try1173 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_stmt_try1175 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_try1177 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_stmt_try1179 = new BitSet(new ulong[]{0x20000000UL});
		public static readonly BitSet _stmt_block_in_stmt_try1181 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_ident_list1204 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_ident_list1207 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_ident_list1209 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _ident_list_in_stmt_alloc1231 = new BitSet(new ulong[]{0x0UL,0x1000UL});
		public static readonly BitSet _76_in_stmt_alloc1233 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _type_name_in_stmt_alloc1235 = new BitSet(new ulong[]{0x2UL,0x100000UL});
		public static readonly BitSet _84_in_stmt_alloc1238 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_stmt_alloc1240 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_in_stmt_modify1266 = new BitSet(new ulong[]{0x4480000000000002UL,0x1000044144822UL});
		public static readonly BitSet _modify_expr_op_in_stmt_modify1269 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _cond_expr_in_stmt_modify1272 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lambda_expr_in_expr1285 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_lambda_expr1296 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _func_args_in_lambda_expr1298 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_lambda_expr1300 = new BitSet(new ulong[]{0x0UL,0x400000UL});
		public static readonly BitSet _86_in_lambda_expr1302 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1304 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _modify_expr_in_lambda_expr1319 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_modify_expr1381 = new BitSet(new ulong[]{0x4480000000000002UL,0x1000044144822UL});
		public static readonly BitSet _modify_expr_op_in_modify_expr1384 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _modify_expr_in_modify_expr1387 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _cond_expr_in_cond_expr_item1398 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _or_expr_in_cond_expr1410 = new BitSet(new ulong[]{0x2UL,0x2000000000UL});
		public static readonly BitSet _101_in_cond_expr1419 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1423 = new BitSet(new ulong[]{0x0UL,0x400000000UL});
		public static readonly BitSet _98_in_cond_expr1425 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _cond_expr_item_in_cond_expr1429 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _and_expr_in_or_expr1460 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _113_in_or_expr1469 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _and_expr_in_or_expr1473 = new BitSet(new ulong[]{0x2UL,0x2000000000000UL});
		public static readonly BitSet _bit_or_in_and_expr1503 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _56_in_and_expr1512 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _bit_or_in_and_expr1516 = new BitSet(new ulong[]{0x100000000000002UL});
		public static readonly BitSet _bit_xor_in_bit_or1546 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _111_in_bit_or1555 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _bit_xor_in_bit_or1559 = new BitSet(new ulong[]{0x2UL,0x800000000000UL});
		public static readonly BitSet _bit_and_in_bit_xor1589 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _93_in_bit_xor1598 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _bit_and_in_bit_xor1602 = new BitSet(new ulong[]{0x2UL,0x20000000UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1632 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _57_in_bit_and1641 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _cmp_equ_expr_in_bit_and1645 = new BitSet(new ulong[]{0x200000000000002UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1686 = new BitSet(new ulong[]{0x20000000000002UL,0x200000UL});
		public static readonly BitSet _cmp_equ_expr_op_in_cmp_equ_expr1695 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _cmp_expr_in_cmp_equ_expr1699 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1749 = new BitSet(new ulong[]{0x2UL,0x1890000UL});
		public static readonly BitSet _cmp_expr_op_in_cmp_expr1758 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _shift_expr_in_cmp_expr1762 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _add_expr_in_shift_expr1803 = new BitSet(new ulong[]{0x2UL,0x2020000UL});
		public static readonly BitSet _shift_expr_op_in_shift_expr1812 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _add_expr_in_shift_expr1816 = new BitSet(new ulong[]{0x2UL,0x2020000UL});
		public static readonly BitSet _infix_expr_in_add_expr1846 = new BitSet(new ulong[]{0x8000000000000002UL,0x8UL});
		public static readonly BitSet _63_in_add_expr1856 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _infix_expr_in_add_expr1860 = new BitSet(new ulong[]{0x8000000000000002UL,0x8UL});
		public static readonly BitSet _67_in_add_expr1887 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _infix_expr_in_add_expr1891 = new BitSet(new ulong[]{0x8000000000000002UL,0x8UL});
		public static readonly BitSet _mul_expr_in_infix_expr1931 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _infix_func_in_infix_expr1941 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _mul_expr_in_infix_expr1945 = new BitSet(new ulong[]{0x2UL,0x80000000UL});
		public static readonly BitSet _selector_expr_in_mul_expr1977 = new BitSet(new ulong[]{0x2040000000000002UL,0x400UL});
		public static readonly BitSet _61_in_mul_expr1987 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _selector_expr_in_mul_expr1991 = new BitSet(new ulong[]{0x2040000000000002UL,0x400UL});
		public static readonly BitSet _74_in_mul_expr2021 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _selector_expr_in_mul_expr2025 = new BitSet(new ulong[]{0x2040000000000002UL,0x400UL});
		public static readonly BitSet _54_in_mul_expr2055 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _selector_expr_in_mul_expr2059 = new BitSet(new ulong[]{0x2040000000000002UL,0x400UL});
		public static readonly BitSet _prefix_expr_in_selector_expr2102 = new BitSet(new ulong[]{0x2UL,0x280UL});
		public static readonly BitSet _71_in_selector_expr2112 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_selector_expr2116 = new BitSet(new ulong[]{0x2UL,0x280UL});
		public static readonly BitSet _73_in_selector_expr2144 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_selector_expr2149 = new BitSet(new ulong[]{0x2UL,0x280UL});
		public static readonly BitSet _prefix_expr_op_in_prefix_expr2224 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _prefix_expr_in_prefix_expr2226 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _105_in_prefix_expr2242 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _type_name_in_prefix_expr2244 = new BitSet(new ulong[]{0x800000000000000UL,0x8000000UL});
		public static readonly BitSet _59_in_prefix_expr2248 = new BitSet(new ulong[]{0xBA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_list_in_prefix_expr2250 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_prefix_expr2253 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_prefix_expr2275 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_list_in_prefix_expr2277 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_prefix_expr2279 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _suffix_expr_in_prefix_expr2295 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _expr_in_expr_list2307 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _66_in_expr_list2310 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_expr_list2313 = new BitSet(new ulong[]{0x2UL,0x4UL});
		public static readonly BitSet _atom_expr_in_suffix_expr2329 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _64_in_suffix_expr2339 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _68_in_suffix_expr2365 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _72_in_suffix_expr2388 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_suffix_expr2390 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _70_in_suffix_expr2415 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_suffix_expr2417 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _77_in_suffix_expr2442 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_suffix_expr2444 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _generic_parameter_in_suffix_expr2469 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_suffix_expr2472 = new BitSet(new ulong[]{0xBA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_list_in_suffix_expr2474 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_suffix_expr2477 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _91_in_suffix_expr2504 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020010000019UL});
		public static readonly BitSet _expr_list_in_suffix_expr2506 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_suffix_expr2509 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _76_in_suffix_expr2533 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_suffix_expr2535 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_suffix_expr2537 = new BitSet(new ulong[]{0xBA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_list_in_suffix_expr2539 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_suffix_expr2542 = new BitSet(new ulong[]{0x800000000000002UL,0x8013151UL});
		public static readonly BitSet _NUMBER_in_atom_expr2586 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_atom_expr2591 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _STRING_in_atom_expr2596 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _59_in_atom_expr2601 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_atom_expr2603 = new BitSet(new ulong[]{0x1000000000000000UL,0x4UL});
		public static readonly BitSet _66_in_atom_expr2606 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_in_atom_expr2608 = new BitSet(new ulong[]{0x1000000000000000UL,0x4UL});
		public static readonly BitSet _60_in_atom_expr2615 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _lvalue_atom_in_lvalue2652 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _64_in_lvalue2662 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _68_in_lvalue2690 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _72_in_lvalue2715 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_lvalue2717 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _70_in_lvalue2744 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_lvalue2746 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _77_in_lvalue2773 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_lvalue2775 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _generic_parameter_in_lvalue2802 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_lvalue2805 = new BitSet(new ulong[]{0xBA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_list_in_lvalue2807 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_lvalue2810 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _91_in_lvalue2839 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020010000019UL});
		public static readonly BitSet _expr_list_in_lvalue2841 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_lvalue2844 = new BitSet(new ulong[]{0x800000000000002UL,0x8012151UL});
		public static readonly BitSet _59_in_lvalue_atom2883 = new BitSet(new ulong[]{0x1800000010000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2886 = new BitSet(new ulong[]{0x1000000000000000UL,0x4UL});
		public static readonly BitSet _66_in_lvalue_atom2889 = new BitSet(new ulong[]{0x800000010000000UL});
		public static readonly BitSet _lvalue_in_lvalue_atom2891 = new BitSet(new ulong[]{0x1000000000000000UL,0x4UL});
		public static readonly BitSet _60_in_lvalue_atom2897 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _ident_in_lvalue_atom2911 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _IDENT_in_ident2922 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _77_in_ident2925 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _IDENT_in_ident2927 = new BitSet(new ulong[]{0x2UL,0x2000UL});
		public static readonly BitSet _95_in_infix_func2940 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _ident_in_infix_func2943 = new BitSet(new ulong[]{0x0UL,0x80000000UL});
		public static readonly BitSet _95_in_infix_func2945 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _generic_parameter_in_synpred108_SugarCpp2469 = new BitSet(new ulong[]{0x800000000000000UL});
		public static readonly BitSet _59_in_synpred108_SugarCpp2472 = new BitSet(new ulong[]{0xBA10010810000000UL,0x4020000000019UL});
		public static readonly BitSet _expr_list_in_synpred108_SugarCpp2474 = new BitSet(new ulong[]{0x1000000000000000UL});
		public static readonly BitSet _60_in_synpred108_SugarCpp2477 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _91_in_synpred110_SugarCpp2504 = new BitSet(new ulong[]{0xAA10010810000000UL,0x4020010000019UL});
		public static readonly BitSet _expr_list_in_synpred110_SugarCpp2506 = new BitSet(new ulong[]{0x0UL,0x10000000UL});
		public static readonly BitSet _92_in_synpred110_SugarCpp2509 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _77_in_synpred130_SugarCpp2925 = new BitSet(new ulong[]{0x10000000UL});
		public static readonly BitSet _IDENT_in_synpred130_SugarCpp2927 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  SugarCpp.Compiler 
